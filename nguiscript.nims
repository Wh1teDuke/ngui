import std/[strutils, sequtils, os]



cd(thisDir())

template info(str: varargs[untyped]) = echo "[INFO] ", str
template error(str: varargs[untyped]) = echo "[ERROR] ", str

proc replace(str: string, args: openArray[(string, string)]): string =
  result = str
  for a, b in items(args): result = replace(result, a, b)

let
  # https://nim-lang.github.io/Nim/nimc.html#compiler-usage-configuration-files
  cfgDir  = getConfigDir() / "nim"
  cfgFile = cfgDir / "nim.cfg"
  beTempl = "ngui_backend_template.nim"

task newBackend, "Gen Backend Interface Template":
  var str = """
#import private/backendfolder/[a,b,c]
#includeUtils ELEMENT, CONTAINER, EVENT, TIMER, ADAPTER
#     v-- Set 'LAX_ERROR' to false to see fireworks
const LAX_ERROR = true
  
template beInfo(str: string) =
  echo("[NGUI_INFO] " & str & " NOT IMPLEMENTED")
template beError(str: string) =
  raiseAssert("[NGUI_ERROR] " & str & " NOT IMPLEMENTED")
template beMsg(str: string) = 
  when LAX_ERROR: beInfo(str) else: beError(str)
"""

  var procDef = ""
  
  proc addBody() =
    if procDef == "": return
    add(str, "  beMsg(\"$1\")\l\l" % [procDef])
    procDef = ""
  
  for line in splitLines(
      readFile($CurDir / "src" / "backends" / "ngui_backend_interface.nim")):
    
    if startsWith(line, "#skip"):
      continue
    
    if startsWith(line, "#"):
      addBody()
      add(str, "\l" & line & "\l")
      continue

    if startsWith(line, "  ##"):
      add(str, line & "\l")
      addBody()
      continue

    if startsWith(line, "proc") or startsWith(line, "#"):
      addBody()
      add(str, line & " =\l")
      procDef = line
      continue
    
  addBody()  
  writeFile(beTempl, str)
  
proc addToUserCfg(line: string): bool =
  if not fileExists(cfgFile):
    info cfgFile, " doesn't exist, creating a new one"
    mkDir(cfgDir)
    writeFile(cfgFile, "## USER CONFIG FILE GENERATED BY NGUISCRIPT\l\l")

  var lines = splitLines(readFile(cfgFile))

  if any(lines, proc(x: string): bool = line in x):
    return false

  while lines.len > 0 and lines[^1] == "": discard lines.pop
  lines.add(line & " # <-- Added by nguiscript")

  writeFile(cfgFile, join(lines, "\l") & "\l")
  return true

type RFUCResult = enum rFileNotFound rLineNotFound rLineRemoved

proc remFromUserCfg(line: string): RFUCResult =
  if not fileExists(cfgFile):
    return rFileNotFound
  
  var lines = splitLines(readFile(cfgFile))

  if not any(lines, proc(x: string): bool = line in x):
    return rLineNotFound

  lines = filter(lines, proc(x: string): bool = line notin x)
  while lines.len > 0 and lines[^1] == "": discard lines.pop

  writeFile(cfgFile, join(lines, "\l") & "\l")
  return rLineRemoved

task addPath, "Add ngui to your user config file":
  info "Installing in ", cfgFile
  
  info(
    if not addToUserCfg("path: \"" & thisDir() & "\""):
      "ngui seems to be already installed"
    else:
      "ngui installed"
  )

task remPath, "Remove ngui from your user config file":
  info "Uninstalling ngui from ", cfgFile
  
  info(
    case remFromUserCfg("ngui"):
    of rLineRemoved:  "ngui uninstalled"
    of rLineNotFound: "ngui wasn't installed"
    of rFileNotFound: "File doesn't exist"
  )


task defaultBackend, "Set default backend":
  var be = paramStr(paramCount()) # paramCount() - 1 is this a bug?
  # TODO: Get backend enum from a separate module
  info "Setting default backend: ", be
  discard remFromUserCfg("define:nguibackend=")
  if startsWith(be, "be"): discard addToUserCfg("define:nguibackend=" & be)

task examples, "Compile and execute all the examples in order":
  try:
    for i in 1 .. 30:
      let file = $CurDir / "examples" / ("e" & $i & ".nim")
      if not fileExists(file): continue
      
      for _ in 0 .. 30: echo("") # Clear screen
      echo readFile(file)
      info("Compiling ", file)
      info("Interrupt with ctrl + c")

      try:
        exec("nim r -d:release --hints:off --warnings:off " & file)
      except:
        if i != 1: raiseAssert("")

  except:
    discard # C'est fini

task docs, "Gen documentation":
  const
    DF = $CurDir / "docs" / "html"
    arg = "--warnings:off --hints:off --outdir:"

  proc nDoc(a: string) = exec("nim doc --index:off -d:nguibackend:doc $1 $2 $3" % [arg, DF, a])
  proc nRSTDoc(a: string) = exec("nim rst2html $1 $2 $3" % [arg, DF, a])
  

  # Code Documentation ----------------
  rmDir(DF)
  mkDir(DF)

  # > Project
  
  # Hack to document backend
  let
    intSrcFile   = $CurDir / "src" / "backends" / "ngui_backend_interface.nim"
    intFile      = $CurDir / "ngui_backend_interface.nim"
    intHead      = $CurDir / "fakeimpl.nim"
    intFileHTML  = replace(intFile, "nim", "html")

  cpFile(intSrcFile, intFile)
  var html = splitLines(readFile(intFile))
  for line in mitems html:
    if not startsWith(line, "proc"): continue
    let (a, b) = (if '(' in line: ("(", "*(") else: (":", "*:"))
    line = replace(line, a, b) & " = discard"
    
  var head = readFile("src" / "ngui.nim")
  setLen(head, find(head, "include"))
  head =
    replace(head, "import utils/stb", "import src/utils/stb")
    .replace("# FD", "= discard")

  writeFile(intHead, head)
  writeFile(intFile, "import times, fakeimpl\l" & html.join("\l"))

  nDoc(intFile)
  writeFile(intFile, replace(readFile(intFile), "*")
            .replace("import times, fakeimpl"))

  writeFile(DF / intFileHTML, replace(readFile(DF / intFileHTML),
    [("fakeimpl", "ngui"), ("Imports", "Included by")]))
  
  # Main module
  nDoc($CurDir / "src" / "ngui.nim")

  # Tutorial --------------------------
  nRSTDoc(DF / ParDir / "learn.rst")
  
  # Architecture ----------------------
  nRSTDoc(DF / ParDir / "architecture.rst")
  writeFile($CurDir / "docs" / "html" / "architecture.html",
    replace(readFile($CurDir / "docs" / "html" / "architecture.html"),
      "./assets", "../assets")
  )
  
  # Cleanup
  rmFile(intFile)
  rmFile(intHead)