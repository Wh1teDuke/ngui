import std/[strutils, sequtils, os]



cd(thisDir())

template info(str: varargs[untyped]) = echo "[INFO] ", str
template error(str: varargs[untyped]) = echo "[ERROR] ", str

proc replace(str: string, args: openArray[(string, string)]): string =
  result = str
  for a, b in items(args): result = replace(result, a, b)

let
  # https://nim-lang.github.io/Nim/nimc.html#compiler-usage-configuration-files
  cfgDir  = getConfigDir() / "nim"
  cfgFile = cfgDir / "nim.cfg"
  beTempl = "ngui_backend_template.nim"

task newBackend, "Gen Backend Interface Template":
  var str = """
#import private/backendfolder/[a,b,c]
#includeUtils ELEMENT, CONTAINER, EVENT, TIMER, ADAPTER
#     v-- Set 'LAX_ERROR' to false to see fireworks
const LAX_ERROR = true
  
template bInfo(str: string) =
  echo("[NGUI_INFO] " & str & " NOT IMPLEMENTED")
template bError(str: string) =
  raiseAssert("[NGUI_ERROR] " & str & " NOT IMPLEMENTED")
"""

  var procDef = ""
  
  proc addBody() =
    if procDef == "": return
    add(str, "  # REMOVE BODY AND ADD YOUR OWN IMPLEMENTATION\l")
    add(str, "  when LAX_ERROR: bInfo(\"" & procDef & "\")\l")
    add(str, "  else: bError(\"" & procDef & "\")\l\l")
    procDef = ""
  
  for line in splitLines(
      readFile($CurDir / "src" / "backends" / "ngui_backend_interface.nim")):
    if startsWith(line, "#"):
      addBody()
      add(str, "\l\l" & line & "\l")
      continue

    if startsWith(line, "  ##"):
      add(str, line & "\l")
      addBody()
      continue

    if startsWith(line, "proc") or startsWith(line, "#"):
      addBody()
      add(str, line & " =\l")
      procDef = line
      continue
    
  addBody()  
  writeFile(beTempl, str)

task addPath, "Add ngui to your user config file":
  info "Installing in ", cfgFile
  
  if not fileExists(cfgFile):
    info cfgFile, " doesn't exist, creating a new one"
    mkDir(cfgDir)
    writeFile(cfgFile, "## USER CONFIG FILE GENERATED BY NGUISCRIPT\l\l")

  var lines = splitLines(readFile(cfgFile))

  if any(lines, proc(x: string): bool = "ngui" in x):
    info "ngui seems to be already installed"
    return

  while lines.len > 0 and lines[^1] == "": discard lines.pop
  lines.add("path:  \"$1\" # <-- Added by nguiscript addPath" % [thisDir()])

  writeFile(cfgFile, join(lines, "\l") & "\l")
  info "ngui installed"

task remPath, "Remove ngui from your user config file":
  info "Uninstalling ngui from ", cfgFile
  if not fileExists(cfgFile):
    info "File doesn't exist"
    return
  
  var lines = splitLines(readFile(cfgFile))

  if not any(lines, proc(x: string): bool = "ngui" in x):
    info "ngui wasn't installed"
    return

  lines = filter(lines, proc(x: string): bool = "ngui" notin x)
  while lines.len > 0 and lines[^1] == "": discard lines.pop

  writeFile(cfgFile, join(lines, "\l") & "\l")
  info "ngui uninstalled"

task examples, "Compile and execute all the examples in order":
  try:
    for i in 1 .. 30:
      let file = $CurDir / "examples" / ("e" & $i & ".nim")
      if not fileExists(file): continue
      
      for _ in 0 .. 30: echo("") # Clear screen
      echo readFile(file)
      info("Compiling ", file)
      info("Interrupt with ctrl + c")

      try:
        exec("nim r -d:release --hints:off --warnings:off " & file)
      except:
        if i != 1: raiseAssert("")

  except:
    discard # C'est fini

task docs, "Gen documentation":
  const
    DF = $CurDir / "docs" / "html"
    arg = "--warnings:off --hints:off --outdir:"

  proc nDoc(a: string) = exec("nim doc $1 $2 $3" % [arg, DF, a])
  proc nRSTDoc(a: string) = exec("nim rst2html $1 $2 $3" % [arg, DF, a])
  

  # Code Documentation ----------------
  rmDir(DF)
  mkDir(DF)

  # > Project
  
  # Hack to document backend
  let
    intSrcFile   = $CurDir / "src" / "backends" / "ngui_backend_interface.nim"
    intFile      = $CurDir / "ngui_backend_interface.nim"
    intHead      = $CurDir / "fakeimpl.nim"
    intFileHTML  = replace(intFile, "nim", "html")

  cpFile(intSrcFile, intFile)
  var html = splitLines(readFile(intFile))
  for line in mitems html:
    if not startsWith(line, "proc"): continue
    let (a, b) = (if '(' in line: ("(", "*(") else: (":", "*:"))
    line = replace(line, a, b) & " = discard"
    
  var head = readFile("src" / "ngui.nim")
  setLen(head, find(head, "include"))

  writeFile(intHead, head)
  writeFile(intFile, "import fakeimpl,times\l" & html.join("\l"))

  nDoc(intFile)

  rmFile(intFile)
  rmFile(intHead)

  writeFile(DF / intFileHTML, replace(readFile(DF / intFileHTML),
    [("fakeimpl", "ngui"), ("Imports", "Included by")]))
  
  # Main module
  nDoc($CurDir / "src" / "ngui.nim")

  # Tutorial --------------------------
  nRSTDoc(DF / ParDir / "learn.rst")
  
  # Architecture ----------------------
  nRSTDoc(DF / ParDir / "architecture.rst")
  
  # Fix man's mistakes ----------------
  let nlogo = ""
  var css = splitLines(replace(readFile(DF / "nimdoc.out.css"),
    [("51px", "100px"), ("14px", "100px"),]))

  for line in mitems css:
    const S = """  --nim-sprite-base64: url("data:image/png;base64,"""
    if not startsWith(line, S): continue
    line = line[0 ..< S.len] & nlogo & "\");"

  writeFile(DF / "nimdoc.out.css", css.join("\l"))
