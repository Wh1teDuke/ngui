#[
    OpenGL loader generated by glad 0.1.34 on Tue Mar 23 14:20:31 2021.

    Language/Generator: Nim
    Specification: gl
    APIs: gl=4.6
    Profile: compatibility
    Extensions:
        
    Loader: True
    Local files: True
    Omit khrplatform: False
    Reproducible: False

    Commandline:
        --profile="compatibility" --api="gl=4.6" --generator="nim" --spec="gl" --local-files --extensions=""
    Online:
        https://glad.dav1d.de/#profile=compatibility&language=nim&specification=gl&loader=on&api=gl%3D4.6
]#

import strutils

var glVersionMajor, glVersionMinor: int

# Types
type
  ClContext* = distinct pointer
  ClEvent* = distinct pointer
  GLVULKANPROCNV* = pointer
  GLbitfield* = uint32
  GLboolean* = bool
  GLbyte* = int8
  GLchar* = char
  GLcharARB* = byte
  GLclampd* = float64
  GLclampf* = float32
  GLclampx* = int32
  GLdouble* = float64
  GLeglClientBufferEXT* = pointer
  GLeglImageOES* = distinct pointer
  GLenum* = uint32
  GLfixed* = int32
  GLfloat* = float32
  GLhalf* = uint16
  GLhalfARB* = uint16
  GLhalfNV* = uint16
  GLhandleARB* = uint32
  GLint* = int32
  GLint64* = int64
  GLint64EXT* = int64
  GLintptr* = int
  GLintptrARB* = int
  GLshort* = int16
  GLsizei* = int32
  GLsizeiptr* = int
  GLsizeiptrARB* = int
  GLsync* = distinct pointer
  GLubyte* = uint8
  GLuint* = uint32
  GLuint64* = uint64
  GLuint64EXT* = uint64
  GLushort* = uint16
  GLvdpauSurfaceNV* = int32
  GLvoid* = pointer

  GLdebugProc* = proc (
    source: GLenum,
    typ: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcArb* = proc (
    source: GLenum,
    typ: GLenum,
    id: GLuint,
    severity: GLenum,
    len: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcAmd* = proc (
    id: GLuint,
    category: GLenum,
    severity: GLenum,
    len: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcKhr* = proc (
    source, typ: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}


# Enums
const
  GL_FALSE* = 0
  GL_INVALID_INDEX*: uint32 = uint32(0xFFFFFFFF)
  GL_NONE* = 0
  GL_NONE_OES* = 0
  GL_NO_ERROR* = 0
  GL_ONE* = 1
  GL_TIMEOUT_IGNORED*: uint64 = 0xFFFFFFFFFFFFFFFF'u64
  GL_TIMEOUT_IGNORED_APPLE*: uint64 = 0xFFFFFFFFFFFFFFFF'u64
  GL_TRUE* = 1
  GL_VERSION_ES_CL_1_0* = 1
  GL_VERSION_ES_CL_1_1* = 1
  GL_VERSION_ES_CM_1_1* = 1
  GL_ZERO* = 0

  GL_DEPTH_BUFFER_BIT*: GLenum = GLenum(0x00000100)
  GL_STENCIL_BUFFER_BIT*: GLenum = GLenum(0x00000400)
  GL_COLOR_BUFFER_BIT*: GLenum = GLenum(0x00004000)
  GL_POINTS*: GLenum = GLenum(0x0000)
  GL_LINES*: GLenum = GLenum(0x0001)
  GL_LINE_LOOP*: GLenum = GLenum(0x0002)
  GL_LINE_STRIP*: GLenum = GLenum(0x0003)
  GL_TRIANGLES*: GLenum = GLenum(0x0004)
  GL_TRIANGLE_STRIP*: GLenum = GLenum(0x0005)
  GL_TRIANGLE_FAN*: GLenum = GLenum(0x0006)
  GL_QUADS*: GLenum = GLenum(0x0007)
  GL_NEVER*: GLenum = GLenum(0x0200)
  GL_LESS*: GLenum = GLenum(0x0201)
  GL_EQUAL*: GLenum = GLenum(0x0202)
  GL_LEQUAL*: GLenum = GLenum(0x0203)
  GL_GREATER*: GLenum = GLenum(0x0204)
  GL_NOTEQUAL*: GLenum = GLenum(0x0205)
  GL_GEQUAL*: GLenum = GLenum(0x0206)
  GL_ALWAYS*: GLenum = GLenum(0x0207)
  GL_SRC_COLOR*: GLenum = GLenum(0x0300)
  GL_ONE_MINUS_SRC_COLOR*: GLenum = GLenum(0x0301)
  GL_SRC_ALPHA*: GLenum = GLenum(0x0302)
  GL_ONE_MINUS_SRC_ALPHA*: GLenum = GLenum(0x0303)
  GL_DST_ALPHA*: GLenum = GLenum(0x0304)
  GL_ONE_MINUS_DST_ALPHA*: GLenum = GLenum(0x0305)
  GL_DST_COLOR*: GLenum = GLenum(0x0306)
  GL_ONE_MINUS_DST_COLOR*: GLenum = GLenum(0x0307)
  GL_SRC_ALPHA_SATURATE*: GLenum = GLenum(0x0308)
  GL_FRONT_LEFT*: GLenum = GLenum(0x0400)
  GL_FRONT_RIGHT*: GLenum = GLenum(0x0401)
  GL_BACK_LEFT*: GLenum = GLenum(0x0402)
  GL_BACK_RIGHT*: GLenum = GLenum(0x0403)
  GL_FRONT*: GLenum = GLenum(0x0404)
  GL_BACK*: GLenum = GLenum(0x0405)
  GL_LEFT*: GLenum = GLenum(0x0406)
  GL_RIGHT*: GLenum = GLenum(0x0407)
  GL_FRONT_AND_BACK*: GLenum = GLenum(0x0408)
  GL_INVALID_ENUM*: GLenum = GLenum(0x0500)
  GL_INVALID_VALUE*: GLenum = GLenum(0x0501)
  GL_INVALID_OPERATION*: GLenum = GLenum(0x0502)
  GL_OUT_OF_MEMORY*: GLenum = GLenum(0x0505)
  GL_CW*: GLenum = GLenum(0x0900)
  GL_CCW*: GLenum = GLenum(0x0901)
  GL_POINT_SIZE*: GLenum = GLenum(0x0B11)
  GL_POINT_SIZE_RANGE*: GLenum = GLenum(0x0B12)
  GL_POINT_SIZE_GRANULARITY*: GLenum = GLenum(0x0B13)
  GL_LINE_SMOOTH*: GLenum = GLenum(0x0B20)
  GL_LINE_WIDTH*: GLenum = GLenum(0x0B21)
  GL_LINE_WIDTH_RANGE*: GLenum = GLenum(0x0B22)
  GL_LINE_WIDTH_GRANULARITY*: GLenum = GLenum(0x0B23)
  GL_POLYGON_MODE*: GLenum = GLenum(0x0B40)
  GL_POLYGON_SMOOTH*: GLenum = GLenum(0x0B41)
  GL_CULL_FACE*: GLenum = GLenum(0x0B44)
  GL_CULL_FACE_MODE*: GLenum = GLenum(0x0B45)
  GL_FRONT_FACE*: GLenum = GLenum(0x0B46)
  GL_DEPTH_RANGE*: GLenum = GLenum(0x0B70)
  GL_DEPTH_TEST*: GLenum = GLenum(0x0B71)
  GL_DEPTH_WRITEMASK*: GLenum = GLenum(0x0B72)
  GL_DEPTH_CLEAR_VALUE*: GLenum = GLenum(0x0B73)
  GL_DEPTH_FUNC*: GLenum = GLenum(0x0B74)
  GL_STENCIL_TEST*: GLenum = GLenum(0x0B90)
  GL_STENCIL_CLEAR_VALUE*: GLenum = GLenum(0x0B91)
  GL_STENCIL_FUNC*: GLenum = GLenum(0x0B92)
  GL_STENCIL_VALUE_MASK*: GLenum = GLenum(0x0B93)
  GL_STENCIL_FAIL*: GLenum = GLenum(0x0B94)
  GL_STENCIL_PASS_DEPTH_FAIL*: GLenum = GLenum(0x0B95)
  GL_STENCIL_PASS_DEPTH_PASS*: GLenum = GLenum(0x0B96)
  GL_STENCIL_REF*: GLenum = GLenum(0x0B97)
  GL_STENCIL_WRITEMASK*: GLenum = GLenum(0x0B98)
  GL_VIEWPORT*: GLenum = GLenum(0x0BA2)
  GL_DITHER*: GLenum = GLenum(0x0BD0)
  GL_BLEND_DST*: GLenum = GLenum(0x0BE0)
  GL_BLEND_SRC*: GLenum = GLenum(0x0BE1)
  GL_BLEND*: GLenum = GLenum(0x0BE2)
  GL_LOGIC_OP_MODE*: GLenum = GLenum(0x0BF0)
  GL_DRAW_BUFFER*: GLenum = GLenum(0x0C01)
  GL_READ_BUFFER*: GLenum = GLenum(0x0C02)
  GL_SCISSOR_BOX*: GLenum = GLenum(0x0C10)
  GL_SCISSOR_TEST*: GLenum = GLenum(0x0C11)
  GL_COLOR_CLEAR_VALUE*: GLenum = GLenum(0x0C22)
  GL_COLOR_WRITEMASK*: GLenum = GLenum(0x0C23)
  GL_DOUBLEBUFFER*: GLenum = GLenum(0x0C32)
  GL_STEREO*: GLenum = GLenum(0x0C33)
  GL_LINE_SMOOTH_HINT*: GLenum = GLenum(0x0C52)
  GL_POLYGON_SMOOTH_HINT*: GLenum = GLenum(0x0C53)
  GL_UNPACK_SWAP_BYTES*: GLenum = GLenum(0x0CF0)
  GL_UNPACK_LSB_FIRST*: GLenum = GLenum(0x0CF1)
  GL_UNPACK_ROW_LENGTH*: GLenum = GLenum(0x0CF2)
  GL_UNPACK_SKIP_ROWS*: GLenum = GLenum(0x0CF3)
  GL_UNPACK_SKIP_PIXELS*: GLenum = GLenum(0x0CF4)
  GL_UNPACK_ALIGNMENT*: GLenum = GLenum(0x0CF5)
  GL_PACK_SWAP_BYTES*: GLenum = GLenum(0x0D00)
  GL_PACK_LSB_FIRST*: GLenum = GLenum(0x0D01)
  GL_PACK_ROW_LENGTH*: GLenum = GLenum(0x0D02)
  GL_PACK_SKIP_ROWS*: GLenum = GLenum(0x0D03)
  GL_PACK_SKIP_PIXELS*: GLenum = GLenum(0x0D04)
  GL_PACK_ALIGNMENT*: GLenum = GLenum(0x0D05)
  GL_MAX_TEXTURE_SIZE*: GLenum = GLenum(0x0D33)
  GL_MAX_VIEWPORT_DIMS*: GLenum = GLenum(0x0D3A)
  GL_SUBPIXEL_BITS*: GLenum = GLenum(0x0D50)
  GL_TEXTURE_1D*: GLenum = GLenum(0x0DE0)
  GL_TEXTURE_2D*: GLenum = GLenum(0x0DE1)
  GL_TEXTURE_WIDTH*: GLenum = GLenum(0x1000)
  GL_TEXTURE_HEIGHT*: GLenum = GLenum(0x1001)
  GL_TEXTURE_BORDER_COLOR*: GLenum = GLenum(0x1004)
  GL_DONT_CARE*: GLenum = GLenum(0x1100)
  GL_FASTEST*: GLenum = GLenum(0x1101)
  GL_NICEST*: GLenum = GLenum(0x1102)
  cGL_BYTE*: GLenum = GLenum(0x1400)
  GL_UNSIGNED_BYTE*: GLenum = GLenum(0x1401)
  cGL_SHORT*: GLenum = GLenum(0x1402)
  GL_UNSIGNED_SHORT*: GLenum = GLenum(0x1403)
  cGL_INT*: GLenum = GLenum(0x1404)
  GL_UNSIGNED_INT*: GLenum = GLenum(0x1405)
  cGL_FLOAT*: GLenum = GLenum(0x1406)
  GL_STACK_OVERFLOW*: GLenum = GLenum(0x0503)
  GL_STACK_UNDERFLOW*: GLenum = GLenum(0x0504)
  GL_CLEAR*: GLenum = GLenum(0x1500)
  GL_AND*: GLenum = GLenum(0x1501)
  GL_AND_REVERSE*: GLenum = GLenum(0x1502)
  GL_COPY*: GLenum = GLenum(0x1503)
  GL_AND_INVERTED*: GLenum = GLenum(0x1504)
  GL_NOOP*: GLenum = GLenum(0x1505)
  GL_XOR*: GLenum = GLenum(0x1506)
  GL_OR*: GLenum = GLenum(0x1507)
  GL_NOR*: GLenum = GLenum(0x1508)
  GL_EQUIV*: GLenum = GLenum(0x1509)
  GL_INVERT*: GLenum = GLenum(0x150A)
  GL_OR_REVERSE*: GLenum = GLenum(0x150B)
  GL_COPY_INVERTED*: GLenum = GLenum(0x150C)
  GL_OR_INVERTED*: GLenum = GLenum(0x150D)
  GL_NAND*: GLenum = GLenum(0x150E)
  GL_SET*: GLenum = GLenum(0x150F)
  GL_TEXTURE*: GLenum = GLenum(0x1702)
  GL_COLOR*: GLenum = GLenum(0x1800)
  GL_DEPTH*: GLenum = GLenum(0x1801)
  GL_STENCIL*: GLenum = GLenum(0x1802)
  GL_STENCIL_INDEX*: GLenum = GLenum(0x1901)
  GL_DEPTH_COMPONENT*: GLenum = GLenum(0x1902)
  GL_RED*: GLenum = GLenum(0x1903)
  GL_GREEN*: GLenum = GLenum(0x1904)
  GL_BLUE*: GLenum = GLenum(0x1905)
  GL_ALPHA*: GLenum = GLenum(0x1906)
  GL_RGB*: GLenum = GLenum(0x1907)
  GL_RGBA*: GLenum = GLenum(0x1908)
  GL_POINT*: GLenum = GLenum(0x1B00)
  GL_LINE*: GLenum = GLenum(0x1B01)
  GL_FILL*: GLenum = GLenum(0x1B02)
  GL_KEEP*: GLenum = GLenum(0x1E00)
  GL_REPLACE*: GLenum = GLenum(0x1E01)
  GL_INCR*: GLenum = GLenum(0x1E02)
  GL_DECR*: GLenum = GLenum(0x1E03)
  GL_VENDOR*: GLenum = GLenum(0x1F00)
  GL_RENDERER*: GLenum = GLenum(0x1F01)
  GL_VERSION*: GLenum = GLenum(0x1F02)
  GL_EXTENSIONS*: GLenum = GLenum(0x1F03)
  GL_NEAREST*: GLenum = GLenum(0x2600)
  GL_LINEAR*: GLenum = GLenum(0x2601)
  GL_NEAREST_MIPMAP_NEAREST*: GLenum = GLenum(0x2700)
  GL_LINEAR_MIPMAP_NEAREST*: GLenum = GLenum(0x2701)
  GL_NEAREST_MIPMAP_LINEAR*: GLenum = GLenum(0x2702)
  GL_LINEAR_MIPMAP_LINEAR*: GLenum = GLenum(0x2703)
  GL_TEXTURE_MAG_FILTER*: GLenum = GLenum(0x2800)
  GL_TEXTURE_MIN_FILTER*: GLenum = GLenum(0x2801)
  GL_TEXTURE_WRAP_S*: GLenum = GLenum(0x2802)
  GL_TEXTURE_WRAP_T*: GLenum = GLenum(0x2803)
  GL_REPEAT*: GLenum = GLenum(0x2901)
  GL_CURRENT_BIT*: GLenum = GLenum(0x00000001)
  GL_POINT_BIT*: GLenum = GLenum(0x00000002)
  GL_LINE_BIT*: GLenum = GLenum(0x00000004)
  GL_POLYGON_BIT*: GLenum = GLenum(0x00000008)
  GL_POLYGON_STIPPLE_BIT*: GLenum = GLenum(0x00000010)
  GL_PIXEL_MODE_BIT*: GLenum = GLenum(0x00000020)
  GL_LIGHTING_BIT*: GLenum = GLenum(0x00000040)
  GL_FOG_BIT*: GLenum = GLenum(0x00000080)
  GL_ACCUM_BUFFER_BIT*: GLenum = GLenum(0x00000200)
  GL_VIEWPORT_BIT*: GLenum = GLenum(0x00000800)
  GL_TRANSFORM_BIT*: GLenum = GLenum(0x00001000)
  GL_ENABLE_BIT*: GLenum = GLenum(0x00002000)
  GL_HINT_BIT*: GLenum = GLenum(0x00008000)
  GL_EVAL_BIT*: GLenum = GLenum(0x00010000)
  GL_LIST_BIT*: GLenum = GLenum(0x00020000)
  GL_TEXTURE_BIT*: GLenum = GLenum(0x00040000)
  GL_SCISSOR_BIT*: GLenum = GLenum(0x00080000)
  GL_ALL_ATTRIB_BITS*: GLenum = GLenum(0xFFFFFFFF)
  GL_QUAD_STRIP*: GLenum = GLenum(0x0008)
  GL_POLYGON*: GLenum = GLenum(0x0009)
  GL_ACCUM*: GLenum = GLenum(0x0100)
  GL_LOAD*: GLenum = GLenum(0x0101)
  GL_RETURN*: GLenum = GLenum(0x0102)
  GL_MULT*: GLenum = GLenum(0x0103)
  GL_ADD*: GLenum = GLenum(0x0104)
  GL_AUX0*: GLenum = GLenum(0x0409)
  GL_AUX1*: GLenum = GLenum(0x040A)
  GL_AUX2*: GLenum = GLenum(0x040B)
  GL_AUX3*: GLenum = GLenum(0x040C)
  GL_2D*: GLenum = GLenum(0x0600)
  GL_3D*: GLenum = GLenum(0x0601)
  GL_3D_COLOR*: GLenum = GLenum(0x0602)
  GL_3D_COLOR_TEXTURE*: GLenum = GLenum(0x0603)
  GL_4D_COLOR_TEXTURE*: GLenum = GLenum(0x0604)
  GL_PASS_THROUGH_TOKEN*: GLenum = GLenum(0x0700)
  GL_POINT_TOKEN*: GLenum = GLenum(0x0701)
  GL_LINE_TOKEN*: GLenum = GLenum(0x0702)
  GL_POLYGON_TOKEN*: GLenum = GLenum(0x0703)
  GL_BITMAP_TOKEN*: GLenum = GLenum(0x0704)
  GL_DRAW_PIXEL_TOKEN*: GLenum = GLenum(0x0705)
  GL_COPY_PIXEL_TOKEN*: GLenum = GLenum(0x0706)
  GL_LINE_RESET_TOKEN*: GLenum = GLenum(0x0707)
  GL_EXP*: GLenum = GLenum(0x0800)
  GL_EXP2*: GLenum = GLenum(0x0801)
  GL_COEFF*: GLenum = GLenum(0x0A00)
  GL_ORDER*: GLenum = GLenum(0x0A01)
  GL_DOMAIN*: GLenum = GLenum(0x0A02)
  GL_PIXEL_MAP_I_TO_I*: GLenum = GLenum(0x0C70)
  GL_PIXEL_MAP_S_TO_S*: GLenum = GLenum(0x0C71)
  GL_PIXEL_MAP_I_TO_R*: GLenum = GLenum(0x0C72)
  GL_PIXEL_MAP_I_TO_G*: GLenum = GLenum(0x0C73)
  GL_PIXEL_MAP_I_TO_B*: GLenum = GLenum(0x0C74)
  GL_PIXEL_MAP_I_TO_A*: GLenum = GLenum(0x0C75)
  GL_PIXEL_MAP_R_TO_R*: GLenum = GLenum(0x0C76)
  GL_PIXEL_MAP_G_TO_G*: GLenum = GLenum(0x0C77)
  GL_PIXEL_MAP_B_TO_B*: GLenum = GLenum(0x0C78)
  GL_PIXEL_MAP_A_TO_A*: GLenum = GLenum(0x0C79)
  GL_CURRENT_COLOR*: GLenum = GLenum(0x0B00)
  GL_CURRENT_INDEX*: GLenum = GLenum(0x0B01)
  GL_CURRENT_NORMAL*: GLenum = GLenum(0x0B02)
  GL_CURRENT_TEXTURE_COORDS*: GLenum = GLenum(0x0B03)
  GL_CURRENT_RASTER_COLOR*: GLenum = GLenum(0x0B04)
  GL_CURRENT_RASTER_INDEX*: GLenum = GLenum(0x0B05)
  GL_CURRENT_RASTER_TEXTURE_COORDS*: GLenum = GLenum(0x0B06)
  GL_CURRENT_RASTER_POSITION*: GLenum = GLenum(0x0B07)
  GL_CURRENT_RASTER_POSITION_VALID*: GLenum = GLenum(0x0B08)
  GL_CURRENT_RASTER_DISTANCE*: GLenum = GLenum(0x0B09)
  GL_POINT_SMOOTH*: GLenum = GLenum(0x0B10)
  GL_LINE_STIPPLE*: GLenum = GLenum(0x0B24)
  GL_LINE_STIPPLE_PATTERN*: GLenum = GLenum(0x0B25)
  GL_LINE_STIPPLE_REPEAT*: GLenum = GLenum(0x0B26)
  GL_LIST_MODE*: GLenum = GLenum(0x0B30)
  GL_MAX_LIST_NESTING*: GLenum = GLenum(0x0B31)
  GL_LIST_BASE*: GLenum = GLenum(0x0B32)
  GL_LIST_INDEX*: GLenum = GLenum(0x0B33)
  GL_POLYGON_STIPPLE*: GLenum = GLenum(0x0B42)
  GL_EDGE_FLAG*: GLenum = GLenum(0x0B43)
  GL_LIGHTING*: GLenum = GLenum(0x0B50)
  GL_LIGHT_MODEL_LOCAL_VIEWER*: GLenum = GLenum(0x0B51)
  GL_LIGHT_MODEL_TWO_SIDE*: GLenum = GLenum(0x0B52)
  GL_LIGHT_MODEL_AMBIENT*: GLenum = GLenum(0x0B53)
  GL_SHADE_MODEL*: GLenum = GLenum(0x0B54)
  GL_COLOR_MATERIAL_FACE*: GLenum = GLenum(0x0B55)
  GL_COLOR_MATERIAL_PARAMETER*: GLenum = GLenum(0x0B56)
  GL_COLOR_MATERIAL*: GLenum = GLenum(0x0B57)
  GL_FOG*: GLenum = GLenum(0x0B60)
  GL_FOG_INDEX*: GLenum = GLenum(0x0B61)
  GL_FOG_DENSITY*: GLenum = GLenum(0x0B62)
  GL_FOG_START*: GLenum = GLenum(0x0B63)
  GL_FOG_END*: GLenum = GLenum(0x0B64)
  GL_FOG_MODE*: GLenum = GLenum(0x0B65)
  GL_FOG_COLOR*: GLenum = GLenum(0x0B66)
  GL_ACCUM_CLEAR_VALUE*: GLenum = GLenum(0x0B80)
  GL_MATRIX_MODE*: GLenum = GLenum(0x0BA0)
  GL_NORMALIZE*: GLenum = GLenum(0x0BA1)
  GL_MODELVIEW_STACK_DEPTH*: GLenum = GLenum(0x0BA3)
  GL_PROJECTION_STACK_DEPTH*: GLenum = GLenum(0x0BA4)
  GL_TEXTURE_STACK_DEPTH*: GLenum = GLenum(0x0BA5)
  GL_MODELVIEW_MATRIX*: GLenum = GLenum(0x0BA6)
  GL_PROJECTION_MATRIX*: GLenum = GLenum(0x0BA7)
  GL_TEXTURE_MATRIX*: GLenum = GLenum(0x0BA8)
  GL_ATTRIB_STACK_DEPTH*: GLenum = GLenum(0x0BB0)
  GL_ALPHA_TEST*: GLenum = GLenum(0x0BC0)
  GL_ALPHA_TEST_FUNC*: GLenum = GLenum(0x0BC1)
  GL_ALPHA_TEST_REF*: GLenum = GLenum(0x0BC2)
  GL_LOGIC_OP*: GLenum = GLenum(0x0BF1)
  GL_AUX_BUFFERS*: GLenum = GLenum(0x0C00)
  GL_INDEX_CLEAR_VALUE*: GLenum = GLenum(0x0C20)
  GL_INDEX_WRITEMASK*: GLenum = GLenum(0x0C21)
  GL_INDEX_MODE*: GLenum = GLenum(0x0C30)
  GL_RGBA_MODE*: GLenum = GLenum(0x0C31)
  GL_RENDER_MODE*: GLenum = GLenum(0x0C40)
  GL_PERSPECTIVE_CORRECTION_HINT*: GLenum = GLenum(0x0C50)
  GL_POINT_SMOOTH_HINT*: GLenum = GLenum(0x0C51)
  GL_FOG_HINT*: GLenum = GLenum(0x0C54)
  GL_TEXTURE_GEN_S*: GLenum = GLenum(0x0C60)
  GL_TEXTURE_GEN_T*: GLenum = GLenum(0x0C61)
  GL_TEXTURE_GEN_R*: GLenum = GLenum(0x0C62)
  GL_TEXTURE_GEN_Q*: GLenum = GLenum(0x0C63)
  GL_PIXEL_MAP_I_TO_I_SIZE*: GLenum = GLenum(0x0CB0)
  GL_PIXEL_MAP_S_TO_S_SIZE*: GLenum = GLenum(0x0CB1)
  GL_PIXEL_MAP_I_TO_R_SIZE*: GLenum = GLenum(0x0CB2)
  GL_PIXEL_MAP_I_TO_G_SIZE*: GLenum = GLenum(0x0CB3)
  GL_PIXEL_MAP_I_TO_B_SIZE*: GLenum = GLenum(0x0CB4)
  GL_PIXEL_MAP_I_TO_A_SIZE*: GLenum = GLenum(0x0CB5)
  GL_PIXEL_MAP_R_TO_R_SIZE*: GLenum = GLenum(0x0CB6)
  GL_PIXEL_MAP_G_TO_G_SIZE*: GLenum = GLenum(0x0CB7)
  GL_PIXEL_MAP_B_TO_B_SIZE*: GLenum = GLenum(0x0CB8)
  GL_PIXEL_MAP_A_TO_A_SIZE*: GLenum = GLenum(0x0CB9)
  GL_MAP_COLOR*: GLenum = GLenum(0x0D10)
  GL_MAP_STENCIL*: GLenum = GLenum(0x0D11)
  GL_INDEX_SHIFT*: GLenum = GLenum(0x0D12)
  GL_INDEX_OFFSET*: GLenum = GLenum(0x0D13)
  GL_RED_SCALE*: GLenum = GLenum(0x0D14)
  GL_RED_BIAS*: GLenum = GLenum(0x0D15)
  GL_ZOOM_X*: GLenum = GLenum(0x0D16)
  GL_ZOOM_Y*: GLenum = GLenum(0x0D17)
  GL_GREEN_SCALE*: GLenum = GLenum(0x0D18)
  GL_GREEN_BIAS*: GLenum = GLenum(0x0D19)
  GL_BLUE_SCALE*: GLenum = GLenum(0x0D1A)
  GL_BLUE_BIAS*: GLenum = GLenum(0x0D1B)
  GL_ALPHA_SCALE*: GLenum = GLenum(0x0D1C)
  GL_ALPHA_BIAS*: GLenum = GLenum(0x0D1D)
  GL_DEPTH_SCALE*: GLenum = GLenum(0x0D1E)
  GL_DEPTH_BIAS*: GLenum = GLenum(0x0D1F)
  GL_MAX_EVAL_ORDER*: GLenum = GLenum(0x0D30)
  GL_MAX_LIGHTS*: GLenum = GLenum(0x0D31)
  GL_MAX_CLIP_PLANES*: GLenum = GLenum(0x0D32)
  GL_MAX_PIXEL_MAP_TABLE*: GLenum = GLenum(0x0D34)
  GL_MAX_ATTRIB_STACK_DEPTH*: GLenum = GLenum(0x0D35)
  GL_MAX_MODELVIEW_STACK_DEPTH*: GLenum = GLenum(0x0D36)
  GL_MAX_NAME_STACK_DEPTH*: GLenum = GLenum(0x0D37)
  GL_MAX_PROJECTION_STACK_DEPTH*: GLenum = GLenum(0x0D38)
  GL_MAX_TEXTURE_STACK_DEPTH*: GLenum = GLenum(0x0D39)
  GL_INDEX_BITS*: GLenum = GLenum(0x0D51)
  GL_RED_BITS*: GLenum = GLenum(0x0D52)
  GL_GREEN_BITS*: GLenum = GLenum(0x0D53)
  GL_BLUE_BITS*: GLenum = GLenum(0x0D54)
  GL_ALPHA_BITS*: GLenum = GLenum(0x0D55)
  GL_DEPTH_BITS*: GLenum = GLenum(0x0D56)
  GL_STENCIL_BITS*: GLenum = GLenum(0x0D57)
  GL_ACCUM_RED_BITS*: GLenum = GLenum(0x0D58)
  GL_ACCUM_GREEN_BITS*: GLenum = GLenum(0x0D59)
  GL_ACCUM_BLUE_BITS*: GLenum = GLenum(0x0D5A)
  GL_ACCUM_ALPHA_BITS*: GLenum = GLenum(0x0D5B)
  GL_NAME_STACK_DEPTH*: GLenum = GLenum(0x0D70)
  GL_AUTO_NORMAL*: GLenum = GLenum(0x0D80)
  GL_MAP1_COLOR_4*: GLenum = GLenum(0x0D90)
  GL_MAP1_INDEX*: GLenum = GLenum(0x0D91)
  GL_MAP1_NORMAL*: GLenum = GLenum(0x0D92)
  GL_MAP1_TEXTURE_COORD_1*: GLenum = GLenum(0x0D93)
  GL_MAP1_TEXTURE_COORD_2*: GLenum = GLenum(0x0D94)
  GL_MAP1_TEXTURE_COORD_3*: GLenum = GLenum(0x0D95)
  GL_MAP1_TEXTURE_COORD_4*: GLenum = GLenum(0x0D96)
  GL_MAP1_VERTEX_3*: GLenum = GLenum(0x0D97)
  GL_MAP1_VERTEX_4*: GLenum = GLenum(0x0D98)
  GL_MAP2_COLOR_4*: GLenum = GLenum(0x0DB0)
  GL_MAP2_INDEX*: GLenum = GLenum(0x0DB1)
  GL_MAP2_NORMAL*: GLenum = GLenum(0x0DB2)
  GL_MAP2_TEXTURE_COORD_1*: GLenum = GLenum(0x0DB3)
  GL_MAP2_TEXTURE_COORD_2*: GLenum = GLenum(0x0DB4)
  GL_MAP2_TEXTURE_COORD_3*: GLenum = GLenum(0x0DB5)
  GL_MAP2_TEXTURE_COORD_4*: GLenum = GLenum(0x0DB6)
  GL_MAP2_VERTEX_3*: GLenum = GLenum(0x0DB7)
  GL_MAP2_VERTEX_4*: GLenum = GLenum(0x0DB8)
  GL_MAP1_GRID_DOMAIN*: GLenum = GLenum(0x0DD0)
  GL_MAP1_GRID_SEGMENTS*: GLenum = GLenum(0x0DD1)
  GL_MAP2_GRID_DOMAIN*: GLenum = GLenum(0x0DD2)
  GL_MAP2_GRID_SEGMENTS*: GLenum = GLenum(0x0DD3)
  GL_TEXTURE_COMPONENTS*: GLenum = GLenum(0x1003)
  GL_TEXTURE_BORDER*: GLenum = GLenum(0x1005)
  GL_AMBIENT*: GLenum = GLenum(0x1200)
  GL_DIFFUSE*: GLenum = GLenum(0x1201)
  GL_SPECULAR*: GLenum = GLenum(0x1202)
  GL_POSITION*: GLenum = GLenum(0x1203)
  GL_SPOT_DIRECTION*: GLenum = GLenum(0x1204)
  GL_SPOT_EXPONENT*: GLenum = GLenum(0x1205)
  GL_SPOT_CUTOFF*: GLenum = GLenum(0x1206)
  GL_CONSTANT_ATTENUATION*: GLenum = GLenum(0x1207)
  GL_LINEAR_ATTENUATION*: GLenum = GLenum(0x1208)
  GL_QUADRATIC_ATTENUATION*: GLenum = GLenum(0x1209)
  GL_COMPILE*: GLenum = GLenum(0x1300)
  GL_COMPILE_AND_EXECUTE*: GLenum = GLenum(0x1301)
  GL_2_BYTES*: GLenum = GLenum(0x1407)
  GL_3_BYTES*: GLenum = GLenum(0x1408)
  GL_4_BYTES*: GLenum = GLenum(0x1409)
  GL_EMISSION*: GLenum = GLenum(0x1600)
  GL_SHININESS*: GLenum = GLenum(0x1601)
  GL_AMBIENT_AND_DIFFUSE*: GLenum = GLenum(0x1602)
  GL_COLOR_INDEXES*: GLenum = GLenum(0x1603)
  GL_MODELVIEW*: GLenum = GLenum(0x1700)
  GL_PROJECTION*: GLenum = GLenum(0x1701)
  GL_COLOR_INDEX*: GLenum = GLenum(0x1900)
  GL_LUMINANCE*: GLenum = GLenum(0x1909)
  GL_LUMINANCE_ALPHA*: GLenum = GLenum(0x190A)
  GL_BITMAP*: GLenum = GLenum(0x1A00)
  GL_RENDER*: GLenum = GLenum(0x1C00)
  GL_FEEDBACK*: GLenum = GLenum(0x1C01)
  GL_SELECT*: GLenum = GLenum(0x1C02)
  GL_FLAT*: GLenum = GLenum(0x1D00)
  GL_SMOOTH*: GLenum = GLenum(0x1D01)
  GL_S*: GLenum = GLenum(0x2000)
  GL_T*: GLenum = GLenum(0x2001)
  GL_R*: GLenum = GLenum(0x2002)
  GL_Q*: GLenum = GLenum(0x2003)
  GL_MODULATE*: GLenum = GLenum(0x2100)
  GL_DECAL*: GLenum = GLenum(0x2101)
  GL_TEXTURE_ENV_MODE*: GLenum = GLenum(0x2200)
  GL_TEXTURE_ENV_COLOR*: GLenum = GLenum(0x2201)
  GL_TEXTURE_ENV*: GLenum = GLenum(0x2300)
  GL_EYE_LINEAR*: GLenum = GLenum(0x2400)
  GL_OBJECT_LINEAR*: GLenum = GLenum(0x2401)
  GL_SPHERE_MAP*: GLenum = GLenum(0x2402)
  GL_TEXTURE_GEN_MODE*: GLenum = GLenum(0x2500)
  GL_OBJECT_PLANE*: GLenum = GLenum(0x2501)
  GL_EYE_PLANE*: GLenum = GLenum(0x2502)
  GL_CLAMP*: GLenum = GLenum(0x2900)
  GL_CLIP_PLANE0*: GLenum = GLenum(0x3000)
  GL_CLIP_PLANE1*: GLenum = GLenum(0x3001)
  GL_CLIP_PLANE2*: GLenum = GLenum(0x3002)
  GL_CLIP_PLANE3*: GLenum = GLenum(0x3003)
  GL_CLIP_PLANE4*: GLenum = GLenum(0x3004)
  GL_CLIP_PLANE5*: GLenum = GLenum(0x3005)
  GL_LIGHT0*: GLenum = GLenum(0x4000)
  GL_LIGHT1*: GLenum = GLenum(0x4001)
  GL_LIGHT2*: GLenum = GLenum(0x4002)
  GL_LIGHT3*: GLenum = GLenum(0x4003)
  GL_LIGHT4*: GLenum = GLenum(0x4004)
  GL_LIGHT5*: GLenum = GLenum(0x4005)
  GL_LIGHT6*: GLenum = GLenum(0x4006)
  GL_LIGHT7*: GLenum = GLenum(0x4007)
  GL_COLOR_LOGIC_OP*: GLenum = GLenum(0x0BF2)
  GL_POLYGON_OFFSET_UNITS*: GLenum = GLenum(0x2A00)
  GL_POLYGON_OFFSET_POINT*: GLenum = GLenum(0x2A01)
  GL_POLYGON_OFFSET_LINE*: GLenum = GLenum(0x2A02)
  GL_POLYGON_OFFSET_FILL*: GLenum = GLenum(0x8037)
  GL_POLYGON_OFFSET_FACTOR*: GLenum = GLenum(0x8038)
  GL_TEXTURE_BINDING_1D*: GLenum = GLenum(0x8068)
  GL_TEXTURE_BINDING_2D*: GLenum = GLenum(0x8069)
  GL_TEXTURE_INTERNAL_FORMAT*: GLenum = GLenum(0x1003)
  GL_TEXTURE_RED_SIZE*: GLenum = GLenum(0x805C)
  GL_TEXTURE_GREEN_SIZE*: GLenum = GLenum(0x805D)
  GL_TEXTURE_BLUE_SIZE*: GLenum = GLenum(0x805E)
  GL_TEXTURE_ALPHA_SIZE*: GLenum = GLenum(0x805F)
  cGL_DOUBLE*: GLenum = GLenum(0x140A)
  GL_PROXY_TEXTURE_1D*: GLenum = GLenum(0x8063)
  GL_PROXY_TEXTURE_2D*: GLenum = GLenum(0x8064)
  GL_R3_G3_B2*: GLenum = GLenum(0x2A10)
  GL_RGB4*: GLenum = GLenum(0x804F)
  GL_RGB5*: GLenum = GLenum(0x8050)
  GL_RGB8*: GLenum = GLenum(0x8051)
  GL_RGB10*: GLenum = GLenum(0x8052)
  GL_RGB12*: GLenum = GLenum(0x8053)
  GL_RGB16*: GLenum = GLenum(0x8054)
  GL_RGBA2*: GLenum = GLenum(0x8055)
  GL_RGBA4*: GLenum = GLenum(0x8056)
  GL_RGB5_A1*: GLenum = GLenum(0x8057)
  GL_RGBA8*: GLenum = GLenum(0x8058)
  GL_RGB10_A2*: GLenum = GLenum(0x8059)
  GL_RGBA12*: GLenum = GLenum(0x805A)
  GL_RGBA16*: GLenum = GLenum(0x805B)
  GL_CLIENT_PIXEL_STORE_BIT*: GLenum = GLenum(0x00000001)
  GL_CLIENT_VERTEX_ARRAY_BIT*: GLenum = GLenum(0x00000002)
  GL_CLIENT_ALL_ATTRIB_BITS*: GLenum = GLenum(0xFFFFFFFF)
  GL_VERTEX_ARRAY_POINTER*: GLenum = GLenum(0x808E)
  GL_NORMAL_ARRAY_POINTER*: GLenum = GLenum(0x808F)
  GL_COLOR_ARRAY_POINTER*: GLenum = GLenum(0x8090)
  GL_INDEX_ARRAY_POINTER*: GLenum = GLenum(0x8091)
  GL_TEXTURE_COORD_ARRAY_POINTER*: GLenum = GLenum(0x8092)
  GL_EDGE_FLAG_ARRAY_POINTER*: GLenum = GLenum(0x8093)
  GL_FEEDBACK_BUFFER_POINTER*: GLenum = GLenum(0x0DF0)
  GL_SELECTION_BUFFER_POINTER*: GLenum = GLenum(0x0DF3)
  GL_CLIENT_ATTRIB_STACK_DEPTH*: GLenum = GLenum(0x0BB1)
  GL_INDEX_LOGIC_OP*: GLenum = GLenum(0x0BF1)
  GL_MAX_CLIENT_ATTRIB_STACK_DEPTH*: GLenum = GLenum(0x0D3B)
  GL_FEEDBACK_BUFFER_SIZE*: GLenum = GLenum(0x0DF1)
  GL_FEEDBACK_BUFFER_TYPE*: GLenum = GLenum(0x0DF2)
  GL_SELECTION_BUFFER_SIZE*: GLenum = GLenum(0x0DF4)
  GL_VERTEX_ARRAY*: GLenum = GLenum(0x8074)
  GL_NORMAL_ARRAY*: GLenum = GLenum(0x8075)
  GL_COLOR_ARRAY*: GLenum = GLenum(0x8076)
  GL_INDEX_ARRAY*: GLenum = GLenum(0x8077)
  GL_TEXTURE_COORD_ARRAY*: GLenum = GLenum(0x8078)
  GL_EDGE_FLAG_ARRAY*: GLenum = GLenum(0x8079)
  GL_VERTEX_ARRAY_SIZE*: GLenum = GLenum(0x807A)
  GL_VERTEX_ARRAY_TYPE*: GLenum = GLenum(0x807B)
  GL_VERTEX_ARRAY_STRIDE*: GLenum = GLenum(0x807C)
  GL_NORMAL_ARRAY_TYPE*: GLenum = GLenum(0x807E)
  GL_NORMAL_ARRAY_STRIDE*: GLenum = GLenum(0x807F)
  GL_COLOR_ARRAY_SIZE*: GLenum = GLenum(0x8081)
  GL_COLOR_ARRAY_TYPE*: GLenum = GLenum(0x8082)
  GL_COLOR_ARRAY_STRIDE*: GLenum = GLenum(0x8083)
  GL_INDEX_ARRAY_TYPE*: GLenum = GLenum(0x8085)
  GL_INDEX_ARRAY_STRIDE*: GLenum = GLenum(0x8086)
  GL_TEXTURE_COORD_ARRAY_SIZE*: GLenum = GLenum(0x8088)
  GL_TEXTURE_COORD_ARRAY_TYPE*: GLenum = GLenum(0x8089)
  GL_TEXTURE_COORD_ARRAY_STRIDE*: GLenum = GLenum(0x808A)
  GL_EDGE_FLAG_ARRAY_STRIDE*: GLenum = GLenum(0x808C)
  GL_TEXTURE_LUMINANCE_SIZE*: GLenum = GLenum(0x8060)
  GL_TEXTURE_INTENSITY_SIZE*: GLenum = GLenum(0x8061)
  GL_TEXTURE_PRIORITY*: GLenum = GLenum(0x8066)
  GL_TEXTURE_RESIDENT*: GLenum = GLenum(0x8067)
  GL_ALPHA4*: GLenum = GLenum(0x803B)
  GL_ALPHA8*: GLenum = GLenum(0x803C)
  GL_ALPHA12*: GLenum = GLenum(0x803D)
  GL_ALPHA16*: GLenum = GLenum(0x803E)
  GL_LUMINANCE4*: GLenum = GLenum(0x803F)
  GL_LUMINANCE8*: GLenum = GLenum(0x8040)
  GL_LUMINANCE12*: GLenum = GLenum(0x8041)
  GL_LUMINANCE16*: GLenum = GLenum(0x8042)
  GL_LUMINANCE4_ALPHA4*: GLenum = GLenum(0x8043)
  GL_LUMINANCE6_ALPHA2*: GLenum = GLenum(0x8044)
  GL_LUMINANCE8_ALPHA8*: GLenum = GLenum(0x8045)
  GL_LUMINANCE12_ALPHA4*: GLenum = GLenum(0x8046)
  GL_LUMINANCE12_ALPHA12*: GLenum = GLenum(0x8047)
  GL_LUMINANCE16_ALPHA16*: GLenum = GLenum(0x8048)
  GL_INTENSITY*: GLenum = GLenum(0x8049)
  GL_INTENSITY4*: GLenum = GLenum(0x804A)
  GL_INTENSITY8*: GLenum = GLenum(0x804B)
  GL_INTENSITY12*: GLenum = GLenum(0x804C)
  GL_INTENSITY16*: GLenum = GLenum(0x804D)
  GL_V2F*: GLenum = GLenum(0x2A20)
  GL_V3F*: GLenum = GLenum(0x2A21)
  GL_C4UB_V2F*: GLenum = GLenum(0x2A22)
  GL_C4UB_V3F*: GLenum = GLenum(0x2A23)
  GL_C3F_V3F*: GLenum = GLenum(0x2A24)
  GL_N3F_V3F*: GLenum = GLenum(0x2A25)
  GL_C4F_N3F_V3F*: GLenum = GLenum(0x2A26)
  GL_T2F_V3F*: GLenum = GLenum(0x2A27)
  GL_T4F_V4F*: GLenum = GLenum(0x2A28)
  GL_T2F_C4UB_V3F*: GLenum = GLenum(0x2A29)
  GL_T2F_C3F_V3F*: GLenum = GLenum(0x2A2A)
  GL_T2F_N3F_V3F*: GLenum = GLenum(0x2A2B)
  GL_T2F_C4F_N3F_V3F*: GLenum = GLenum(0x2A2C)
  GL_T4F_C4F_N3F_V4F*: GLenum = GLenum(0x2A2D)
  GL_UNSIGNED_BYTE_3_3_2*: GLenum = GLenum(0x8032)
  GL_UNSIGNED_SHORT_4_4_4_4*: GLenum = GLenum(0x8033)
  GL_UNSIGNED_SHORT_5_5_5_1*: GLenum = GLenum(0x8034)
  GL_UNSIGNED_INT_8_8_8_8*: GLenum = GLenum(0x8035)
  GL_UNSIGNED_INT_10_10_10_2*: GLenum = GLenum(0x8036)
  GL_TEXTURE_BINDING_3D*: GLenum = GLenum(0x806A)
  GL_PACK_SKIP_IMAGES*: GLenum = GLenum(0x806B)
  GL_PACK_IMAGE_HEIGHT*: GLenum = GLenum(0x806C)
  GL_UNPACK_SKIP_IMAGES*: GLenum = GLenum(0x806D)
  GL_UNPACK_IMAGE_HEIGHT*: GLenum = GLenum(0x806E)
  GL_TEXTURE_3D*: GLenum = GLenum(0x806F)
  GL_PROXY_TEXTURE_3D*: GLenum = GLenum(0x8070)
  GL_TEXTURE_DEPTH*: GLenum = GLenum(0x8071)
  GL_TEXTURE_WRAP_R*: GLenum = GLenum(0x8072)
  GL_MAX_3D_TEXTURE_SIZE*: GLenum = GLenum(0x8073)
  GL_UNSIGNED_BYTE_2_3_3_REV*: GLenum = GLenum(0x8362)
  GL_UNSIGNED_SHORT_5_6_5*: GLenum = GLenum(0x8363)
  GL_UNSIGNED_SHORT_5_6_5_REV*: GLenum = GLenum(0x8364)
  GL_UNSIGNED_SHORT_4_4_4_4_REV*: GLenum = GLenum(0x8365)
  GL_UNSIGNED_SHORT_1_5_5_5_REV*: GLenum = GLenum(0x8366)
  GL_UNSIGNED_INT_8_8_8_8_REV*: GLenum = GLenum(0x8367)
  GL_UNSIGNED_INT_2_10_10_10_REV*: GLenum = GLenum(0x8368)
  GL_BGR*: GLenum = GLenum(0x80E0)
  GL_BGRA*: GLenum = GLenum(0x80E1)
  GL_MAX_ELEMENTS_VERTICES*: GLenum = GLenum(0x80E8)
  GL_MAX_ELEMENTS_INDICES*: GLenum = GLenum(0x80E9)
  GL_CLAMP_TO_EDGE*: GLenum = GLenum(0x812F)
  GL_TEXTURE_MIN_LOD*: GLenum = GLenum(0x813A)
  GL_TEXTURE_MAX_LOD*: GLenum = GLenum(0x813B)
  GL_TEXTURE_BASE_LEVEL*: GLenum = GLenum(0x813C)
  GL_TEXTURE_MAX_LEVEL*: GLenum = GLenum(0x813D)
  GL_SMOOTH_POINT_SIZE_RANGE*: GLenum = GLenum(0x0B12)
  GL_SMOOTH_POINT_SIZE_GRANULARITY*: GLenum = GLenum(0x0B13)
  GL_SMOOTH_LINE_WIDTH_RANGE*: GLenum = GLenum(0x0B22)
  GL_SMOOTH_LINE_WIDTH_GRANULARITY*: GLenum = GLenum(0x0B23)
  GL_ALIASED_LINE_WIDTH_RANGE*: GLenum = GLenum(0x846E)
  GL_RESCALE_NORMAL*: GLenum = GLenum(0x803A)
  GL_LIGHT_MODEL_COLOR_CONTROL*: GLenum = GLenum(0x81F8)
  GL_SINGLE_COLOR*: GLenum = GLenum(0x81F9)
  GL_SEPARATE_SPECULAR_COLOR*: GLenum = GLenum(0x81FA)
  GL_ALIASED_POINT_SIZE_RANGE*: GLenum = GLenum(0x846D)
  GL_TEXTURE0*: GLenum = GLenum(0x84C0)
  GL_TEXTURE1*: GLenum = GLenum(0x84C1)
  GL_TEXTURE2*: GLenum = GLenum(0x84C2)
  GL_TEXTURE3*: GLenum = GLenum(0x84C3)
  GL_TEXTURE4*: GLenum = GLenum(0x84C4)
  GL_TEXTURE5*: GLenum = GLenum(0x84C5)
  GL_TEXTURE6*: GLenum = GLenum(0x84C6)
  GL_TEXTURE7*: GLenum = GLenum(0x84C7)
  GL_TEXTURE8*: GLenum = GLenum(0x84C8)
  GL_TEXTURE9*: GLenum = GLenum(0x84C9)
  GL_TEXTURE10*: GLenum = GLenum(0x84CA)
  GL_TEXTURE11*: GLenum = GLenum(0x84CB)
  GL_TEXTURE12*: GLenum = GLenum(0x84CC)
  GL_TEXTURE13*: GLenum = GLenum(0x84CD)
  GL_TEXTURE14*: GLenum = GLenum(0x84CE)
  GL_TEXTURE15*: GLenum = GLenum(0x84CF)
  GL_TEXTURE16*: GLenum = GLenum(0x84D0)
  GL_TEXTURE17*: GLenum = GLenum(0x84D1)
  GL_TEXTURE18*: GLenum = GLenum(0x84D2)
  GL_TEXTURE19*: GLenum = GLenum(0x84D3)
  GL_TEXTURE20*: GLenum = GLenum(0x84D4)
  GL_TEXTURE21*: GLenum = GLenum(0x84D5)
  GL_TEXTURE22*: GLenum = GLenum(0x84D6)
  GL_TEXTURE23*: GLenum = GLenum(0x84D7)
  GL_TEXTURE24*: GLenum = GLenum(0x84D8)
  GL_TEXTURE25*: GLenum = GLenum(0x84D9)
  GL_TEXTURE26*: GLenum = GLenum(0x84DA)
  GL_TEXTURE27*: GLenum = GLenum(0x84DB)
  GL_TEXTURE28*: GLenum = GLenum(0x84DC)
  GL_TEXTURE29*: GLenum = GLenum(0x84DD)
  GL_TEXTURE30*: GLenum = GLenum(0x84DE)
  GL_TEXTURE31*: GLenum = GLenum(0x84DF)
  GL_ACTIVE_TEXTURE*: GLenum = GLenum(0x84E0)
  GL_MULTISAMPLE*: GLenum = GLenum(0x809D)
  GL_SAMPLE_ALPHA_TO_COVERAGE*: GLenum = GLenum(0x809E)
  GL_SAMPLE_ALPHA_TO_ONE*: GLenum = GLenum(0x809F)
  GL_SAMPLE_COVERAGE*: GLenum = GLenum(0x80A0)
  GL_SAMPLE_BUFFERS*: GLenum = GLenum(0x80A8)
  GL_SAMPLES*: GLenum = GLenum(0x80A9)
  GL_SAMPLE_COVERAGE_VALUE*: GLenum = GLenum(0x80AA)
  GL_SAMPLE_COVERAGE_INVERT*: GLenum = GLenum(0x80AB)
  GL_TEXTURE_CUBE_MAP*: GLenum = GLenum(0x8513)
  GL_TEXTURE_BINDING_CUBE_MAP*: GLenum = GLenum(0x8514)
  GL_TEXTURE_CUBE_MAP_POSITIVE_X*: GLenum = GLenum(0x8515)
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X*: GLenum = GLenum(0x8516)
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y*: GLenum = GLenum(0x8517)
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y*: GLenum = GLenum(0x8518)
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z*: GLenum = GLenum(0x8519)
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z*: GLenum = GLenum(0x851A)
  GL_PROXY_TEXTURE_CUBE_MAP*: GLenum = GLenum(0x851B)
  GL_MAX_CUBE_MAP_TEXTURE_SIZE*: GLenum = GLenum(0x851C)
  GL_COMPRESSED_RGB*: GLenum = GLenum(0x84ED)
  GL_COMPRESSED_RGBA*: GLenum = GLenum(0x84EE)
  GL_TEXTURE_COMPRESSION_HINT*: GLenum = GLenum(0x84EF)
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE*: GLenum = GLenum(0x86A0)
  GL_TEXTURE_COMPRESSED*: GLenum = GLenum(0x86A1)
  GL_NUM_COMPRESSED_TEXTURE_FORMATS*: GLenum = GLenum(0x86A2)
  GL_COMPRESSED_TEXTURE_FORMATS*: GLenum = GLenum(0x86A3)
  GL_CLAMP_TO_BORDER*: GLenum = GLenum(0x812D)
  GL_CLIENT_ACTIVE_TEXTURE*: GLenum = GLenum(0x84E1)
  GL_MAX_TEXTURE_UNITS*: GLenum = GLenum(0x84E2)
  GL_TRANSPOSE_MODELVIEW_MATRIX*: GLenum = GLenum(0x84E3)
  GL_TRANSPOSE_PROJECTION_MATRIX*: GLenum = GLenum(0x84E4)
  GL_TRANSPOSE_TEXTURE_MATRIX*: GLenum = GLenum(0x84E5)
  GL_TRANSPOSE_COLOR_MATRIX*: GLenum = GLenum(0x84E6)
  GL_MULTISAMPLE_BIT*: GLenum = GLenum(0x20000000)
  GL_NORMAL_MAP*: GLenum = GLenum(0x8511)
  GL_REFLECTION_MAP*: GLenum = GLenum(0x8512)
  GL_COMPRESSED_ALPHA*: GLenum = GLenum(0x84E9)
  GL_COMPRESSED_LUMINANCE*: GLenum = GLenum(0x84EA)
  GL_COMPRESSED_LUMINANCE_ALPHA*: GLenum = GLenum(0x84EB)
  GL_COMPRESSED_INTENSITY*: GLenum = GLenum(0x84EC)
  GL_COMBINE*: GLenum = GLenum(0x8570)
  GL_COMBINE_RGB*: GLenum = GLenum(0x8571)
  GL_COMBINE_ALPHA*: GLenum = GLenum(0x8572)
  GL_SOURCE0_RGB*: GLenum = GLenum(0x8580)
  GL_SOURCE1_RGB*: GLenum = GLenum(0x8581)
  GL_SOURCE2_RGB*: GLenum = GLenum(0x8582)
  GL_SOURCE0_ALPHA*: GLenum = GLenum(0x8588)
  GL_SOURCE1_ALPHA*: GLenum = GLenum(0x8589)
  GL_SOURCE2_ALPHA*: GLenum = GLenum(0x858A)
  GL_OPERAND0_RGB*: GLenum = GLenum(0x8590)
  GL_OPERAND1_RGB*: GLenum = GLenum(0x8591)
  GL_OPERAND2_RGB*: GLenum = GLenum(0x8592)
  GL_OPERAND0_ALPHA*: GLenum = GLenum(0x8598)
  GL_OPERAND1_ALPHA*: GLenum = GLenum(0x8599)
  GL_OPERAND2_ALPHA*: GLenum = GLenum(0x859A)
  GL_RGB_SCALE*: GLenum = GLenum(0x8573)
  GL_ADD_SIGNED*: GLenum = GLenum(0x8574)
  GL_INTERPOLATE*: GLenum = GLenum(0x8575)
  GL_SUBTRACT*: GLenum = GLenum(0x84E7)
  GL_CONSTANT*: GLenum = GLenum(0x8576)
  GL_PRIMARY_COLOR*: GLenum = GLenum(0x8577)
  GL_PREVIOUS*: GLenum = GLenum(0x8578)
  GL_DOT3_RGB*: GLenum = GLenum(0x86AE)
  GL_DOT3_RGBA*: GLenum = GLenum(0x86AF)
  GL_BLEND_DST_RGB*: GLenum = GLenum(0x80C8)
  GL_BLEND_SRC_RGB*: GLenum = GLenum(0x80C9)
  GL_BLEND_DST_ALPHA*: GLenum = GLenum(0x80CA)
  GL_BLEND_SRC_ALPHA*: GLenum = GLenum(0x80CB)
  GL_POINT_FADE_THRESHOLD_SIZE*: GLenum = GLenum(0x8128)
  GL_DEPTH_COMPONENT16*: GLenum = GLenum(0x81A5)
  GL_DEPTH_COMPONENT24*: GLenum = GLenum(0x81A6)
  GL_DEPTH_COMPONENT32*: GLenum = GLenum(0x81A7)
  GL_MIRRORED_REPEAT*: GLenum = GLenum(0x8370)
  GL_MAX_TEXTURE_LOD_BIAS*: GLenum = GLenum(0x84FD)
  GL_TEXTURE_LOD_BIAS*: GLenum = GLenum(0x8501)
  GL_INCR_WRAP*: GLenum = GLenum(0x8507)
  GL_DECR_WRAP*: GLenum = GLenum(0x8508)
  GL_TEXTURE_DEPTH_SIZE*: GLenum = GLenum(0x884A)
  GL_TEXTURE_COMPARE_MODE*: GLenum = GLenum(0x884C)
  GL_TEXTURE_COMPARE_FUNC*: GLenum = GLenum(0x884D)
  GL_POINT_SIZE_MIN*: GLenum = GLenum(0x8126)
  GL_POINT_SIZE_MAX*: GLenum = GLenum(0x8127)
  GL_POINT_DISTANCE_ATTENUATION*: GLenum = GLenum(0x8129)
  GL_GENERATE_MIPMAP*: GLenum = GLenum(0x8191)
  GL_GENERATE_MIPMAP_HINT*: GLenum = GLenum(0x8192)
  GL_FOG_COORDINATE_SOURCE*: GLenum = GLenum(0x8450)
  GL_FOG_COORDINATE*: GLenum = GLenum(0x8451)
  GL_FRAGMENT_DEPTH*: GLenum = GLenum(0x8452)
  GL_CURRENT_FOG_COORDINATE*: GLenum = GLenum(0x8453)
  GL_FOG_COORDINATE_ARRAY_TYPE*: GLenum = GLenum(0x8454)
  GL_FOG_COORDINATE_ARRAY_STRIDE*: GLenum = GLenum(0x8455)
  GL_FOG_COORDINATE_ARRAY_POINTER*: GLenum = GLenum(0x8456)
  GL_FOG_COORDINATE_ARRAY*: GLenum = GLenum(0x8457)
  GL_COLOR_SUM*: GLenum = GLenum(0x8458)
  GL_CURRENT_SECONDARY_COLOR*: GLenum = GLenum(0x8459)
  GL_SECONDARY_COLOR_ARRAY_SIZE*: GLenum = GLenum(0x845A)
  GL_SECONDARY_COLOR_ARRAY_TYPE*: GLenum = GLenum(0x845B)
  GL_SECONDARY_COLOR_ARRAY_STRIDE*: GLenum = GLenum(0x845C)
  GL_SECONDARY_COLOR_ARRAY_POINTER*: GLenum = GLenum(0x845D)
  GL_SECONDARY_COLOR_ARRAY*: GLenum = GLenum(0x845E)
  GL_TEXTURE_FILTER_CONTROL*: GLenum = GLenum(0x8500)
  GL_DEPTH_TEXTURE_MODE*: GLenum = GLenum(0x884B)
  GL_COMPARE_R_TO_TEXTURE*: GLenum = GLenum(0x884E)
  GL_BLEND_COLOR*: GLenum = GLenum(0x8005)
  GL_BLEND_EQUATION*: GLenum = GLenum(0x8009)
  GL_CONSTANT_COLOR*: GLenum = GLenum(0x8001)
  GL_ONE_MINUS_CONSTANT_COLOR*: GLenum = GLenum(0x8002)
  GL_CONSTANT_ALPHA*: GLenum = GLenum(0x8003)
  GL_ONE_MINUS_CONSTANT_ALPHA*: GLenum = GLenum(0x8004)
  GL_FUNC_ADD*: GLenum = GLenum(0x8006)
  GL_FUNC_REVERSE_SUBTRACT*: GLenum = GLenum(0x800B)
  GL_FUNC_SUBTRACT*: GLenum = GLenum(0x800A)
  GL_MIN*: GLenum = GLenum(0x8007)
  GL_MAX*: GLenum = GLenum(0x8008)
  GL_BUFFER_SIZE*: GLenum = GLenum(0x8764)
  GL_BUFFER_USAGE*: GLenum = GLenum(0x8765)
  GL_QUERY_COUNTER_BITS*: GLenum = GLenum(0x8864)
  GL_CURRENT_QUERY*: GLenum = GLenum(0x8865)
  GL_QUERY_RESULT*: GLenum = GLenum(0x8866)
  GL_QUERY_RESULT_AVAILABLE*: GLenum = GLenum(0x8867)
  GL_ARRAY_BUFFER*: GLenum = GLenum(0x8892)
  GL_ELEMENT_ARRAY_BUFFER*: GLenum = GLenum(0x8893)
  GL_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x8894)
  GL_ELEMENT_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x8895)
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x889F)
  GL_READ_ONLY*: GLenum = GLenum(0x88B8)
  GL_WRITE_ONLY*: GLenum = GLenum(0x88B9)
  GL_READ_WRITE*: GLenum = GLenum(0x88BA)
  GL_BUFFER_ACCESS*: GLenum = GLenum(0x88BB)
  GL_BUFFER_MAPPED*: GLenum = GLenum(0x88BC)
  GL_BUFFER_MAP_POINTER*: GLenum = GLenum(0x88BD)
  GL_STREAM_DRAW*: GLenum = GLenum(0x88E0)
  GL_STREAM_READ*: GLenum = GLenum(0x88E1)
  GL_STREAM_COPY*: GLenum = GLenum(0x88E2)
  GL_STATIC_DRAW*: GLenum = GLenum(0x88E4)
  GL_STATIC_READ*: GLenum = GLenum(0x88E5)
  GL_STATIC_COPY*: GLenum = GLenum(0x88E6)
  GL_DYNAMIC_DRAW*: GLenum = GLenum(0x88E8)
  GL_DYNAMIC_READ*: GLenum = GLenum(0x88E9)
  GL_DYNAMIC_COPY*: GLenum = GLenum(0x88EA)
  GL_SAMPLES_PASSED*: GLenum = GLenum(0x8914)
  GL_SRC1_ALPHA*: GLenum = GLenum(0x8589)
  GL_VERTEX_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x8896)
  GL_NORMAL_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x8897)
  GL_COLOR_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x8898)
  GL_INDEX_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x8899)
  GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x889A)
  GL_EDGE_FLAG_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x889B)
  GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x889C)
  GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x889D)
  GL_WEIGHT_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x889E)
  GL_FOG_COORD_SRC*: GLenum = GLenum(0x8450)
  GL_FOG_COORD*: GLenum = GLenum(0x8451)
  GL_CURRENT_FOG_COORD*: GLenum = GLenum(0x8453)
  GL_FOG_COORD_ARRAY_TYPE*: GLenum = GLenum(0x8454)
  GL_FOG_COORD_ARRAY_STRIDE*: GLenum = GLenum(0x8455)
  GL_FOG_COORD_ARRAY_POINTER*: GLenum = GLenum(0x8456)
  GL_FOG_COORD_ARRAY*: GLenum = GLenum(0x8457)
  GL_FOG_COORD_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x889D)
  GL_SRC0_RGB*: GLenum = GLenum(0x8580)
  GL_SRC1_RGB*: GLenum = GLenum(0x8581)
  GL_SRC2_RGB*: GLenum = GLenum(0x8582)
  GL_SRC0_ALPHA*: GLenum = GLenum(0x8588)
  GL_SRC2_ALPHA*: GLenum = GLenum(0x858A)
  GL_BLEND_EQUATION_RGB*: GLenum = GLenum(0x8009)
  GL_VERTEX_ATTRIB_ARRAY_ENABLED*: GLenum = GLenum(0x8622)
  GL_VERTEX_ATTRIB_ARRAY_SIZE*: GLenum = GLenum(0x8623)
  GL_VERTEX_ATTRIB_ARRAY_STRIDE*: GLenum = GLenum(0x8624)
  GL_VERTEX_ATTRIB_ARRAY_TYPE*: GLenum = GLenum(0x8625)
  GL_CURRENT_VERTEX_ATTRIB*: GLenum = GLenum(0x8626)
  GL_VERTEX_PROGRAM_POINT_SIZE*: GLenum = GLenum(0x8642)
  GL_VERTEX_ATTRIB_ARRAY_POINTER*: GLenum = GLenum(0x8645)
  GL_STENCIL_BACK_FUNC*: GLenum = GLenum(0x8800)
  GL_STENCIL_BACK_FAIL*: GLenum = GLenum(0x8801)
  GL_STENCIL_BACK_PASS_DEPTH_FAIL*: GLenum = GLenum(0x8802)
  GL_STENCIL_BACK_PASS_DEPTH_PASS*: GLenum = GLenum(0x8803)
  GL_MAX_DRAW_BUFFERS*: GLenum = GLenum(0x8824)
  GL_DRAW_BUFFER0*: GLenum = GLenum(0x8825)
  GL_DRAW_BUFFER1*: GLenum = GLenum(0x8826)
  GL_DRAW_BUFFER2*: GLenum = GLenum(0x8827)
  GL_DRAW_BUFFER3*: GLenum = GLenum(0x8828)
  GL_DRAW_BUFFER4*: GLenum = GLenum(0x8829)
  GL_DRAW_BUFFER5*: GLenum = GLenum(0x882A)
  GL_DRAW_BUFFER6*: GLenum = GLenum(0x882B)
  GL_DRAW_BUFFER7*: GLenum = GLenum(0x882C)
  GL_DRAW_BUFFER8*: GLenum = GLenum(0x882D)
  GL_DRAW_BUFFER9*: GLenum = GLenum(0x882E)
  GL_DRAW_BUFFER10*: GLenum = GLenum(0x882F)
  GL_DRAW_BUFFER11*: GLenum = GLenum(0x8830)
  GL_DRAW_BUFFER12*: GLenum = GLenum(0x8831)
  GL_DRAW_BUFFER13*: GLenum = GLenum(0x8832)
  GL_DRAW_BUFFER14*: GLenum = GLenum(0x8833)
  GL_DRAW_BUFFER15*: GLenum = GLenum(0x8834)
  GL_BLEND_EQUATION_ALPHA*: GLenum = GLenum(0x883D)
  GL_MAX_VERTEX_ATTRIBS*: GLenum = GLenum(0x8869)
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED*: GLenum = GLenum(0x886A)
  GL_MAX_TEXTURE_IMAGE_UNITS*: GLenum = GLenum(0x8872)
  GL_FRAGMENT_SHADER*: GLenum = GLenum(0x8B30)
  GL_VERTEX_SHADER*: GLenum = GLenum(0x8B31)
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8B49)
  GL_MAX_VERTEX_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8B4A)
  GL_MAX_VARYING_FLOATS*: GLenum = GLenum(0x8B4B)
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS*: GLenum = GLenum(0x8B4C)
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS*: GLenum = GLenum(0x8B4D)
  GL_SHADER_TYPE*: GLenum = GLenum(0x8B4F)
  GL_FLOAT_VEC2*: GLenum = GLenum(0x8B50)
  GL_FLOAT_VEC3*: GLenum = GLenum(0x8B51)
  GL_FLOAT_VEC4*: GLenum = GLenum(0x8B52)
  GL_INT_VEC2*: GLenum = GLenum(0x8B53)
  GL_INT_VEC3*: GLenum = GLenum(0x8B54)
  GL_INT_VEC4*: GLenum = GLenum(0x8B55)
  GL_BOOL*: GLenum = GLenum(0x8B56)
  GL_BOOL_VEC2*: GLenum = GLenum(0x8B57)
  GL_BOOL_VEC3*: GLenum = GLenum(0x8B58)
  GL_BOOL_VEC4*: GLenum = GLenum(0x8B59)
  GL_FLOAT_MAT2*: GLenum = GLenum(0x8B5A)
  GL_FLOAT_MAT3*: GLenum = GLenum(0x8B5B)
  GL_FLOAT_MAT4*: GLenum = GLenum(0x8B5C)
  GL_SAMPLER_1D*: GLenum = GLenum(0x8B5D)
  GL_SAMPLER_2D*: GLenum = GLenum(0x8B5E)
  GL_SAMPLER_3D*: GLenum = GLenum(0x8B5F)
  GL_SAMPLER_CUBE*: GLenum = GLenum(0x8B60)
  GL_SAMPLER_1D_SHADOW*: GLenum = GLenum(0x8B61)
  GL_SAMPLER_2D_SHADOW*: GLenum = GLenum(0x8B62)
  GL_DELETE_STATUS*: GLenum = GLenum(0x8B80)
  GL_COMPILE_STATUS*: GLenum = GLenum(0x8B81)
  GL_LINK_STATUS*: GLenum = GLenum(0x8B82)
  GL_VALIDATE_STATUS*: GLenum = GLenum(0x8B83)
  GL_INFO_LOG_LENGTH*: GLenum = GLenum(0x8B84)
  GL_ATTACHED_SHADERS*: GLenum = GLenum(0x8B85)
  GL_ACTIVE_UNIFORMS*: GLenum = GLenum(0x8B86)
  GL_ACTIVE_UNIFORM_MAX_LENGTH*: GLenum = GLenum(0x8B87)
  GL_SHADER_SOURCE_LENGTH*: GLenum = GLenum(0x8B88)
  GL_ACTIVE_ATTRIBUTES*: GLenum = GLenum(0x8B89)
  GL_ACTIVE_ATTRIBUTE_MAX_LENGTH*: GLenum = GLenum(0x8B8A)
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT*: GLenum = GLenum(0x8B8B)
  GL_SHADING_LANGUAGE_VERSION*: GLenum = GLenum(0x8B8C)
  GL_CURRENT_PROGRAM*: GLenum = GLenum(0x8B8D)
  GL_POINT_SPRITE_COORD_ORIGIN*: GLenum = GLenum(0x8CA0)
  GL_LOWER_LEFT*: GLenum = GLenum(0x8CA1)
  GL_UPPER_LEFT*: GLenum = GLenum(0x8CA2)
  GL_STENCIL_BACK_REF*: GLenum = GLenum(0x8CA3)
  GL_STENCIL_BACK_VALUE_MASK*: GLenum = GLenum(0x8CA4)
  GL_STENCIL_BACK_WRITEMASK*: GLenum = GLenum(0x8CA5)
  GL_VERTEX_PROGRAM_TWO_SIDE*: GLenum = GLenum(0x8643)
  GL_POINT_SPRITE*: GLenum = GLenum(0x8861)
  GL_COORD_REPLACE*: GLenum = GLenum(0x8862)
  GL_MAX_TEXTURE_COORDS*: GLenum = GLenum(0x8871)
  GL_PIXEL_PACK_BUFFER*: GLenum = GLenum(0x88EB)
  GL_PIXEL_UNPACK_BUFFER*: GLenum = GLenum(0x88EC)
  GL_PIXEL_PACK_BUFFER_BINDING*: GLenum = GLenum(0x88ED)
  GL_PIXEL_UNPACK_BUFFER_BINDING*: GLenum = GLenum(0x88EF)
  GL_FLOAT_MAT2x3*: GLenum = GLenum(0x8B65)
  GL_FLOAT_MAT2x4*: GLenum = GLenum(0x8B66)
  GL_FLOAT_MAT3x2*: GLenum = GLenum(0x8B67)
  GL_FLOAT_MAT3x4*: GLenum = GLenum(0x8B68)
  GL_FLOAT_MAT4x2*: GLenum = GLenum(0x8B69)
  GL_FLOAT_MAT4x3*: GLenum = GLenum(0x8B6A)
  GL_SRGB*: GLenum = GLenum(0x8C40)
  GL_SRGB8*: GLenum = GLenum(0x8C41)
  GL_SRGB_ALPHA*: GLenum = GLenum(0x8C42)
  GL_SRGB8_ALPHA8*: GLenum = GLenum(0x8C43)
  GL_COMPRESSED_SRGB*: GLenum = GLenum(0x8C48)
  GL_COMPRESSED_SRGB_ALPHA*: GLenum = GLenum(0x8C49)
  GL_CURRENT_RASTER_SECONDARY_COLOR*: GLenum = GLenum(0x845F)
  GL_SLUMINANCE_ALPHA*: GLenum = GLenum(0x8C44)
  GL_SLUMINANCE8_ALPHA8*: GLenum = GLenum(0x8C45)
  GL_SLUMINANCE*: GLenum = GLenum(0x8C46)
  GL_SLUMINANCE8*: GLenum = GLenum(0x8C47)
  GL_COMPRESSED_SLUMINANCE*: GLenum = GLenum(0x8C4A)
  GL_COMPRESSED_SLUMINANCE_ALPHA*: GLenum = GLenum(0x8C4B)
  GL_COMPARE_REF_TO_TEXTURE*: GLenum = GLenum(0x884E)
  GL_CLIP_DISTANCE0*: GLenum = GLenum(0x3000)
  GL_CLIP_DISTANCE1*: GLenum = GLenum(0x3001)
  GL_CLIP_DISTANCE2*: GLenum = GLenum(0x3002)
  GL_CLIP_DISTANCE3*: GLenum = GLenum(0x3003)
  GL_CLIP_DISTANCE4*: GLenum = GLenum(0x3004)
  GL_CLIP_DISTANCE5*: GLenum = GLenum(0x3005)
  GL_CLIP_DISTANCE6*: GLenum = GLenum(0x3006)
  GL_CLIP_DISTANCE7*: GLenum = GLenum(0x3007)
  GL_MAX_CLIP_DISTANCES*: GLenum = GLenum(0x0D32)
  GL_MAJOR_VERSION*: GLenum = GLenum(0x821B)
  GL_MINOR_VERSION*: GLenum = GLenum(0x821C)
  GL_NUM_EXTENSIONS*: GLenum = GLenum(0x821D)
  GL_CONTEXT_FLAGS*: GLenum = GLenum(0x821E)
  GL_COMPRESSED_RED*: GLenum = GLenum(0x8225)
  GL_COMPRESSED_RG*: GLenum = GLenum(0x8226)
  GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT*: GLenum = GLenum(0x00000001)
  GL_RGBA32F*: GLenum = GLenum(0x8814)
  GL_RGB32F*: GLenum = GLenum(0x8815)
  GL_RGBA16F*: GLenum = GLenum(0x881A)
  GL_RGB16F*: GLenum = GLenum(0x881B)
  GL_VERTEX_ATTRIB_ARRAY_INTEGER*: GLenum = GLenum(0x88FD)
  GL_MAX_ARRAY_TEXTURE_LAYERS*: GLenum = GLenum(0x88FF)
  GL_MIN_PROGRAM_TEXEL_OFFSET*: GLenum = GLenum(0x8904)
  GL_MAX_PROGRAM_TEXEL_OFFSET*: GLenum = GLenum(0x8905)
  GL_CLAMP_READ_COLOR*: GLenum = GLenum(0x891C)
  GL_FIXED_ONLY*: GLenum = GLenum(0x891D)
  GL_MAX_VARYING_COMPONENTS*: GLenum = GLenum(0x8B4B)
  GL_TEXTURE_1D_ARRAY*: GLenum = GLenum(0x8C18)
  GL_PROXY_TEXTURE_1D_ARRAY*: GLenum = GLenum(0x8C19)
  GL_TEXTURE_2D_ARRAY*: GLenum = GLenum(0x8C1A)
  GL_PROXY_TEXTURE_2D_ARRAY*: GLenum = GLenum(0x8C1B)
  GL_TEXTURE_BINDING_1D_ARRAY*: GLenum = GLenum(0x8C1C)
  GL_TEXTURE_BINDING_2D_ARRAY*: GLenum = GLenum(0x8C1D)
  GL_R11F_G11F_B10F*: GLenum = GLenum(0x8C3A)
  GL_UNSIGNED_INT_10F_11F_11F_REV*: GLenum = GLenum(0x8C3B)
  GL_RGB9_E5*: GLenum = GLenum(0x8C3D)
  GL_UNSIGNED_INT_5_9_9_9_REV*: GLenum = GLenum(0x8C3E)
  GL_TEXTURE_SHARED_SIZE*: GLenum = GLenum(0x8C3F)
  GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH*: GLenum = GLenum(0x8C76)
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE*: GLenum = GLenum(0x8C7F)
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS*: GLenum = GLenum(0x8C80)
  GL_TRANSFORM_FEEDBACK_VARYINGS*: GLenum = GLenum(0x8C83)
  GL_TRANSFORM_FEEDBACK_BUFFER_START*: GLenum = GLenum(0x8C84)
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE*: GLenum = GLenum(0x8C85)
  GL_PRIMITIVES_GENERATED*: GLenum = GLenum(0x8C87)
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN*: GLenum = GLenum(0x8C88)
  GL_RASTERIZER_DISCARD*: GLenum = GLenum(0x8C89)
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS*: GLenum = GLenum(0x8C8A)
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS*: GLenum = GLenum(0x8C8B)
  GL_INTERLEAVED_ATTRIBS*: GLenum = GLenum(0x8C8C)
  GL_SEPARATE_ATTRIBS*: GLenum = GLenum(0x8C8D)
  GL_TRANSFORM_FEEDBACK_BUFFER*: GLenum = GLenum(0x8C8E)
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING*: GLenum = GLenum(0x8C8F)
  GL_RGBA32UI*: GLenum = GLenum(0x8D70)
  GL_RGB32UI*: GLenum = GLenum(0x8D71)
  GL_RGBA16UI*: GLenum = GLenum(0x8D76)
  GL_RGB16UI*: GLenum = GLenum(0x8D77)
  GL_RGBA8UI*: GLenum = GLenum(0x8D7C)
  GL_RGB8UI*: GLenum = GLenum(0x8D7D)
  GL_RGBA32I*: GLenum = GLenum(0x8D82)
  GL_RGB32I*: GLenum = GLenum(0x8D83)
  GL_RGBA16I*: GLenum = GLenum(0x8D88)
  GL_RGB16I*: GLenum = GLenum(0x8D89)
  GL_RGBA8I*: GLenum = GLenum(0x8D8E)
  GL_RGB8I*: GLenum = GLenum(0x8D8F)
  GL_RED_INTEGER*: GLenum = GLenum(0x8D94)
  GL_GREEN_INTEGER*: GLenum = GLenum(0x8D95)
  GL_BLUE_INTEGER*: GLenum = GLenum(0x8D96)
  GL_RGB_INTEGER*: GLenum = GLenum(0x8D98)
  GL_RGBA_INTEGER*: GLenum = GLenum(0x8D99)
  GL_BGR_INTEGER*: GLenum = GLenum(0x8D9A)
  GL_BGRA_INTEGER*: GLenum = GLenum(0x8D9B)
  GL_SAMPLER_1D_ARRAY*: GLenum = GLenum(0x8DC0)
  GL_SAMPLER_2D_ARRAY*: GLenum = GLenum(0x8DC1)
  GL_SAMPLER_1D_ARRAY_SHADOW*: GLenum = GLenum(0x8DC3)
  GL_SAMPLER_2D_ARRAY_SHADOW*: GLenum = GLenum(0x8DC4)
  GL_SAMPLER_CUBE_SHADOW*: GLenum = GLenum(0x8DC5)
  GL_UNSIGNED_INT_VEC2*: GLenum = GLenum(0x8DC6)
  GL_UNSIGNED_INT_VEC3*: GLenum = GLenum(0x8DC7)
  GL_UNSIGNED_INT_VEC4*: GLenum = GLenum(0x8DC8)
  GL_INT_SAMPLER_1D*: GLenum = GLenum(0x8DC9)
  GL_INT_SAMPLER_2D*: GLenum = GLenum(0x8DCA)
  GL_INT_SAMPLER_3D*: GLenum = GLenum(0x8DCB)
  GL_INT_SAMPLER_CUBE*: GLenum = GLenum(0x8DCC)
  GL_INT_SAMPLER_1D_ARRAY*: GLenum = GLenum(0x8DCE)
  GL_INT_SAMPLER_2D_ARRAY*: GLenum = GLenum(0x8DCF)
  GL_UNSIGNED_INT_SAMPLER_1D*: GLenum = GLenum(0x8DD1)
  GL_UNSIGNED_INT_SAMPLER_2D*: GLenum = GLenum(0x8DD2)
  GL_UNSIGNED_INT_SAMPLER_3D*: GLenum = GLenum(0x8DD3)
  GL_UNSIGNED_INT_SAMPLER_CUBE*: GLenum = GLenum(0x8DD4)
  GL_UNSIGNED_INT_SAMPLER_1D_ARRAY*: GLenum = GLenum(0x8DD6)
  GL_UNSIGNED_INT_SAMPLER_2D_ARRAY*: GLenum = GLenum(0x8DD7)
  GL_QUERY_WAIT*: GLenum = GLenum(0x8E13)
  GL_QUERY_NO_WAIT*: GLenum = GLenum(0x8E14)
  GL_QUERY_BY_REGION_WAIT*: GLenum = GLenum(0x8E15)
  GL_QUERY_BY_REGION_NO_WAIT*: GLenum = GLenum(0x8E16)
  GL_BUFFER_ACCESS_FLAGS*: GLenum = GLenum(0x911F)
  GL_BUFFER_MAP_LENGTH*: GLenum = GLenum(0x9120)
  GL_BUFFER_MAP_OFFSET*: GLenum = GLenum(0x9121)
  GL_DEPTH_COMPONENT32F*: GLenum = GLenum(0x8CAC)
  GL_DEPTH32F_STENCIL8*: GLenum = GLenum(0x8CAD)
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV*: GLenum = GLenum(0x8DAD)
  GL_INVALID_FRAMEBUFFER_OPERATION*: GLenum = GLenum(0x0506)
  GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING*: GLenum = GLenum(0x8210)
  GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE*: GLenum = GLenum(0x8211)
  GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE*: GLenum = GLenum(0x8212)
  GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE*: GLenum = GLenum(0x8213)
  GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE*: GLenum = GLenum(0x8214)
  GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE*: GLenum = GLenum(0x8215)
  GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE*: GLenum = GLenum(0x8216)
  GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE*: GLenum = GLenum(0x8217)
  GL_FRAMEBUFFER_DEFAULT*: GLenum = GLenum(0x8218)
  GL_FRAMEBUFFER_UNDEFINED*: GLenum = GLenum(0x8219)
  GL_DEPTH_STENCIL_ATTACHMENT*: GLenum = GLenum(0x821A)
  GL_MAX_RENDERBUFFER_SIZE*: GLenum = GLenum(0x84E8)
  GL_DEPTH_STENCIL*: GLenum = GLenum(0x84F9)
  GL_UNSIGNED_INT_24_8*: GLenum = GLenum(0x84FA)
  GL_DEPTH24_STENCIL8*: GLenum = GLenum(0x88F0)
  GL_TEXTURE_STENCIL_SIZE*: GLenum = GLenum(0x88F1)
  GL_TEXTURE_RED_TYPE*: GLenum = GLenum(0x8C10)
  GL_TEXTURE_GREEN_TYPE*: GLenum = GLenum(0x8C11)
  GL_TEXTURE_BLUE_TYPE*: GLenum = GLenum(0x8C12)
  GL_TEXTURE_ALPHA_TYPE*: GLenum = GLenum(0x8C13)
  GL_TEXTURE_DEPTH_TYPE*: GLenum = GLenum(0x8C16)
  GL_UNSIGNED_NORMALIZED*: GLenum = GLenum(0x8C17)
  GL_FRAMEBUFFER_BINDING*: GLenum = GLenum(0x8CA6)
  GL_DRAW_FRAMEBUFFER_BINDING*: GLenum = GLenum(0x8CA6)
  GL_RENDERBUFFER_BINDING*: GLenum = GLenum(0x8CA7)
  GL_READ_FRAMEBUFFER*: GLenum = GLenum(0x8CA8)
  GL_DRAW_FRAMEBUFFER*: GLenum = GLenum(0x8CA9)
  GL_READ_FRAMEBUFFER_BINDING*: GLenum = GLenum(0x8CAA)
  GL_RENDERBUFFER_SAMPLES*: GLenum = GLenum(0x8CAB)
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE*: GLenum = GLenum(0x8CD0)
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME*: GLenum = GLenum(0x8CD1)
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL*: GLenum = GLenum(0x8CD2)
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE*: GLenum = GLenum(0x8CD3)
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER*: GLenum = GLenum(0x8CD4)
  GL_FRAMEBUFFER_COMPLETE*: GLenum = GLenum(0x8CD5)
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT*: GLenum = GLenum(0x8CD6)
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT*: GLenum = GLenum(0x8CD7)
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER*: GLenum = GLenum(0x8CDB)
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER*: GLenum = GLenum(0x8CDC)
  GL_FRAMEBUFFER_UNSUPPORTED*: GLenum = GLenum(0x8CDD)
  GL_MAX_COLOR_ATTACHMENTS*: GLenum = GLenum(0x8CDF)
  GL_COLOR_ATTACHMENT0*: GLenum = GLenum(0x8CE0)
  GL_COLOR_ATTACHMENT1*: GLenum = GLenum(0x8CE1)
  GL_COLOR_ATTACHMENT2*: GLenum = GLenum(0x8CE2)
  GL_COLOR_ATTACHMENT3*: GLenum = GLenum(0x8CE3)
  GL_COLOR_ATTACHMENT4*: GLenum = GLenum(0x8CE4)
  GL_COLOR_ATTACHMENT5*: GLenum = GLenum(0x8CE5)
  GL_COLOR_ATTACHMENT6*: GLenum = GLenum(0x8CE6)
  GL_COLOR_ATTACHMENT7*: GLenum = GLenum(0x8CE7)
  GL_COLOR_ATTACHMENT8*: GLenum = GLenum(0x8CE8)
  GL_COLOR_ATTACHMENT9*: GLenum = GLenum(0x8CE9)
  GL_COLOR_ATTACHMENT10*: GLenum = GLenum(0x8CEA)
  GL_COLOR_ATTACHMENT11*: GLenum = GLenum(0x8CEB)
  GL_COLOR_ATTACHMENT12*: GLenum = GLenum(0x8CEC)
  GL_COLOR_ATTACHMENT13*: GLenum = GLenum(0x8CED)
  GL_COLOR_ATTACHMENT14*: GLenum = GLenum(0x8CEE)
  GL_COLOR_ATTACHMENT15*: GLenum = GLenum(0x8CEF)
  GL_COLOR_ATTACHMENT16*: GLenum = GLenum(0x8CF0)
  GL_COLOR_ATTACHMENT17*: GLenum = GLenum(0x8CF1)
  GL_COLOR_ATTACHMENT18*: GLenum = GLenum(0x8CF2)
  GL_COLOR_ATTACHMENT19*: GLenum = GLenum(0x8CF3)
  GL_COLOR_ATTACHMENT20*: GLenum = GLenum(0x8CF4)
  GL_COLOR_ATTACHMENT21*: GLenum = GLenum(0x8CF5)
  GL_COLOR_ATTACHMENT22*: GLenum = GLenum(0x8CF6)
  GL_COLOR_ATTACHMENT23*: GLenum = GLenum(0x8CF7)
  GL_COLOR_ATTACHMENT24*: GLenum = GLenum(0x8CF8)
  GL_COLOR_ATTACHMENT25*: GLenum = GLenum(0x8CF9)
  GL_COLOR_ATTACHMENT26*: GLenum = GLenum(0x8CFA)
  GL_COLOR_ATTACHMENT27*: GLenum = GLenum(0x8CFB)
  GL_COLOR_ATTACHMENT28*: GLenum = GLenum(0x8CFC)
  GL_COLOR_ATTACHMENT29*: GLenum = GLenum(0x8CFD)
  GL_COLOR_ATTACHMENT30*: GLenum = GLenum(0x8CFE)
  GL_COLOR_ATTACHMENT31*: GLenum = GLenum(0x8CFF)
  GL_DEPTH_ATTACHMENT*: GLenum = GLenum(0x8D00)
  GL_STENCIL_ATTACHMENT*: GLenum = GLenum(0x8D20)
  GL_FRAMEBUFFER*: GLenum = GLenum(0x8D40)
  GL_RENDERBUFFER*: GLenum = GLenum(0x8D41)
  GL_RENDERBUFFER_WIDTH*: GLenum = GLenum(0x8D42)
  GL_RENDERBUFFER_HEIGHT*: GLenum = GLenum(0x8D43)
  GL_RENDERBUFFER_INTERNAL_FORMAT*: GLenum = GLenum(0x8D44)
  GL_STENCIL_INDEX1*: GLenum = GLenum(0x8D46)
  GL_STENCIL_INDEX4*: GLenum = GLenum(0x8D47)
  GL_STENCIL_INDEX8*: GLenum = GLenum(0x8D48)
  GL_STENCIL_INDEX16*: GLenum = GLenum(0x8D49)
  GL_RENDERBUFFER_RED_SIZE*: GLenum = GLenum(0x8D50)
  GL_RENDERBUFFER_GREEN_SIZE*: GLenum = GLenum(0x8D51)
  GL_RENDERBUFFER_BLUE_SIZE*: GLenum = GLenum(0x8D52)
  GL_RENDERBUFFER_ALPHA_SIZE*: GLenum = GLenum(0x8D53)
  GL_RENDERBUFFER_DEPTH_SIZE*: GLenum = GLenum(0x8D54)
  GL_RENDERBUFFER_STENCIL_SIZE*: GLenum = GLenum(0x8D55)
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE*: GLenum = GLenum(0x8D56)
  GL_MAX_SAMPLES*: GLenum = GLenum(0x8D57)
  GL_INDEX*: GLenum = GLenum(0x8222)
  GL_TEXTURE_LUMINANCE_TYPE*: GLenum = GLenum(0x8C14)
  GL_TEXTURE_INTENSITY_TYPE*: GLenum = GLenum(0x8C15)
  GL_FRAMEBUFFER_SRGB*: GLenum = GLenum(0x8DB9)
  GL_HALF_FLOAT*: GLenum = GLenum(0x140B)
  GL_MAP_READ_BIT*: GLenum = GLenum(0x0001)
  GL_MAP_WRITE_BIT*: GLenum = GLenum(0x0002)
  GL_MAP_INVALIDATE_RANGE_BIT*: GLenum = GLenum(0x0004)
  GL_MAP_INVALIDATE_BUFFER_BIT*: GLenum = GLenum(0x0008)
  GL_MAP_FLUSH_EXPLICIT_BIT*: GLenum = GLenum(0x0010)
  GL_MAP_UNSYNCHRONIZED_BIT*: GLenum = GLenum(0x0020)
  GL_COMPRESSED_RED_RGTC1*: GLenum = GLenum(0x8DBB)
  GL_COMPRESSED_SIGNED_RED_RGTC1*: GLenum = GLenum(0x8DBC)
  GL_COMPRESSED_RG_RGTC2*: GLenum = GLenum(0x8DBD)
  GL_COMPRESSED_SIGNED_RG_RGTC2*: GLenum = GLenum(0x8DBE)
  GL_RG*: GLenum = GLenum(0x8227)
  GL_RG_INTEGER*: GLenum = GLenum(0x8228)
  GL_R8*: GLenum = GLenum(0x8229)
  GL_R16*: GLenum = GLenum(0x822A)
  GL_RG8*: GLenum = GLenum(0x822B)
  GL_RG16*: GLenum = GLenum(0x822C)
  GL_R16F*: GLenum = GLenum(0x822D)
  GL_R32F*: GLenum = GLenum(0x822E)
  GL_RG16F*: GLenum = GLenum(0x822F)
  GL_RG32F*: GLenum = GLenum(0x8230)
  GL_R8I*: GLenum = GLenum(0x8231)
  GL_R8UI*: GLenum = GLenum(0x8232)
  GL_R16I*: GLenum = GLenum(0x8233)
  GL_R16UI*: GLenum = GLenum(0x8234)
  GL_R32I*: GLenum = GLenum(0x8235)
  GL_R32UI*: GLenum = GLenum(0x8236)
  GL_RG8I*: GLenum = GLenum(0x8237)
  GL_RG8UI*: GLenum = GLenum(0x8238)
  GL_RG16I*: GLenum = GLenum(0x8239)
  GL_RG16UI*: GLenum = GLenum(0x823A)
  GL_RG32I*: GLenum = GLenum(0x823B)
  GL_RG32UI*: GLenum = GLenum(0x823C)
  GL_VERTEX_ARRAY_BINDING*: GLenum = GLenum(0x85B5)
  GL_CLAMP_VERTEX_COLOR*: GLenum = GLenum(0x891A)
  GL_CLAMP_FRAGMENT_COLOR*: GLenum = GLenum(0x891B)
  GL_ALPHA_INTEGER*: GLenum = GLenum(0x8D97)
  GL_SAMPLER_2D_RECT*: GLenum = GLenum(0x8B63)
  GL_SAMPLER_2D_RECT_SHADOW*: GLenum = GLenum(0x8B64)
  GL_SAMPLER_BUFFER*: GLenum = GLenum(0x8DC2)
  GL_INT_SAMPLER_2D_RECT*: GLenum = GLenum(0x8DCD)
  GL_INT_SAMPLER_BUFFER*: GLenum = GLenum(0x8DD0)
  GL_UNSIGNED_INT_SAMPLER_2D_RECT*: GLenum = GLenum(0x8DD5)
  GL_UNSIGNED_INT_SAMPLER_BUFFER*: GLenum = GLenum(0x8DD8)
  GL_TEXTURE_BUFFER*: GLenum = GLenum(0x8C2A)
  GL_MAX_TEXTURE_BUFFER_SIZE*: GLenum = GLenum(0x8C2B)
  GL_TEXTURE_BINDING_BUFFER*: GLenum = GLenum(0x8C2C)
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING*: GLenum = GLenum(0x8C2D)
  GL_TEXTURE_RECTANGLE*: GLenum = GLenum(0x84F5)
  GL_TEXTURE_BINDING_RECTANGLE*: GLenum = GLenum(0x84F6)
  GL_PROXY_TEXTURE_RECTANGLE*: GLenum = GLenum(0x84F7)
  GL_MAX_RECTANGLE_TEXTURE_SIZE*: GLenum = GLenum(0x84F8)
  GL_R8_SNORM*: GLenum = GLenum(0x8F94)
  GL_RG8_SNORM*: GLenum = GLenum(0x8F95)
  GL_RGB8_SNORM*: GLenum = GLenum(0x8F96)
  GL_RGBA8_SNORM*: GLenum = GLenum(0x8F97)
  GL_R16_SNORM*: GLenum = GLenum(0x8F98)
  GL_RG16_SNORM*: GLenum = GLenum(0x8F99)
  GL_RGB16_SNORM*: GLenum = GLenum(0x8F9A)
  GL_RGBA16_SNORM*: GLenum = GLenum(0x8F9B)
  GL_SIGNED_NORMALIZED*: GLenum = GLenum(0x8F9C)
  GL_PRIMITIVE_RESTART*: GLenum = GLenum(0x8F9D)
  GL_PRIMITIVE_RESTART_INDEX*: GLenum = GLenum(0x8F9E)
  GL_COPY_READ_BUFFER*: GLenum = GLenum(0x8F36)
  GL_COPY_WRITE_BUFFER*: GLenum = GLenum(0x8F37)
  GL_UNIFORM_BUFFER*: GLenum = GLenum(0x8A11)
  GL_UNIFORM_BUFFER_BINDING*: GLenum = GLenum(0x8A28)
  GL_UNIFORM_BUFFER_START*: GLenum = GLenum(0x8A29)
  GL_UNIFORM_BUFFER_SIZE*: GLenum = GLenum(0x8A2A)
  GL_MAX_VERTEX_UNIFORM_BLOCKS*: GLenum = GLenum(0x8A2B)
  GL_MAX_GEOMETRY_UNIFORM_BLOCKS*: GLenum = GLenum(0x8A2C)
  GL_MAX_FRAGMENT_UNIFORM_BLOCKS*: GLenum = GLenum(0x8A2D)
  GL_MAX_COMBINED_UNIFORM_BLOCKS*: GLenum = GLenum(0x8A2E)
  GL_MAX_UNIFORM_BUFFER_BINDINGS*: GLenum = GLenum(0x8A2F)
  GL_MAX_UNIFORM_BLOCK_SIZE*: GLenum = GLenum(0x8A30)
  GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8A31)
  GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8A32)
  GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8A33)
  GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT*: GLenum = GLenum(0x8A34)
  GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH*: GLenum = GLenum(0x8A35)
  GL_ACTIVE_UNIFORM_BLOCKS*: GLenum = GLenum(0x8A36)
  GL_UNIFORM_TYPE*: GLenum = GLenum(0x8A37)
  GL_UNIFORM_SIZE*: GLenum = GLenum(0x8A38)
  GL_UNIFORM_NAME_LENGTH*: GLenum = GLenum(0x8A39)
  GL_UNIFORM_BLOCK_INDEX*: GLenum = GLenum(0x8A3A)
  GL_UNIFORM_OFFSET*: GLenum = GLenum(0x8A3B)
  GL_UNIFORM_ARRAY_STRIDE*: GLenum = GLenum(0x8A3C)
  GL_UNIFORM_MATRIX_STRIDE*: GLenum = GLenum(0x8A3D)
  GL_UNIFORM_IS_ROW_MAJOR*: GLenum = GLenum(0x8A3E)
  GL_UNIFORM_BLOCK_BINDING*: GLenum = GLenum(0x8A3F)
  GL_UNIFORM_BLOCK_DATA_SIZE*: GLenum = GLenum(0x8A40)
  GL_UNIFORM_BLOCK_NAME_LENGTH*: GLenum = GLenum(0x8A41)
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS*: GLenum = GLenum(0x8A42)
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES*: GLenum = GLenum(0x8A43)
  GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER*: GLenum = GLenum(0x8A44)
  GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER*: GLenum = GLenum(0x8A45)
  GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER*: GLenum = GLenum(0x8A46)
  GL_CONTEXT_CORE_PROFILE_BIT*: GLenum = GLenum(0x00000001)
  GL_CONTEXT_COMPATIBILITY_PROFILE_BIT*: GLenum = GLenum(0x00000002)
  GL_LINES_ADJACENCY*: GLenum = GLenum(0x000A)
  GL_LINE_STRIP_ADJACENCY*: GLenum = GLenum(0x000B)
  GL_TRIANGLES_ADJACENCY*: GLenum = GLenum(0x000C)
  GL_TRIANGLE_STRIP_ADJACENCY*: GLenum = GLenum(0x000D)
  GL_PROGRAM_POINT_SIZE*: GLenum = GLenum(0x8642)
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS*: GLenum = GLenum(0x8C29)
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED*: GLenum = GLenum(0x8DA7)
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS*: GLenum = GLenum(0x8DA8)
  GL_GEOMETRY_SHADER*: GLenum = GLenum(0x8DD9)
  GL_GEOMETRY_VERTICES_OUT*: GLenum = GLenum(0x8916)
  GL_GEOMETRY_INPUT_TYPE*: GLenum = GLenum(0x8917)
  GL_GEOMETRY_OUTPUT_TYPE*: GLenum = GLenum(0x8918)
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8DDF)
  GL_MAX_GEOMETRY_OUTPUT_VERTICES*: GLenum = GLenum(0x8DE0)
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS*: GLenum = GLenum(0x8DE1)
  GL_MAX_VERTEX_OUTPUT_COMPONENTS*: GLenum = GLenum(0x9122)
  GL_MAX_GEOMETRY_INPUT_COMPONENTS*: GLenum = GLenum(0x9123)
  GL_MAX_GEOMETRY_OUTPUT_COMPONENTS*: GLenum = GLenum(0x9124)
  GL_MAX_FRAGMENT_INPUT_COMPONENTS*: GLenum = GLenum(0x9125)
  GL_CONTEXT_PROFILE_MASK*: GLenum = GLenum(0x9126)
  GL_DEPTH_CLAMP*: GLenum = GLenum(0x864F)
  GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION*: GLenum = GLenum(0x8E4C)
  GL_FIRST_VERTEX_CONVENTION*: GLenum = GLenum(0x8E4D)
  GL_LAST_VERTEX_CONVENTION*: GLenum = GLenum(0x8E4E)
  GL_PROVOKING_VERTEX*: GLenum = GLenum(0x8E4F)
  GL_TEXTURE_CUBE_MAP_SEAMLESS*: GLenum = GLenum(0x884F)
  GL_MAX_SERVER_WAIT_TIMEOUT*: GLenum = GLenum(0x9111)
  GL_OBJECT_TYPE*: GLenum = GLenum(0x9112)
  GL_SYNC_CONDITION*: GLenum = GLenum(0x9113)
  GL_SYNC_STATUS*: GLenum = GLenum(0x9114)
  GL_SYNC_FLAGS*: GLenum = GLenum(0x9115)
  GL_SYNC_FENCE*: GLenum = GLenum(0x9116)
  GL_SYNC_GPU_COMMANDS_COMPLETE*: GLenum = GLenum(0x9117)
  GL_UNSIGNALED*: GLenum = GLenum(0x9118)
  GL_SIGNALED*: GLenum = GLenum(0x9119)
  GL_ALREADY_SIGNALED*: GLenum = GLenum(0x911A)
  GL_TIMEOUT_EXPIRED*: GLenum = GLenum(0x911B)
  GL_CONDITION_SATISFIED*: GLenum = GLenum(0x911C)
  GL_WAIT_FAILED*: GLenum = GLenum(0x911D)
  GL_SYNC_FLUSH_COMMANDS_BIT*: GLenum = GLenum(0x00000001)
  GL_SAMPLE_POSITION*: GLenum = GLenum(0x8E50)
  GL_SAMPLE_MASK*: GLenum = GLenum(0x8E51)
  GL_SAMPLE_MASK_VALUE*: GLenum = GLenum(0x8E52)
  GL_MAX_SAMPLE_MASK_WORDS*: GLenum = GLenum(0x8E59)
  GL_TEXTURE_2D_MULTISAMPLE*: GLenum = GLenum(0x9100)
  GL_PROXY_TEXTURE_2D_MULTISAMPLE*: GLenum = GLenum(0x9101)
  GL_TEXTURE_2D_MULTISAMPLE_ARRAY*: GLenum = GLenum(0x9102)
  GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY*: GLenum = GLenum(0x9103)
  GL_TEXTURE_BINDING_2D_MULTISAMPLE*: GLenum = GLenum(0x9104)
  GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY*: GLenum = GLenum(0x9105)
  GL_TEXTURE_SAMPLES*: GLenum = GLenum(0x9106)
  GL_TEXTURE_FIXED_SAMPLE_LOCATIONS*: GLenum = GLenum(0x9107)
  GL_SAMPLER_2D_MULTISAMPLE*: GLenum = GLenum(0x9108)
  GL_INT_SAMPLER_2D_MULTISAMPLE*: GLenum = GLenum(0x9109)
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE*: GLenum = GLenum(0x910A)
  GL_SAMPLER_2D_MULTISAMPLE_ARRAY*: GLenum = GLenum(0x910B)
  GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY*: GLenum = GLenum(0x910C)
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY*: GLenum = GLenum(0x910D)
  GL_MAX_COLOR_TEXTURE_SAMPLES*: GLenum = GLenum(0x910E)
  GL_MAX_DEPTH_TEXTURE_SAMPLES*: GLenum = GLenum(0x910F)
  GL_MAX_INTEGER_SAMPLES*: GLenum = GLenum(0x9110)
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR*: GLenum = GLenum(0x88FE)
  GL_SRC1_COLOR*: GLenum = GLenum(0x88F9)
  GL_ONE_MINUS_SRC1_COLOR*: GLenum = GLenum(0x88FA)
  GL_ONE_MINUS_SRC1_ALPHA*: GLenum = GLenum(0x88FB)
  GL_MAX_DUAL_SOURCE_DRAW_BUFFERS*: GLenum = GLenum(0x88FC)
  GL_ANY_SAMPLES_PASSED*: GLenum = GLenum(0x8C2F)
  GL_SAMPLER_BINDING*: GLenum = GLenum(0x8919)
  GL_RGB10_A2UI*: GLenum = GLenum(0x906F)
  GL_TEXTURE_SWIZZLE_R*: GLenum = GLenum(0x8E42)
  GL_TEXTURE_SWIZZLE_G*: GLenum = GLenum(0x8E43)
  GL_TEXTURE_SWIZZLE_B*: GLenum = GLenum(0x8E44)
  GL_TEXTURE_SWIZZLE_A*: GLenum = GLenum(0x8E45)
  GL_TEXTURE_SWIZZLE_RGBA*: GLenum = GLenum(0x8E46)
  GL_TIME_ELAPSED*: GLenum = GLenum(0x88BF)
  GL_TIMESTAMP*: GLenum = GLenum(0x8E28)
  GL_INT_2_10_10_10_REV*: GLenum = GLenum(0x8D9F)
  GL_SAMPLE_SHADING*: GLenum = GLenum(0x8C36)
  GL_MIN_SAMPLE_SHADING_VALUE*: GLenum = GLenum(0x8C37)
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET*: GLenum = GLenum(0x8E5E)
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET*: GLenum = GLenum(0x8E5F)
  GL_TEXTURE_CUBE_MAP_ARRAY*: GLenum = GLenum(0x9009)
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY*: GLenum = GLenum(0x900A)
  GL_PROXY_TEXTURE_CUBE_MAP_ARRAY*: GLenum = GLenum(0x900B)
  GL_SAMPLER_CUBE_MAP_ARRAY*: GLenum = GLenum(0x900C)
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW*: GLenum = GLenum(0x900D)
  GL_INT_SAMPLER_CUBE_MAP_ARRAY*: GLenum = GLenum(0x900E)
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY*: GLenum = GLenum(0x900F)
  GL_DRAW_INDIRECT_BUFFER*: GLenum = GLenum(0x8F3F)
  GL_DRAW_INDIRECT_BUFFER_BINDING*: GLenum = GLenum(0x8F43)
  GL_GEOMETRY_SHADER_INVOCATIONS*: GLenum = GLenum(0x887F)
  GL_MAX_GEOMETRY_SHADER_INVOCATIONS*: GLenum = GLenum(0x8E5A)
  GL_MIN_FRAGMENT_INTERPOLATION_OFFSET*: GLenum = GLenum(0x8E5B)
  GL_MAX_FRAGMENT_INTERPOLATION_OFFSET*: GLenum = GLenum(0x8E5C)
  GL_FRAGMENT_INTERPOLATION_OFFSET_BITS*: GLenum = GLenum(0x8E5D)
  GL_MAX_VERTEX_STREAMS*: GLenum = GLenum(0x8E71)
  GL_DOUBLE_VEC2*: GLenum = GLenum(0x8FFC)
  GL_DOUBLE_VEC3*: GLenum = GLenum(0x8FFD)
  GL_DOUBLE_VEC4*: GLenum = GLenum(0x8FFE)
  GL_DOUBLE_MAT2*: GLenum = GLenum(0x8F46)
  GL_DOUBLE_MAT3*: GLenum = GLenum(0x8F47)
  GL_DOUBLE_MAT4*: GLenum = GLenum(0x8F48)
  GL_DOUBLE_MAT2x3*: GLenum = GLenum(0x8F49)
  GL_DOUBLE_MAT2x4*: GLenum = GLenum(0x8F4A)
  GL_DOUBLE_MAT3x2*: GLenum = GLenum(0x8F4B)
  GL_DOUBLE_MAT3x4*: GLenum = GLenum(0x8F4C)
  GL_DOUBLE_MAT4x2*: GLenum = GLenum(0x8F4D)
  GL_DOUBLE_MAT4x3*: GLenum = GLenum(0x8F4E)
  GL_ACTIVE_SUBROUTINES*: GLenum = GLenum(0x8DE5)
  GL_ACTIVE_SUBROUTINE_UNIFORMS*: GLenum = GLenum(0x8DE6)
  GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS*: GLenum = GLenum(0x8E47)
  GL_ACTIVE_SUBROUTINE_MAX_LENGTH*: GLenum = GLenum(0x8E48)
  GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH*: GLenum = GLenum(0x8E49)
  GL_MAX_SUBROUTINES*: GLenum = GLenum(0x8DE7)
  GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS*: GLenum = GLenum(0x8DE8)
  GL_NUM_COMPATIBLE_SUBROUTINES*: GLenum = GLenum(0x8E4A)
  GL_COMPATIBLE_SUBROUTINES*: GLenum = GLenum(0x8E4B)
  GL_PATCHES*: GLenum = GLenum(0x000E)
  GL_PATCH_VERTICES*: GLenum = GLenum(0x8E72)
  GL_PATCH_DEFAULT_INNER_LEVEL*: GLenum = GLenum(0x8E73)
  GL_PATCH_DEFAULT_OUTER_LEVEL*: GLenum = GLenum(0x8E74)
  GL_TESS_CONTROL_OUTPUT_VERTICES*: GLenum = GLenum(0x8E75)
  GL_TESS_GEN_MODE*: GLenum = GLenum(0x8E76)
  GL_TESS_GEN_SPACING*: GLenum = GLenum(0x8E77)
  GL_TESS_GEN_VERTEX_ORDER*: GLenum = GLenum(0x8E78)
  GL_TESS_GEN_POINT_MODE*: GLenum = GLenum(0x8E79)
  GL_ISOLINES*: GLenum = GLenum(0x8E7A)
  GL_FRACTIONAL_ODD*: GLenum = GLenum(0x8E7B)
  GL_FRACTIONAL_EVEN*: GLenum = GLenum(0x8E7C)
  GL_MAX_PATCH_VERTICES*: GLenum = GLenum(0x8E7D)
  GL_MAX_TESS_GEN_LEVEL*: GLenum = GLenum(0x8E7E)
  GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8E7F)
  GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8E80)
  GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS*: GLenum = GLenum(0x8E81)
  GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS*: GLenum = GLenum(0x8E82)
  GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS*: GLenum = GLenum(0x8E83)
  GL_MAX_TESS_PATCH_COMPONENTS*: GLenum = GLenum(0x8E84)
  GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS*: GLenum = GLenum(0x8E85)
  GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS*: GLenum = GLenum(0x8E86)
  GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS*: GLenum = GLenum(0x8E89)
  GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS*: GLenum = GLenum(0x8E8A)
  GL_MAX_TESS_CONTROL_INPUT_COMPONENTS*: GLenum = GLenum(0x886C)
  GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS*: GLenum = GLenum(0x886D)
  GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8E1E)
  GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8E1F)
  GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER*: GLenum = GLenum(0x84F0)
  GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER*: GLenum = GLenum(0x84F1)
  GL_TESS_EVALUATION_SHADER*: GLenum = GLenum(0x8E87)
  GL_TESS_CONTROL_SHADER*: GLenum = GLenum(0x8E88)
  GL_TRANSFORM_FEEDBACK*: GLenum = GLenum(0x8E22)
  GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED*: GLenum = GLenum(0x8E23)
  GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE*: GLenum = GLenum(0x8E24)
  GL_TRANSFORM_FEEDBACK_BINDING*: GLenum = GLenum(0x8E25)
  GL_MAX_TRANSFORM_FEEDBACK_BUFFERS*: GLenum = GLenum(0x8E70)
  cGL_FIXED*: GLenum = GLenum(0x140C)
  GL_IMPLEMENTATION_COLOR_READ_TYPE*: GLenum = GLenum(0x8B9A)
  GL_IMPLEMENTATION_COLOR_READ_FORMAT*: GLenum = GLenum(0x8B9B)
  GL_LOW_FLOAT*: GLenum = GLenum(0x8DF0)
  GL_MEDIUM_FLOAT*: GLenum = GLenum(0x8DF1)
  GL_HIGH_FLOAT*: GLenum = GLenum(0x8DF2)
  GL_LOW_INT*: GLenum = GLenum(0x8DF3)
  GL_MEDIUM_INT*: GLenum = GLenum(0x8DF4)
  GL_HIGH_INT*: GLenum = GLenum(0x8DF5)
  GL_SHADER_COMPILER*: GLenum = GLenum(0x8DFA)
  GL_SHADER_BINARY_FORMATS*: GLenum = GLenum(0x8DF8)
  GL_NUM_SHADER_BINARY_FORMATS*: GLenum = GLenum(0x8DF9)
  GL_MAX_VERTEX_UNIFORM_VECTORS*: GLenum = GLenum(0x8DFB)
  GL_MAX_VARYING_VECTORS*: GLenum = GLenum(0x8DFC)
  GL_MAX_FRAGMENT_UNIFORM_VECTORS*: GLenum = GLenum(0x8DFD)
  GL_RGB565*: GLenum = GLenum(0x8D62)
  GL_PROGRAM_BINARY_RETRIEVABLE_HINT*: GLenum = GLenum(0x8257)
  GL_PROGRAM_BINARY_LENGTH*: GLenum = GLenum(0x8741)
  GL_NUM_PROGRAM_BINARY_FORMATS*: GLenum = GLenum(0x87FE)
  GL_PROGRAM_BINARY_FORMATS*: GLenum = GLenum(0x87FF)
  GL_VERTEX_SHADER_BIT*: GLenum = GLenum(0x00000001)
  GL_FRAGMENT_SHADER_BIT*: GLenum = GLenum(0x00000002)
  GL_GEOMETRY_SHADER_BIT*: GLenum = GLenum(0x00000004)
  GL_TESS_CONTROL_SHADER_BIT*: GLenum = GLenum(0x00000008)
  GL_TESS_EVALUATION_SHADER_BIT*: GLenum = GLenum(0x00000010)
  GL_ALL_SHADER_BITS*: GLenum = GLenum(0xFFFFFFFF)
  GL_PROGRAM_SEPARABLE*: GLenum = GLenum(0x8258)
  GL_ACTIVE_PROGRAM*: GLenum = GLenum(0x8259)
  GL_PROGRAM_PIPELINE_BINDING*: GLenum = GLenum(0x825A)
  GL_MAX_VIEWPORTS*: GLenum = GLenum(0x825B)
  GL_VIEWPORT_SUBPIXEL_BITS*: GLenum = GLenum(0x825C)
  GL_VIEWPORT_BOUNDS_RANGE*: GLenum = GLenum(0x825D)
  GL_LAYER_PROVOKING_VERTEX*: GLenum = GLenum(0x825E)
  GL_VIEWPORT_INDEX_PROVOKING_VERTEX*: GLenum = GLenum(0x825F)
  GL_UNDEFINED_VERTEX*: GLenum = GLenum(0x8260)
  GL_COPY_READ_BUFFER_BINDING*: GLenum = GLenum(0x8F36)
  GL_COPY_WRITE_BUFFER_BINDING*: GLenum = GLenum(0x8F37)
  GL_TRANSFORM_FEEDBACK_ACTIVE*: GLenum = GLenum(0x8E24)
  GL_TRANSFORM_FEEDBACK_PAUSED*: GLenum = GLenum(0x8E23)
  GL_UNPACK_COMPRESSED_BLOCK_WIDTH*: GLenum = GLenum(0x9127)
  GL_UNPACK_COMPRESSED_BLOCK_HEIGHT*: GLenum = GLenum(0x9128)
  GL_UNPACK_COMPRESSED_BLOCK_DEPTH*: GLenum = GLenum(0x9129)
  GL_UNPACK_COMPRESSED_BLOCK_SIZE*: GLenum = GLenum(0x912A)
  GL_PACK_COMPRESSED_BLOCK_WIDTH*: GLenum = GLenum(0x912B)
  GL_PACK_COMPRESSED_BLOCK_HEIGHT*: GLenum = GLenum(0x912C)
  GL_PACK_COMPRESSED_BLOCK_DEPTH*: GLenum = GLenum(0x912D)
  GL_PACK_COMPRESSED_BLOCK_SIZE*: GLenum = GLenum(0x912E)
  GL_NUM_SAMPLE_COUNTS*: GLenum = GLenum(0x9380)
  GL_MIN_MAP_BUFFER_ALIGNMENT*: GLenum = GLenum(0x90BC)
  GL_ATOMIC_COUNTER_BUFFER*: GLenum = GLenum(0x92C0)
  GL_ATOMIC_COUNTER_BUFFER_BINDING*: GLenum = GLenum(0x92C1)
  GL_ATOMIC_COUNTER_BUFFER_START*: GLenum = GLenum(0x92C2)
  GL_ATOMIC_COUNTER_BUFFER_SIZE*: GLenum = GLenum(0x92C3)
  GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE*: GLenum = GLenum(0x92C4)
  GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS*: GLenum = GLenum(0x92C5)
  GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES*: GLenum = GLenum(0x92C6)
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER*: GLenum = GLenum(0x92C7)
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER*: GLenum = GLenum(0x92C8)
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER*: GLenum = GLenum(0x92C9)
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER*: GLenum = GLenum(0x92CA)
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER*: GLenum = GLenum(0x92CB)
  GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS*: GLenum = GLenum(0x92CC)
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS*: GLenum = GLenum(0x92CD)
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS*: GLenum = GLenum(0x92CE)
  GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS*: GLenum = GLenum(0x92CF)
  GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS*: GLenum = GLenum(0x92D0)
  GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS*: GLenum = GLenum(0x92D1)
  GL_MAX_VERTEX_ATOMIC_COUNTERS*: GLenum = GLenum(0x92D2)
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS*: GLenum = GLenum(0x92D3)
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS*: GLenum = GLenum(0x92D4)
  GL_MAX_GEOMETRY_ATOMIC_COUNTERS*: GLenum = GLenum(0x92D5)
  GL_MAX_FRAGMENT_ATOMIC_COUNTERS*: GLenum = GLenum(0x92D6)
  GL_MAX_COMBINED_ATOMIC_COUNTERS*: GLenum = GLenum(0x92D7)
  GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE*: GLenum = GLenum(0x92D8)
  GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS*: GLenum = GLenum(0x92DC)
  GL_ACTIVE_ATOMIC_COUNTER_BUFFERS*: GLenum = GLenum(0x92D9)
  GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX*: GLenum = GLenum(0x92DA)
  GL_UNSIGNED_INT_ATOMIC_COUNTER*: GLenum = GLenum(0x92DB)
  GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT*: GLenum = GLenum(0x00000001)
  GL_ELEMENT_ARRAY_BARRIER_BIT*: GLenum = GLenum(0x00000002)
  GL_UNIFORM_BARRIER_BIT*: GLenum = GLenum(0x00000004)
  GL_TEXTURE_FETCH_BARRIER_BIT*: GLenum = GLenum(0x00000008)
  GL_SHADER_IMAGE_ACCESS_BARRIER_BIT*: GLenum = GLenum(0x00000020)
  GL_COMMAND_BARRIER_BIT*: GLenum = GLenum(0x00000040)
  GL_PIXEL_BUFFER_BARRIER_BIT*: GLenum = GLenum(0x00000080)
  GL_TEXTURE_UPDATE_BARRIER_BIT*: GLenum = GLenum(0x00000100)
  GL_BUFFER_UPDATE_BARRIER_BIT*: GLenum = GLenum(0x00000200)
  GL_FRAMEBUFFER_BARRIER_BIT*: GLenum = GLenum(0x00000400)
  GL_TRANSFORM_FEEDBACK_BARRIER_BIT*: GLenum = GLenum(0x00000800)
  GL_ATOMIC_COUNTER_BARRIER_BIT*: GLenum = GLenum(0x00001000)
  GL_ALL_BARRIER_BITS*: GLenum = GLenum(0xFFFFFFFF)
  GL_MAX_IMAGE_UNITS*: GLenum = GLenum(0x8F38)
  GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS*: GLenum = GLenum(0x8F39)
  GL_IMAGE_BINDING_NAME*: GLenum = GLenum(0x8F3A)
  GL_IMAGE_BINDING_LEVEL*: GLenum = GLenum(0x8F3B)
  GL_IMAGE_BINDING_LAYERED*: GLenum = GLenum(0x8F3C)
  GL_IMAGE_BINDING_LAYER*: GLenum = GLenum(0x8F3D)
  GL_IMAGE_BINDING_ACCESS*: GLenum = GLenum(0x8F3E)
  GL_IMAGE_1D*: GLenum = GLenum(0x904C)
  GL_IMAGE_2D*: GLenum = GLenum(0x904D)
  GL_IMAGE_3D*: GLenum = GLenum(0x904E)
  GL_IMAGE_2D_RECT*: GLenum = GLenum(0x904F)
  GL_IMAGE_CUBE*: GLenum = GLenum(0x9050)
  GL_IMAGE_BUFFER*: GLenum = GLenum(0x9051)
  GL_IMAGE_1D_ARRAY*: GLenum = GLenum(0x9052)
  GL_IMAGE_2D_ARRAY*: GLenum = GLenum(0x9053)
  GL_IMAGE_CUBE_MAP_ARRAY*: GLenum = GLenum(0x9054)
  GL_IMAGE_2D_MULTISAMPLE*: GLenum = GLenum(0x9055)
  GL_IMAGE_2D_MULTISAMPLE_ARRAY*: GLenum = GLenum(0x9056)
  GL_INT_IMAGE_1D*: GLenum = GLenum(0x9057)
  GL_INT_IMAGE_2D*: GLenum = GLenum(0x9058)
  GL_INT_IMAGE_3D*: GLenum = GLenum(0x9059)
  GL_INT_IMAGE_2D_RECT*: GLenum = GLenum(0x905A)
  GL_INT_IMAGE_CUBE*: GLenum = GLenum(0x905B)
  GL_INT_IMAGE_BUFFER*: GLenum = GLenum(0x905C)
  GL_INT_IMAGE_1D_ARRAY*: GLenum = GLenum(0x905D)
  GL_INT_IMAGE_2D_ARRAY*: GLenum = GLenum(0x905E)
  GL_INT_IMAGE_CUBE_MAP_ARRAY*: GLenum = GLenum(0x905F)
  GL_INT_IMAGE_2D_MULTISAMPLE*: GLenum = GLenum(0x9060)
  GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY*: GLenum = GLenum(0x9061)
  GL_UNSIGNED_INT_IMAGE_1D*: GLenum = GLenum(0x9062)
  GL_UNSIGNED_INT_IMAGE_2D*: GLenum = GLenum(0x9063)
  GL_UNSIGNED_INT_IMAGE_3D*: GLenum = GLenum(0x9064)
  GL_UNSIGNED_INT_IMAGE_2D_RECT*: GLenum = GLenum(0x9065)
  GL_UNSIGNED_INT_IMAGE_CUBE*: GLenum = GLenum(0x9066)
  GL_UNSIGNED_INT_IMAGE_BUFFER*: GLenum = GLenum(0x9067)
  GL_UNSIGNED_INT_IMAGE_1D_ARRAY*: GLenum = GLenum(0x9068)
  GL_UNSIGNED_INT_IMAGE_2D_ARRAY*: GLenum = GLenum(0x9069)
  GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY*: GLenum = GLenum(0x906A)
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE*: GLenum = GLenum(0x906B)
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY*: GLenum = GLenum(0x906C)
  GL_MAX_IMAGE_SAMPLES*: GLenum = GLenum(0x906D)
  GL_IMAGE_BINDING_FORMAT*: GLenum = GLenum(0x906E)
  GL_IMAGE_FORMAT_COMPATIBILITY_TYPE*: GLenum = GLenum(0x90C7)
  GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE*: GLenum = GLenum(0x90C8)
  GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS*: GLenum = GLenum(0x90C9)
  GL_MAX_VERTEX_IMAGE_UNIFORMS*: GLenum = GLenum(0x90CA)
  GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS*: GLenum = GLenum(0x90CB)
  GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS*: GLenum = GLenum(0x90CC)
  GL_MAX_GEOMETRY_IMAGE_UNIFORMS*: GLenum = GLenum(0x90CD)
  GL_MAX_FRAGMENT_IMAGE_UNIFORMS*: GLenum = GLenum(0x90CE)
  GL_MAX_COMBINED_IMAGE_UNIFORMS*: GLenum = GLenum(0x90CF)
  GL_COMPRESSED_RGBA_BPTC_UNORM*: GLenum = GLenum(0x8E8C)
  GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM*: GLenum = GLenum(0x8E8D)
  GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT*: GLenum = GLenum(0x8E8E)
  GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT*: GLenum = GLenum(0x8E8F)
  GL_TEXTURE_IMMUTABLE_FORMAT*: GLenum = GLenum(0x912F)
  GL_NUM_SHADING_LANGUAGE_VERSIONS*: GLenum = GLenum(0x82E9)
  GL_VERTEX_ATTRIB_ARRAY_LONG*: GLenum = GLenum(0x874E)
  GL_COMPRESSED_RGB8_ETC2*: GLenum = GLenum(0x9274)
  GL_COMPRESSED_SRGB8_ETC2*: GLenum = GLenum(0x9275)
  GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2*: GLenum = GLenum(0x9276)
  GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2*: GLenum = GLenum(0x9277)
  GL_COMPRESSED_RGBA8_ETC2_EAC*: GLenum = GLenum(0x9278)
  GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC*: GLenum = GLenum(0x9279)
  GL_COMPRESSED_R11_EAC*: GLenum = GLenum(0x9270)
  GL_COMPRESSED_SIGNED_R11_EAC*: GLenum = GLenum(0x9271)
  GL_COMPRESSED_RG11_EAC*: GLenum = GLenum(0x9272)
  GL_COMPRESSED_SIGNED_RG11_EAC*: GLenum = GLenum(0x9273)
  GL_PRIMITIVE_RESTART_FIXED_INDEX*: GLenum = GLenum(0x8D69)
  GL_ANY_SAMPLES_PASSED_CONSERVATIVE*: GLenum = GLenum(0x8D6A)
  GL_MAX_ELEMENT_INDEX*: GLenum = GLenum(0x8D6B)
  GL_COMPUTE_SHADER*: GLenum = GLenum(0x91B9)
  GL_MAX_COMPUTE_UNIFORM_BLOCKS*: GLenum = GLenum(0x91BB)
  GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS*: GLenum = GLenum(0x91BC)
  GL_MAX_COMPUTE_IMAGE_UNIFORMS*: GLenum = GLenum(0x91BD)
  GL_MAX_COMPUTE_SHARED_MEMORY_SIZE*: GLenum = GLenum(0x8262)
  GL_MAX_COMPUTE_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8263)
  GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS*: GLenum = GLenum(0x8264)
  GL_MAX_COMPUTE_ATOMIC_COUNTERS*: GLenum = GLenum(0x8265)
  GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8266)
  GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS*: GLenum = GLenum(0x90EB)
  GL_MAX_COMPUTE_WORK_GROUP_COUNT*: GLenum = GLenum(0x91BE)
  GL_MAX_COMPUTE_WORK_GROUP_SIZE*: GLenum = GLenum(0x91BF)
  GL_COMPUTE_WORK_GROUP_SIZE*: GLenum = GLenum(0x8267)
  GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER*: GLenum = GLenum(0x90EC)
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER*: GLenum = GLenum(0x90ED)
  GL_DISPATCH_INDIRECT_BUFFER*: GLenum = GLenum(0x90EE)
  GL_DISPATCH_INDIRECT_BUFFER_BINDING*: GLenum = GLenum(0x90EF)
  GL_COMPUTE_SHADER_BIT*: GLenum = GLenum(0x00000020)
  GL_DEBUG_OUTPUT_SYNCHRONOUS*: GLenum = GLenum(0x8242)
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH*: GLenum = GLenum(0x8243)
  GL_DEBUG_CALLBACK_FUNCTION*: GLenum = GLenum(0x8244)
  GL_DEBUG_CALLBACK_USER_PARAM*: GLenum = GLenum(0x8245)
  GL_DEBUG_SOURCE_API*: GLenum = GLenum(0x8246)
  GL_DEBUG_SOURCE_WINDOW_SYSTEM*: GLenum = GLenum(0x8247)
  GL_DEBUG_SOURCE_SHADER_COMPILER*: GLenum = GLenum(0x8248)
  GL_DEBUG_SOURCE_THIRD_PARTY*: GLenum = GLenum(0x8249)
  GL_DEBUG_SOURCE_APPLICATION*: GLenum = GLenum(0x824A)
  GL_DEBUG_SOURCE_OTHER*: GLenum = GLenum(0x824B)
  GL_DEBUG_TYPE_ERROR*: GLenum = GLenum(0x824C)
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR*: GLenum = GLenum(0x824D)
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR*: GLenum = GLenum(0x824E)
  GL_DEBUG_TYPE_PORTABILITY*: GLenum = GLenum(0x824F)
  GL_DEBUG_TYPE_PERFORMANCE*: GLenum = GLenum(0x8250)
  GL_DEBUG_TYPE_OTHER*: GLenum = GLenum(0x8251)
  GL_MAX_DEBUG_MESSAGE_LENGTH*: GLenum = GLenum(0x9143)
  GL_MAX_DEBUG_LOGGED_MESSAGES*: GLenum = GLenum(0x9144)
  GL_DEBUG_LOGGED_MESSAGES*: GLenum = GLenum(0x9145)
  GL_DEBUG_SEVERITY_HIGH*: GLenum = GLenum(0x9146)
  GL_DEBUG_SEVERITY_MEDIUM*: GLenum = GLenum(0x9147)
  GL_DEBUG_SEVERITY_LOW*: GLenum = GLenum(0x9148)
  GL_DEBUG_TYPE_MARKER*: GLenum = GLenum(0x8268)
  GL_DEBUG_TYPE_PUSH_GROUP*: GLenum = GLenum(0x8269)
  GL_DEBUG_TYPE_POP_GROUP*: GLenum = GLenum(0x826A)
  GL_DEBUG_SEVERITY_NOTIFICATION*: GLenum = GLenum(0x826B)
  GL_MAX_DEBUG_GROUP_STACK_DEPTH*: GLenum = GLenum(0x826C)
  GL_DEBUG_GROUP_STACK_DEPTH*: GLenum = GLenum(0x826D)
  GL_BUFFER*: GLenum = GLenum(0x82E0)
  GL_SHADER*: GLenum = GLenum(0x82E1)
  GL_PROGRAM*: GLenum = GLenum(0x82E2)
  GL_QUERY*: GLenum = GLenum(0x82E3)
  GL_PROGRAM_PIPELINE*: GLenum = GLenum(0x82E4)
  GL_SAMPLER*: GLenum = GLenum(0x82E6)
  GL_MAX_LABEL_LENGTH*: GLenum = GLenum(0x82E8)
  GL_DEBUG_OUTPUT*: GLenum = GLenum(0x92E0)
  GL_CONTEXT_FLAG_DEBUG_BIT*: GLenum = GLenum(0x00000002)
  GL_MAX_UNIFORM_LOCATIONS*: GLenum = GLenum(0x826E)
  GL_FRAMEBUFFER_DEFAULT_WIDTH*: GLenum = GLenum(0x9310)
  GL_FRAMEBUFFER_DEFAULT_HEIGHT*: GLenum = GLenum(0x9311)
  GL_FRAMEBUFFER_DEFAULT_LAYERS*: GLenum = GLenum(0x9312)
  GL_FRAMEBUFFER_DEFAULT_SAMPLES*: GLenum = GLenum(0x9313)
  GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS*: GLenum = GLenum(0x9314)
  GL_MAX_FRAMEBUFFER_WIDTH*: GLenum = GLenum(0x9315)
  GL_MAX_FRAMEBUFFER_HEIGHT*: GLenum = GLenum(0x9316)
  GL_MAX_FRAMEBUFFER_LAYERS*: GLenum = GLenum(0x9317)
  GL_MAX_FRAMEBUFFER_SAMPLES*: GLenum = GLenum(0x9318)
  GL_INTERNALFORMAT_SUPPORTED*: GLenum = GLenum(0x826F)
  GL_INTERNALFORMAT_PREFERRED*: GLenum = GLenum(0x8270)
  GL_INTERNALFORMAT_RED_SIZE*: GLenum = GLenum(0x8271)
  GL_INTERNALFORMAT_GREEN_SIZE*: GLenum = GLenum(0x8272)
  GL_INTERNALFORMAT_BLUE_SIZE*: GLenum = GLenum(0x8273)
  GL_INTERNALFORMAT_ALPHA_SIZE*: GLenum = GLenum(0x8274)
  GL_INTERNALFORMAT_DEPTH_SIZE*: GLenum = GLenum(0x8275)
  GL_INTERNALFORMAT_STENCIL_SIZE*: GLenum = GLenum(0x8276)
  GL_INTERNALFORMAT_SHARED_SIZE*: GLenum = GLenum(0x8277)
  GL_INTERNALFORMAT_RED_TYPE*: GLenum = GLenum(0x8278)
  GL_INTERNALFORMAT_GREEN_TYPE*: GLenum = GLenum(0x8279)
  GL_INTERNALFORMAT_BLUE_TYPE*: GLenum = GLenum(0x827A)
  GL_INTERNALFORMAT_ALPHA_TYPE*: GLenum = GLenum(0x827B)
  GL_INTERNALFORMAT_DEPTH_TYPE*: GLenum = GLenum(0x827C)
  GL_INTERNALFORMAT_STENCIL_TYPE*: GLenum = GLenum(0x827D)
  GL_MAX_WIDTH*: GLenum = GLenum(0x827E)
  GL_MAX_HEIGHT*: GLenum = GLenum(0x827F)
  GL_MAX_DEPTH*: GLenum = GLenum(0x8280)
  GL_MAX_LAYERS*: GLenum = GLenum(0x8281)
  GL_MAX_COMBINED_DIMENSIONS*: GLenum = GLenum(0x8282)
  GL_COLOR_COMPONENTS*: GLenum = GLenum(0x8283)
  GL_DEPTH_COMPONENTS*: GLenum = GLenum(0x8284)
  GL_STENCIL_COMPONENTS*: GLenum = GLenum(0x8285)
  GL_COLOR_RENDERABLE*: GLenum = GLenum(0x8286)
  GL_DEPTH_RENDERABLE*: GLenum = GLenum(0x8287)
  GL_STENCIL_RENDERABLE*: GLenum = GLenum(0x8288)
  GL_FRAMEBUFFER_RENDERABLE*: GLenum = GLenum(0x8289)
  GL_FRAMEBUFFER_RENDERABLE_LAYERED*: GLenum = GLenum(0x828A)
  GL_FRAMEBUFFER_BLEND*: GLenum = GLenum(0x828B)
  GL_READ_PIXELS*: GLenum = GLenum(0x828C)
  GL_READ_PIXELS_FORMAT*: GLenum = GLenum(0x828D)
  GL_READ_PIXELS_TYPE*: GLenum = GLenum(0x828E)
  GL_TEXTURE_IMAGE_FORMAT*: GLenum = GLenum(0x828F)
  GL_TEXTURE_IMAGE_TYPE*: GLenum = GLenum(0x8290)
  GL_GET_TEXTURE_IMAGE_FORMAT*: GLenum = GLenum(0x8291)
  GL_GET_TEXTURE_IMAGE_TYPE*: GLenum = GLenum(0x8292)
  GL_MIPMAP*: GLenum = GLenum(0x8293)
  GL_MANUAL_GENERATE_MIPMAP*: GLenum = GLenum(0x8294)
  GL_AUTO_GENERATE_MIPMAP*: GLenum = GLenum(0x8295)
  GL_COLOR_ENCODING*: GLenum = GLenum(0x8296)
  GL_SRGB_READ*: GLenum = GLenum(0x8297)
  GL_SRGB_WRITE*: GLenum = GLenum(0x8298)
  GL_FILTER*: GLenum = GLenum(0x829A)
  GL_VERTEX_TEXTURE*: GLenum = GLenum(0x829B)
  GL_TESS_CONTROL_TEXTURE*: GLenum = GLenum(0x829C)
  GL_TESS_EVALUATION_TEXTURE*: GLenum = GLenum(0x829D)
  GL_GEOMETRY_TEXTURE*: GLenum = GLenum(0x829E)
  GL_FRAGMENT_TEXTURE*: GLenum = GLenum(0x829F)
  GL_COMPUTE_TEXTURE*: GLenum = GLenum(0x82A0)
  GL_TEXTURE_SHADOW*: GLenum = GLenum(0x82A1)
  GL_TEXTURE_GATHER*: GLenum = GLenum(0x82A2)
  GL_TEXTURE_GATHER_SHADOW*: GLenum = GLenum(0x82A3)
  GL_SHADER_IMAGE_LOAD*: GLenum = GLenum(0x82A4)
  GL_SHADER_IMAGE_STORE*: GLenum = GLenum(0x82A5)
  GL_SHADER_IMAGE_ATOMIC*: GLenum = GLenum(0x82A6)
  GL_IMAGE_TEXEL_SIZE*: GLenum = GLenum(0x82A7)
  GL_IMAGE_COMPATIBILITY_CLASS*: GLenum = GLenum(0x82A8)
  GL_IMAGE_PIXEL_FORMAT*: GLenum = GLenum(0x82A9)
  GL_IMAGE_PIXEL_TYPE*: GLenum = GLenum(0x82AA)
  GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST*: GLenum = GLenum(0x82AC)
  GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST*: GLenum = GLenum(0x82AD)
  GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE*: GLenum = GLenum(0x82AE)
  GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE*: GLenum = GLenum(0x82AF)
  GL_TEXTURE_COMPRESSED_BLOCK_WIDTH*: GLenum = GLenum(0x82B1)
  GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT*: GLenum = GLenum(0x82B2)
  GL_TEXTURE_COMPRESSED_BLOCK_SIZE*: GLenum = GLenum(0x82B3)
  GL_CLEAR_BUFFER*: GLenum = GLenum(0x82B4)
  GL_TEXTURE_VIEW*: GLenum = GLenum(0x82B5)
  GL_VIEW_COMPATIBILITY_CLASS*: GLenum = GLenum(0x82B6)
  GL_FULL_SUPPORT*: GLenum = GLenum(0x82B7)
  GL_CAVEAT_SUPPORT*: GLenum = GLenum(0x82B8)
  GL_IMAGE_CLASS_4_X_32*: GLenum = GLenum(0x82B9)
  GL_IMAGE_CLASS_2_X_32*: GLenum = GLenum(0x82BA)
  GL_IMAGE_CLASS_1_X_32*: GLenum = GLenum(0x82BB)
  GL_IMAGE_CLASS_4_X_16*: GLenum = GLenum(0x82BC)
  GL_IMAGE_CLASS_2_X_16*: GLenum = GLenum(0x82BD)
  GL_IMAGE_CLASS_1_X_16*: GLenum = GLenum(0x82BE)
  GL_IMAGE_CLASS_4_X_8*: GLenum = GLenum(0x82BF)
  GL_IMAGE_CLASS_2_X_8*: GLenum = GLenum(0x82C0)
  GL_IMAGE_CLASS_1_X_8*: GLenum = GLenum(0x82C1)
  GL_IMAGE_CLASS_11_11_10*: GLenum = GLenum(0x82C2)
  GL_IMAGE_CLASS_10_10_10_2*: GLenum = GLenum(0x82C3)
  GL_VIEW_CLASS_128_BITS*: GLenum = GLenum(0x82C4)
  GL_VIEW_CLASS_96_BITS*: GLenum = GLenum(0x82C5)
  GL_VIEW_CLASS_64_BITS*: GLenum = GLenum(0x82C6)
  GL_VIEW_CLASS_48_BITS*: GLenum = GLenum(0x82C7)
  GL_VIEW_CLASS_32_BITS*: GLenum = GLenum(0x82C8)
  GL_VIEW_CLASS_24_BITS*: GLenum = GLenum(0x82C9)
  GL_VIEW_CLASS_16_BITS*: GLenum = GLenum(0x82CA)
  GL_VIEW_CLASS_8_BITS*: GLenum = GLenum(0x82CB)
  GL_VIEW_CLASS_S3TC_DXT1_RGB*: GLenum = GLenum(0x82CC)
  GL_VIEW_CLASS_S3TC_DXT1_RGBA*: GLenum = GLenum(0x82CD)
  GL_VIEW_CLASS_S3TC_DXT3_RGBA*: GLenum = GLenum(0x82CE)
  GL_VIEW_CLASS_S3TC_DXT5_RGBA*: GLenum = GLenum(0x82CF)
  GL_VIEW_CLASS_RGTC1_RED*: GLenum = GLenum(0x82D0)
  GL_VIEW_CLASS_RGTC2_RG*: GLenum = GLenum(0x82D1)
  GL_VIEW_CLASS_BPTC_UNORM*: GLenum = GLenum(0x82D2)
  GL_VIEW_CLASS_BPTC_FLOAT*: GLenum = GLenum(0x82D3)
  GL_UNIFORM*: GLenum = GLenum(0x92E1)
  GL_UNIFORM_BLOCK*: GLenum = GLenum(0x92E2)
  GL_PROGRAM_INPUT*: GLenum = GLenum(0x92E3)
  GL_PROGRAM_OUTPUT*: GLenum = GLenum(0x92E4)
  GL_BUFFER_VARIABLE*: GLenum = GLenum(0x92E5)
  GL_SHADER_STORAGE_BLOCK*: GLenum = GLenum(0x92E6)
  GL_VERTEX_SUBROUTINE*: GLenum = GLenum(0x92E8)
  GL_TESS_CONTROL_SUBROUTINE*: GLenum = GLenum(0x92E9)
  GL_TESS_EVALUATION_SUBROUTINE*: GLenum = GLenum(0x92EA)
  GL_GEOMETRY_SUBROUTINE*: GLenum = GLenum(0x92EB)
  GL_FRAGMENT_SUBROUTINE*: GLenum = GLenum(0x92EC)
  GL_COMPUTE_SUBROUTINE*: GLenum = GLenum(0x92ED)
  GL_VERTEX_SUBROUTINE_UNIFORM*: GLenum = GLenum(0x92EE)
  GL_TESS_CONTROL_SUBROUTINE_UNIFORM*: GLenum = GLenum(0x92EF)
  GL_TESS_EVALUATION_SUBROUTINE_UNIFORM*: GLenum = GLenum(0x92F0)
  GL_GEOMETRY_SUBROUTINE_UNIFORM*: GLenum = GLenum(0x92F1)
  GL_FRAGMENT_SUBROUTINE_UNIFORM*: GLenum = GLenum(0x92F2)
  GL_COMPUTE_SUBROUTINE_UNIFORM*: GLenum = GLenum(0x92F3)
  GL_TRANSFORM_FEEDBACK_VARYING*: GLenum = GLenum(0x92F4)
  GL_ACTIVE_RESOURCES*: GLenum = GLenum(0x92F5)
  GL_MAX_NAME_LENGTH*: GLenum = GLenum(0x92F6)
  GL_MAX_NUM_ACTIVE_VARIABLES*: GLenum = GLenum(0x92F7)
  GL_MAX_NUM_COMPATIBLE_SUBROUTINES*: GLenum = GLenum(0x92F8)
  GL_NAME_LENGTH*: GLenum = GLenum(0x92F9)
  GL_TYPE*: GLenum = GLenum(0x92FA)
  GL_ARRAY_SIZE*: GLenum = GLenum(0x92FB)
  GL_OFFSET*: GLenum = GLenum(0x92FC)
  GL_BLOCK_INDEX*: GLenum = GLenum(0x92FD)
  GL_ARRAY_STRIDE*: GLenum = GLenum(0x92FE)
  GL_MATRIX_STRIDE*: GLenum = GLenum(0x92FF)
  GL_IS_ROW_MAJOR*: GLenum = GLenum(0x9300)
  GL_ATOMIC_COUNTER_BUFFER_INDEX*: GLenum = GLenum(0x9301)
  GL_BUFFER_BINDING*: GLenum = GLenum(0x9302)
  GL_BUFFER_DATA_SIZE*: GLenum = GLenum(0x9303)
  GL_NUM_ACTIVE_VARIABLES*: GLenum = GLenum(0x9304)
  GL_ACTIVE_VARIABLES*: GLenum = GLenum(0x9305)
  GL_REFERENCED_BY_VERTEX_SHADER*: GLenum = GLenum(0x9306)
  GL_REFERENCED_BY_TESS_CONTROL_SHADER*: GLenum = GLenum(0x9307)
  GL_REFERENCED_BY_TESS_EVALUATION_SHADER*: GLenum = GLenum(0x9308)
  GL_REFERENCED_BY_GEOMETRY_SHADER*: GLenum = GLenum(0x9309)
  GL_REFERENCED_BY_FRAGMENT_SHADER*: GLenum = GLenum(0x930A)
  GL_REFERENCED_BY_COMPUTE_SHADER*: GLenum = GLenum(0x930B)
  GL_TOP_LEVEL_ARRAY_SIZE*: GLenum = GLenum(0x930C)
  GL_TOP_LEVEL_ARRAY_STRIDE*: GLenum = GLenum(0x930D)
  GL_LOCATION*: GLenum = GLenum(0x930E)
  GL_LOCATION_INDEX*: GLenum = GLenum(0x930F)
  GL_IS_PER_PATCH*: GLenum = GLenum(0x92E7)
  GL_SHADER_STORAGE_BUFFER*: GLenum = GLenum(0x90D2)
  GL_SHADER_STORAGE_BUFFER_BINDING*: GLenum = GLenum(0x90D3)
  GL_SHADER_STORAGE_BUFFER_START*: GLenum = GLenum(0x90D4)
  GL_SHADER_STORAGE_BUFFER_SIZE*: GLenum = GLenum(0x90D5)
  GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS*: GLenum = GLenum(0x90D6)
  GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS*: GLenum = GLenum(0x90D7)
  GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS*: GLenum = GLenum(0x90D8)
  GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS*: GLenum = GLenum(0x90D9)
  GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS*: GLenum = GLenum(0x90DA)
  GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS*: GLenum = GLenum(0x90DB)
  GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS*: GLenum = GLenum(0x90DC)
  GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS*: GLenum = GLenum(0x90DD)
  GL_MAX_SHADER_STORAGE_BLOCK_SIZE*: GLenum = GLenum(0x90DE)
  GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT*: GLenum = GLenum(0x90DF)
  GL_SHADER_STORAGE_BARRIER_BIT*: GLenum = GLenum(0x00002000)
  GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES*: GLenum = GLenum(0x8F39)
  GL_DEPTH_STENCIL_TEXTURE_MODE*: GLenum = GLenum(0x90EA)
  GL_TEXTURE_BUFFER_OFFSET*: GLenum = GLenum(0x919D)
  GL_TEXTURE_BUFFER_SIZE*: GLenum = GLenum(0x919E)
  GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT*: GLenum = GLenum(0x919F)
  GL_TEXTURE_VIEW_MIN_LEVEL*: GLenum = GLenum(0x82DB)
  GL_TEXTURE_VIEW_NUM_LEVELS*: GLenum = GLenum(0x82DC)
  GL_TEXTURE_VIEW_MIN_LAYER*: GLenum = GLenum(0x82DD)
  GL_TEXTURE_VIEW_NUM_LAYERS*: GLenum = GLenum(0x82DE)
  GL_TEXTURE_IMMUTABLE_LEVELS*: GLenum = GLenum(0x82DF)
  GL_VERTEX_ATTRIB_BINDING*: GLenum = GLenum(0x82D4)
  GL_VERTEX_ATTRIB_RELATIVE_OFFSET*: GLenum = GLenum(0x82D5)
  GL_VERTEX_BINDING_DIVISOR*: GLenum = GLenum(0x82D6)
  GL_VERTEX_BINDING_OFFSET*: GLenum = GLenum(0x82D7)
  GL_VERTEX_BINDING_STRIDE*: GLenum = GLenum(0x82D8)
  GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET*: GLenum = GLenum(0x82D9)
  GL_MAX_VERTEX_ATTRIB_BINDINGS*: GLenum = GLenum(0x82DA)
  GL_VERTEX_BINDING_BUFFER*: GLenum = GLenum(0x8F4F)
  GL_DISPLAY_LIST*: GLenum = GLenum(0x82E7)
  GL_MAX_VERTEX_ATTRIB_STRIDE*: GLenum = GLenum(0x82E5)
  GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED*: GLenum = GLenum(0x8221)
  GL_TEXTURE_BUFFER_BINDING*: GLenum = GLenum(0x8C2A)
  GL_MAP_PERSISTENT_BIT*: GLenum = GLenum(0x0040)
  GL_MAP_COHERENT_BIT*: GLenum = GLenum(0x0080)
  GL_DYNAMIC_STORAGE_BIT*: GLenum = GLenum(0x0100)
  GL_CLIENT_STORAGE_BIT*: GLenum = GLenum(0x0200)
  GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT*: GLenum = GLenum(0x00004000)
  GL_BUFFER_IMMUTABLE_STORAGE*: GLenum = GLenum(0x821F)
  GL_BUFFER_STORAGE_FLAGS*: GLenum = GLenum(0x8220)
  GL_CLEAR_TEXTURE*: GLenum = GLenum(0x9365)
  GL_LOCATION_COMPONENT*: GLenum = GLenum(0x934A)
  GL_TRANSFORM_FEEDBACK_BUFFER_INDEX*: GLenum = GLenum(0x934B)
  GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE*: GLenum = GLenum(0x934C)
  GL_QUERY_BUFFER*: GLenum = GLenum(0x9192)
  GL_QUERY_BUFFER_BARRIER_BIT*: GLenum = GLenum(0x00008000)
  GL_QUERY_BUFFER_BINDING*: GLenum = GLenum(0x9193)
  GL_QUERY_RESULT_NO_WAIT*: GLenum = GLenum(0x9194)
  GL_MIRROR_CLAMP_TO_EDGE*: GLenum = GLenum(0x8743)
  GL_CONTEXT_LOST*: GLenum = GLenum(0x0507)
  GL_NEGATIVE_ONE_TO_ONE*: GLenum = GLenum(0x935E)
  GL_ZERO_TO_ONE*: GLenum = GLenum(0x935F)
  GL_CLIP_ORIGIN*: GLenum = GLenum(0x935C)
  GL_CLIP_DEPTH_MODE*: GLenum = GLenum(0x935D)
  GL_QUERY_WAIT_INVERTED*: GLenum = GLenum(0x8E17)
  GL_QUERY_NO_WAIT_INVERTED*: GLenum = GLenum(0x8E18)
  GL_QUERY_BY_REGION_WAIT_INVERTED*: GLenum = GLenum(0x8E19)
  GL_QUERY_BY_REGION_NO_WAIT_INVERTED*: GLenum = GLenum(0x8E1A)
  GL_MAX_CULL_DISTANCES*: GLenum = GLenum(0x82F9)
  GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES*: GLenum = GLenum(0x82FA)
  GL_TEXTURE_TARGET*: GLenum = GLenum(0x1006)
  GL_QUERY_TARGET*: GLenum = GLenum(0x82EA)
  GL_GUILTY_CONTEXT_RESET*: GLenum = GLenum(0x8253)
  GL_INNOCENT_CONTEXT_RESET*: GLenum = GLenum(0x8254)
  GL_UNKNOWN_CONTEXT_RESET*: GLenum = GLenum(0x8255)
  GL_RESET_NOTIFICATION_STRATEGY*: GLenum = GLenum(0x8256)
  GL_LOSE_CONTEXT_ON_RESET*: GLenum = GLenum(0x8252)
  GL_NO_RESET_NOTIFICATION*: GLenum = GLenum(0x8261)
  GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT*: GLenum = GLenum(0x00000004)
  GL_COLOR_TABLE*: GLenum = GLenum(0x80D0)
  GL_POST_CONVOLUTION_COLOR_TABLE*: GLenum = GLenum(0x80D1)
  GL_POST_COLOR_MATRIX_COLOR_TABLE*: GLenum = GLenum(0x80D2)
  GL_PROXY_COLOR_TABLE*: GLenum = GLenum(0x80D3)
  GL_PROXY_POST_CONVOLUTION_COLOR_TABLE*: GLenum = GLenum(0x80D4)
  GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE*: GLenum = GLenum(0x80D5)
  GL_CONVOLUTION_1D*: GLenum = GLenum(0x8010)
  GL_CONVOLUTION_2D*: GLenum = GLenum(0x8011)
  GL_SEPARABLE_2D*: GLenum = GLenum(0x8012)
  GL_HISTOGRAM*: GLenum = GLenum(0x8024)
  GL_PROXY_HISTOGRAM*: GLenum = GLenum(0x8025)
  GL_MINMAX*: GLenum = GLenum(0x802E)
  GL_CONTEXT_RELEASE_BEHAVIOR*: GLenum = GLenum(0x82FB)
  GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH*: GLenum = GLenum(0x82FC)
  GL_SHADER_BINARY_FORMAT_SPIR_V*: GLenum = GLenum(0x9551)
  GL_SPIR_V_BINARY*: GLenum = GLenum(0x9552)
  GL_PARAMETER_BUFFER*: GLenum = GLenum(0x80EE)
  GL_PARAMETER_BUFFER_BINDING*: GLenum = GLenum(0x80EF)
  GL_CONTEXT_FLAG_NO_ERROR_BIT*: GLenum = GLenum(0x00000008)
  GL_VERTICES_SUBMITTED*: GLenum = GLenum(0x82EE)
  GL_PRIMITIVES_SUBMITTED*: GLenum = GLenum(0x82EF)
  GL_VERTEX_SHADER_INVOCATIONS*: GLenum = GLenum(0x82F0)
  GL_TESS_CONTROL_SHADER_PATCHES*: GLenum = GLenum(0x82F1)
  GL_TESS_EVALUATION_SHADER_INVOCATIONS*: GLenum = GLenum(0x82F2)
  GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED*: GLenum = GLenum(0x82F3)
  GL_FRAGMENT_SHADER_INVOCATIONS*: GLenum = GLenum(0x82F4)
  GL_COMPUTE_SHADER_INVOCATIONS*: GLenum = GLenum(0x82F5)
  GL_CLIPPING_INPUT_PRIMITIVES*: GLenum = GLenum(0x82F6)
  GL_CLIPPING_OUTPUT_PRIMITIVES*: GLenum = GLenum(0x82F7)
  GL_POLYGON_OFFSET_CLAMP*: GLenum = GLenum(0x8E1B)
  GL_SPIR_V_EXTENSIONS*: GLenum = GLenum(0x9553)
  GL_NUM_SPIR_V_EXTENSIONS*: GLenum = GLenum(0x9554)
  GL_TEXTURE_MAX_ANISOTROPY*: GLenum = GLenum(0x84FE)
  GL_MAX_TEXTURE_MAX_ANISOTROPY*: GLenum = GLenum(0x84FF)
  GL_TRANSFORM_FEEDBACK_OVERFLOW*: GLenum = GLenum(0x82EC)
  GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW*: GLenum = GLenum(0x82ED)


# Functions
var
  GLAD_GL_VERSION_1_0*: bool
  GLAD_GL_VERSION_1_1*: bool
  GLAD_GL_VERSION_1_2*: bool
  GLAD_GL_VERSION_1_3*: bool
  GLAD_GL_VERSION_1_4*: bool
  GLAD_GL_VERSION_1_5*: bool
  GLAD_GL_VERSION_2_0*: bool
  GLAD_GL_VERSION_2_1*: bool
  GLAD_GL_VERSION_3_0*: bool
  GLAD_GL_VERSION_3_1*: bool
  GLAD_GL_VERSION_3_2*: bool
  GLAD_GL_VERSION_3_3*: bool
  GLAD_GL_VERSION_4_0*: bool
  GLAD_GL_VERSION_4_1*: bool
  GLAD_GL_VERSION_4_2*: bool
  GLAD_GL_VERSION_4_3*: bool
  GLAD_GL_VERSION_4_4*: bool
  GLAD_GL_VERSION_4_5*: bool
  GLAD_GL_VERSION_4_6*: bool

  glCullFace*: proc (mode: GLenum) {.cdecl, gcsafe.}
  glFrontFace*: proc (mode: GLenum) {.cdecl, gcsafe.}
  glHint*: proc (target: GLenum, mode: GLenum) {.cdecl, gcsafe.}
  glLineWidth*: proc (width: GLfloat) {.cdecl, gcsafe.}
  glPointSize*: proc (size: GLfloat) {.cdecl, gcsafe.}
  glPolygonMode*: proc (face: GLenum, mode: GLenum) {.cdecl, gcsafe.}
  glScissor*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glTexParameterf*: proc (target: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glTexParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glTexParameteri*: proc (target: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glTexParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glTexImage1D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glDrawBuffer*: proc (buf: GLenum) {.cdecl, gcsafe.}
  glClear*: proc (mask: GLbitfield) {.cdecl, gcsafe.}
  glClearColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}
  glClearStencil*: proc (s: GLint) {.cdecl, gcsafe.}
  glClearDepth*: proc (depth: GLdouble) {.cdecl, gcsafe.}
  glStencilMask*: proc (mask: GLuint) {.cdecl, gcsafe.}
  glColorMask*: proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.cdecl, gcsafe.}
  glDepthMask*: proc (flag: GLboolean) {.cdecl, gcsafe.}
  glDisable*: proc (cap: GLenum) {.cdecl, gcsafe.}
  glEnable*: proc (cap: GLenum) {.cdecl, gcsafe.}
  glFinish*: proc () {.cdecl, gcsafe.}
  glFlush*: proc () {.cdecl, gcsafe.}
  glBlendFunc*: proc (sfactor: GLenum, dfactor: GLenum) {.cdecl, gcsafe.}
  glLogicOp*: proc (opcode: GLenum) {.cdecl, gcsafe.}
  glStencilFunc*: proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl, gcsafe.}
  glStencilOp*: proc (fail: GLenum, zfail: GLenum, zpass: GLenum) {.cdecl, gcsafe.}
  glDepthFunc*: proc (`func`: GLenum) {.cdecl, gcsafe.}
  glPixelStoref*: proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glPixelStorei*: proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glReadBuffer*: proc (src: GLenum) {.cdecl, gcsafe.}
  glReadPixels*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glGetBooleanv*: proc (pname: GLenum, data: ptr GLboolean) {.cdecl, gcsafe.}
  glGetDoublev*: proc (pname: GLenum, data: ptr GLdouble) {.cdecl, gcsafe.}
  glGetError*: proc (): GLenum {.cdecl, gcsafe.}
  glGetFloatv*: proc (pname: GLenum, data: ptr GLfloat) {.cdecl, gcsafe.}
  glGetIntegerv*: proc (pname: GLenum, data: ptr GLint) {.cdecl, gcsafe.}
  glGetString*: proc (name: GLenum): ptr GLubyte {.cdecl, gcsafe.}
  glGetTexImage*: proc (target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glGetTexParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetTexParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetTexLevelParameterfv*: proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetTexLevelParameteriv*: proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glIsEnabled*: proc (cap: GLenum): GLboolean {.cdecl, gcsafe.}
  glDepthRange*: proc (n: GLdouble, f: GLdouble) {.cdecl, gcsafe.}
  glViewport*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glNewList*: proc (list: GLuint, mode: GLenum) {.cdecl, gcsafe.}
  glEndList*: proc () {.cdecl, gcsafe.}
  glCallList*: proc (list: GLuint) {.cdecl, gcsafe.}
  glCallLists*: proc (n: GLsizei, `type`: GLenum, lists: pointer) {.cdecl, gcsafe.}
  glDeleteLists*: proc (list: GLuint, range: GLsizei) {.cdecl, gcsafe.}
  glGenLists*: proc (range: GLsizei): GLuint {.cdecl, gcsafe.}
  glListBase*: proc (base: GLuint) {.cdecl, gcsafe.}
  glBegin*: proc (mode: GLenum) {.cdecl, gcsafe.}
  glBitmap*: proc (width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: ptr GLubyte) {.cdecl, gcsafe.}
  glColor3b*: proc (red: GLbyte, green: GLbyte, blue: GLbyte) {.cdecl, gcsafe.}
  glColor3bv*: proc (v: ptr GLbyte) {.cdecl, gcsafe.}
  glColor3d*: proc (red: GLdouble, green: GLdouble, blue: GLdouble) {.cdecl, gcsafe.}
  glColor3dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glColor3f*: proc (red: GLfloat, green: GLfloat, blue: GLfloat) {.cdecl, gcsafe.}
  glColor3fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glColor3i*: proc (red: GLint, green: GLint, blue: GLint) {.cdecl, gcsafe.}
  glColor3iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glColor3s*: proc (red: GLshort, green: GLshort, blue: GLshort) {.cdecl, gcsafe.}
  glColor3sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glColor3ub*: proc (red: GLubyte, green: GLubyte, blue: GLubyte) {.cdecl, gcsafe.}
  glColor3ubv*: proc (v: ptr GLubyte) {.cdecl, gcsafe.}
  glColor3ui*: proc (red: GLuint, green: GLuint, blue: GLuint) {.cdecl, gcsafe.}
  glColor3uiv*: proc (v: ptr GLuint) {.cdecl, gcsafe.}
  glColor3us*: proc (red: GLushort, green: GLushort, blue: GLushort) {.cdecl, gcsafe.}
  glColor3usv*: proc (v: ptr GLushort) {.cdecl, gcsafe.}
  glColor4b*: proc (red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) {.cdecl, gcsafe.}
  glColor4bv*: proc (v: ptr GLbyte) {.cdecl, gcsafe.}
  glColor4d*: proc (red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) {.cdecl, gcsafe.}
  glColor4dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glColor4f*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}
  glColor4fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glColor4i*: proc (red: GLint, green: GLint, blue: GLint, alpha: GLint) {.cdecl, gcsafe.}
  glColor4iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glColor4s*: proc (red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) {.cdecl, gcsafe.}
  glColor4sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glColor4ub*: proc (red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) {.cdecl, gcsafe.}
  glColor4ubv*: proc (v: ptr GLubyte) {.cdecl, gcsafe.}
  glColor4ui*: proc (red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) {.cdecl, gcsafe.}
  glColor4uiv*: proc (v: ptr GLuint) {.cdecl, gcsafe.}
  glColor4us*: proc (red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) {.cdecl, gcsafe.}
  glColor4usv*: proc (v: ptr GLushort) {.cdecl, gcsafe.}
  glEdgeFlag*: proc (flag: GLboolean) {.cdecl, gcsafe.}
  glEdgeFlagv*: proc (flag: ptr GLboolean) {.cdecl, gcsafe.}
  glEnd*: proc () {.cdecl, gcsafe.}
  glIndexd*: proc (c: GLdouble) {.cdecl, gcsafe.}
  glIndexdv*: proc (c: ptr GLdouble) {.cdecl, gcsafe.}
  glIndexf*: proc (c: GLfloat) {.cdecl, gcsafe.}
  glIndexfv*: proc (c: ptr GLfloat) {.cdecl, gcsafe.}
  glIndexi*: proc (c: GLint) {.cdecl, gcsafe.}
  glIndexiv*: proc (c: ptr GLint) {.cdecl, gcsafe.}
  glIndexs*: proc (c: GLshort) {.cdecl, gcsafe.}
  glIndexsv*: proc (c: ptr GLshort) {.cdecl, gcsafe.}
  glNormal3b*: proc (nx: GLbyte, ny: GLbyte, nz: GLbyte) {.cdecl, gcsafe.}
  glNormal3bv*: proc (v: ptr GLbyte) {.cdecl, gcsafe.}
  glNormal3d*: proc (nx: GLdouble, ny: GLdouble, nz: GLdouble) {.cdecl, gcsafe.}
  glNormal3dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glNormal3f*: proc (nx: GLfloat, ny: GLfloat, nz: GLfloat) {.cdecl, gcsafe.}
  glNormal3fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glNormal3i*: proc (nx: GLint, ny: GLint, nz: GLint) {.cdecl, gcsafe.}
  glNormal3iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glNormal3s*: proc (nx: GLshort, ny: GLshort, nz: GLshort) {.cdecl, gcsafe.}
  glNormal3sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glRasterPos2d*: proc (x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}
  glRasterPos2dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glRasterPos2f*: proc (x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}
  glRasterPos2fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glRasterPos2i*: proc (x: GLint, y: GLint) {.cdecl, gcsafe.}
  glRasterPos2iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glRasterPos2s*: proc (x: GLshort, y: GLshort) {.cdecl, gcsafe.}
  glRasterPos2sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glRasterPos3d*: proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}
  glRasterPos3dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glRasterPos3f*: proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}
  glRasterPos3fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glRasterPos3i*: proc (x: GLint, y: GLint, z: GLint) {.cdecl, gcsafe.}
  glRasterPos3iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glRasterPos3s*: proc (x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}
  glRasterPos3sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glRasterPos4d*: proc (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}
  glRasterPos4dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glRasterPos4f*: proc (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}
  glRasterPos4fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glRasterPos4i*: proc (x: GLint, y: GLint, z: GLint, w: GLint) {.cdecl, gcsafe.}
  glRasterPos4iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glRasterPos4s*: proc (x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.cdecl, gcsafe.}
  glRasterPos4sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glRectd*: proc (x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) {.cdecl, gcsafe.}
  glRectdv*: proc (v1: ptr GLdouble, v2: ptr GLdouble) {.cdecl, gcsafe.}
  glRectf*: proc (x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) {.cdecl, gcsafe.}
  glRectfv*: proc (v1: ptr GLfloat, v2: ptr GLfloat) {.cdecl, gcsafe.}
  glRecti*: proc (x1: GLint, y1: GLint, x2: GLint, y2: GLint) {.cdecl, gcsafe.}
  glRectiv*: proc (v1: ptr GLint, v2: ptr GLint) {.cdecl, gcsafe.}
  glRects*: proc (x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) {.cdecl, gcsafe.}
  glRectsv*: proc (v1: ptr GLshort, v2: ptr GLshort) {.cdecl, gcsafe.}
  glTexCoord1d*: proc (s: GLdouble) {.cdecl, gcsafe.}
  glTexCoord1dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glTexCoord1f*: proc (s: GLfloat) {.cdecl, gcsafe.}
  glTexCoord1fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glTexCoord1i*: proc (s: GLint) {.cdecl, gcsafe.}
  glTexCoord1iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glTexCoord1s*: proc (s: GLshort) {.cdecl, gcsafe.}
  glTexCoord1sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glTexCoord2d*: proc (s: GLdouble, t: GLdouble) {.cdecl, gcsafe.}
  glTexCoord2dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glTexCoord2f*: proc (s: GLfloat, t: GLfloat) {.cdecl, gcsafe.}
  glTexCoord2fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glTexCoord2i*: proc (s: GLint, t: GLint) {.cdecl, gcsafe.}
  glTexCoord2iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glTexCoord2s*: proc (s: GLshort, t: GLshort) {.cdecl, gcsafe.}
  glTexCoord2sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glTexCoord3d*: proc (s: GLdouble, t: GLdouble, r: GLdouble) {.cdecl, gcsafe.}
  glTexCoord3dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glTexCoord3f*: proc (s: GLfloat, t: GLfloat, r: GLfloat) {.cdecl, gcsafe.}
  glTexCoord3fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glTexCoord3i*: proc (s: GLint, t: GLint, r: GLint) {.cdecl, gcsafe.}
  glTexCoord3iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glTexCoord3s*: proc (s: GLshort, t: GLshort, r: GLshort) {.cdecl, gcsafe.}
  glTexCoord3sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glTexCoord4d*: proc (s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) {.cdecl, gcsafe.}
  glTexCoord4dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glTexCoord4f*: proc (s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) {.cdecl, gcsafe.}
  glTexCoord4fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glTexCoord4i*: proc (s: GLint, t: GLint, r: GLint, q: GLint) {.cdecl, gcsafe.}
  glTexCoord4iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glTexCoord4s*: proc (s: GLshort, t: GLshort, r: GLshort, q: GLshort) {.cdecl, gcsafe.}
  glTexCoord4sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glVertex2d*: proc (x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}
  glVertex2dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertex2f*: proc (x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}
  glVertex2fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertex2i*: proc (x: GLint, y: GLint) {.cdecl, gcsafe.}
  glVertex2iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glVertex2s*: proc (x: GLshort, y: GLshort) {.cdecl, gcsafe.}
  glVertex2sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glVertex3d*: proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}
  glVertex3dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertex3f*: proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}
  glVertex3fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertex3i*: proc (x: GLint, y: GLint, z: GLint) {.cdecl, gcsafe.}
  glVertex3iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glVertex3s*: proc (x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}
  glVertex3sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glVertex4d*: proc (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}
  glVertex4dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertex4f*: proc (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}
  glVertex4fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertex4i*: proc (x: GLint, y: GLint, z: GLint, w: GLint) {.cdecl, gcsafe.}
  glVertex4iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glVertex4s*: proc (x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.cdecl, gcsafe.}
  glVertex4sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glClipPlane*: proc (plane: GLenum, equation: ptr GLdouble) {.cdecl, gcsafe.}
  glColorMaterial*: proc (face: GLenum, mode: GLenum) {.cdecl, gcsafe.}
  glFogf*: proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glFogfv*: proc (pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glFogi*: proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glFogiv*: proc (pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glLightf*: proc (light: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glLightfv*: proc (light: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glLighti*: proc (light: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glLightiv*: proc (light: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glLightModelf*: proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glLightModelfv*: proc (pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glLightModeli*: proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glLightModeliv*: proc (pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glLineStipple*: proc (factor: GLint, pattern: GLushort) {.cdecl, gcsafe.}
  glMaterialf*: proc (face: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glMaterialfv*: proc (face: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glMateriali*: proc (face: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glMaterialiv*: proc (face: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glPolygonStipple*: proc (mask: ptr GLubyte) {.cdecl, gcsafe.}
  glShadeModel*: proc (mode: GLenum) {.cdecl, gcsafe.}
  glTexEnvf*: proc (target: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glTexEnvfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glTexEnvi*: proc (target: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glTexEnviv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glTexGend*: proc (coord: GLenum, pname: GLenum, param: GLdouble) {.cdecl, gcsafe.}
  glTexGendv*: proc (coord: GLenum, pname: GLenum, params: ptr GLdouble) {.cdecl, gcsafe.}
  glTexGenf*: proc (coord: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glTexGenfv*: proc (coord: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glTexGeni*: proc (coord: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glTexGeniv*: proc (coord: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glFeedbackBuffer*: proc (size: GLsizei, `type`: GLenum, buffer: ptr GLfloat) {.cdecl, gcsafe.}
  glSelectBuffer*: proc (size: GLsizei, buffer: ptr GLuint) {.cdecl, gcsafe.}
  glRenderMode*: proc (mode: GLenum): GLint {.cdecl, gcsafe.}
  glInitNames*: proc () {.cdecl, gcsafe.}
  glLoadName*: proc (name: GLuint) {.cdecl, gcsafe.}
  glPassThrough*: proc (token: GLfloat) {.cdecl, gcsafe.}
  glPopName*: proc () {.cdecl, gcsafe.}
  glPushName*: proc (name: GLuint) {.cdecl, gcsafe.}
  glClearAccum*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}
  glClearIndex*: proc (c: GLfloat) {.cdecl, gcsafe.}
  glIndexMask*: proc (mask: GLuint) {.cdecl, gcsafe.}
  glAccum*: proc (op: GLenum, value: GLfloat) {.cdecl, gcsafe.}
  glPopAttrib*: proc () {.cdecl, gcsafe.}
  glPushAttrib*: proc (mask: GLbitfield) {.cdecl, gcsafe.}
  glMap1d*: proc (target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: ptr GLdouble) {.cdecl, gcsafe.}
  glMap1f*: proc (target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: ptr GLfloat) {.cdecl, gcsafe.}
  glMap2d*: proc (target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: ptr GLdouble) {.cdecl, gcsafe.}
  glMap2f*: proc (target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: ptr GLfloat) {.cdecl, gcsafe.}
  glMapGrid1d*: proc (un: GLint, u1: GLdouble, u2: GLdouble) {.cdecl, gcsafe.}
  glMapGrid1f*: proc (un: GLint, u1: GLfloat, u2: GLfloat) {.cdecl, gcsafe.}
  glMapGrid2d*: proc (un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) {.cdecl, gcsafe.}
  glMapGrid2f*: proc (un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) {.cdecl, gcsafe.}
  glEvalCoord1d*: proc (u: GLdouble) {.cdecl, gcsafe.}
  glEvalCoord1dv*: proc (u: ptr GLdouble) {.cdecl, gcsafe.}
  glEvalCoord1f*: proc (u: GLfloat) {.cdecl, gcsafe.}
  glEvalCoord1fv*: proc (u: ptr GLfloat) {.cdecl, gcsafe.}
  glEvalCoord2d*: proc (u: GLdouble, v: GLdouble) {.cdecl, gcsafe.}
  glEvalCoord2dv*: proc (u: ptr GLdouble) {.cdecl, gcsafe.}
  glEvalCoord2f*: proc (u: GLfloat, v: GLfloat) {.cdecl, gcsafe.}
  glEvalCoord2fv*: proc (u: ptr GLfloat) {.cdecl, gcsafe.}
  glEvalMesh1*: proc (mode: GLenum, i1: GLint, i2: GLint) {.cdecl, gcsafe.}
  glEvalPoint1*: proc (i: GLint) {.cdecl, gcsafe.}
  glEvalMesh2*: proc (mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) {.cdecl, gcsafe.}
  glEvalPoint2*: proc (i: GLint, j: GLint) {.cdecl, gcsafe.}
  glAlphaFunc*: proc (`func`: GLenum, `ref`: GLfloat) {.cdecl, gcsafe.}
  glPixelZoom*: proc (xfactor: GLfloat, yfactor: GLfloat) {.cdecl, gcsafe.}
  glPixelTransferf*: proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glPixelTransferi*: proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glPixelMapfv*: proc (map: GLenum, mapsize: GLsizei, values: ptr GLfloat) {.cdecl, gcsafe.}
  glPixelMapuiv*: proc (map: GLenum, mapsize: GLsizei, values: ptr GLuint) {.cdecl, gcsafe.}
  glPixelMapusv*: proc (map: GLenum, mapsize: GLsizei, values: ptr GLushort) {.cdecl, gcsafe.}
  glCopyPixels*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, `type`: GLenum) {.cdecl, gcsafe.}
  glDrawPixels*: proc (width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glGetClipPlane*: proc (plane: GLenum, equation: ptr GLdouble) {.cdecl, gcsafe.}
  glGetLightfv*: proc (light: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetLightiv*: proc (light: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetMapdv*: proc (target: GLenum, query: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}
  glGetMapfv*: proc (target: GLenum, query: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}
  glGetMapiv*: proc (target: GLenum, query: GLenum, v: ptr GLint) {.cdecl, gcsafe.}
  glGetMaterialfv*: proc (face: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetMaterialiv*: proc (face: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetPixelMapfv*: proc (map: GLenum, values: ptr GLfloat) {.cdecl, gcsafe.}
  glGetPixelMapuiv*: proc (map: GLenum, values: ptr GLuint) {.cdecl, gcsafe.}
  glGetPixelMapusv*: proc (map: GLenum, values: ptr GLushort) {.cdecl, gcsafe.}
  glGetPolygonStipple*: proc (mask: ptr GLubyte) {.cdecl, gcsafe.}
  glGetTexEnvfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetTexEnviv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetTexGendv*: proc (coord: GLenum, pname: GLenum, params: ptr GLdouble) {.cdecl, gcsafe.}
  glGetTexGenfv*: proc (coord: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetTexGeniv*: proc (coord: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glIsList*: proc (list: GLuint): GLboolean {.cdecl, gcsafe.}
  glFrustum*: proc (left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) {.cdecl, gcsafe.}
  glLoadIdentity*: proc () {.cdecl, gcsafe.}
  glLoadMatrixf*: proc (m: ptr GLfloat) {.cdecl, gcsafe.}
  glLoadMatrixd*: proc (m: ptr GLdouble) {.cdecl, gcsafe.}
  glMatrixMode*: proc (mode: GLenum) {.cdecl, gcsafe.}
  glMultMatrixf*: proc (m: ptr GLfloat) {.cdecl, gcsafe.}
  glMultMatrixd*: proc (m: ptr GLdouble) {.cdecl, gcsafe.}
  glOrtho*: proc (left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) {.cdecl, gcsafe.}
  glPopMatrix*: proc () {.cdecl, gcsafe.}
  glPushMatrix*: proc () {.cdecl, gcsafe.}
  glRotated*: proc (angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}
  glRotatef*: proc (angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}
  glScaled*: proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}
  glScalef*: proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}
  glTranslated*: proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}
  glTranslatef*: proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}
  glDrawArrays*: proc (mode: GLenum, first: GLint, count: GLsizei) {.cdecl, gcsafe.}
  glDrawElements*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer) {.cdecl, gcsafe.}
  glGetPointerv*: proc (pname: GLenum, params: ptr pointer) {.cdecl, gcsafe.}
  glPolygonOffset*: proc (factor: GLfloat, units: GLfloat) {.cdecl, gcsafe.}
  glCopyTexImage1D*: proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) {.cdecl, gcsafe.}
  glCopyTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.cdecl, gcsafe.}
  glCopyTexSubImage1D*: proc (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.cdecl, gcsafe.}
  glCopyTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glTexSubImage1D*: proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glBindTexture*: proc (target: GLenum, texture: GLuint) {.cdecl, gcsafe.}
  glDeleteTextures*: proc (n: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}
  glGenTextures*: proc (n: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}
  glIsTexture*: proc (texture: GLuint): GLboolean {.cdecl, gcsafe.}
  glArrayElement*: proc (i: GLint) {.cdecl, gcsafe.}
  glColorPointer*: proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glDisableClientState*: proc (array: GLenum) {.cdecl, gcsafe.}
  glEdgeFlagPointer*: proc (stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glEnableClientState*: proc (array: GLenum) {.cdecl, gcsafe.}
  glIndexPointer*: proc (`type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glInterleavedArrays*: proc (format: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glNormalPointer*: proc (`type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glTexCoordPointer*: proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glVertexPointer*: proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glAreTexturesResident*: proc (n: GLsizei, textures: ptr GLuint, residences: ptr GLboolean): GLboolean {.cdecl, gcsafe.}
  glPrioritizeTextures*: proc (n: GLsizei, textures: ptr GLuint, priorities: ptr GLfloat) {.cdecl, gcsafe.}
  glIndexub*: proc (c: GLubyte) {.cdecl, gcsafe.}
  glIndexubv*: proc (c: ptr GLubyte) {.cdecl, gcsafe.}
  glPopClientAttrib*: proc () {.cdecl, gcsafe.}
  glPushClientAttrib*: proc (mask: GLbitfield) {.cdecl, gcsafe.}
  glDrawRangeElements*: proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer) {.cdecl, gcsafe.}
  glTexImage3D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glTexSubImage3D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glCopyTexSubImage3D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glActiveTexture*: proc (texture: GLenum) {.cdecl, gcsafe.}
  glSampleCoverage*: proc (value: GLfloat, invert: GLboolean) {.cdecl, gcsafe.}
  glCompressedTexImage3D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}
  glCompressedTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}
  glCompressedTexImage1D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}
  glCompressedTexSubImage3D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}
  glCompressedTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}
  glCompressedTexSubImage1D*: proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}
  glGetCompressedTexImage*: proc (target: GLenum, level: GLint, img: pointer) {.cdecl, gcsafe.}
  glClientActiveTexture*: proc (texture: GLenum) {.cdecl, gcsafe.}
  glMultiTexCoord1d*: proc (target: GLenum, s: GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord1dv*: proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord1f*: proc (target: GLenum, s: GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord1fv*: proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord1i*: proc (target: GLenum, s: GLint) {.cdecl, gcsafe.}
  glMultiTexCoord1iv*: proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}
  glMultiTexCoord1s*: proc (target: GLenum, s: GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord1sv*: proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord2d*: proc (target: GLenum, s: GLdouble, t: GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord2dv*: proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord2f*: proc (target: GLenum, s: GLfloat, t: GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord2fv*: proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord2i*: proc (target: GLenum, s: GLint, t: GLint) {.cdecl, gcsafe.}
  glMultiTexCoord2iv*: proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}
  glMultiTexCoord2s*: proc (target: GLenum, s: GLshort, t: GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord2sv*: proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord3d*: proc (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord3dv*: proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord3f*: proc (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord3fv*: proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord3i*: proc (target: GLenum, s: GLint, t: GLint, r: GLint) {.cdecl, gcsafe.}
  glMultiTexCoord3iv*: proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}
  glMultiTexCoord3s*: proc (target: GLenum, s: GLshort, t: GLshort, r: GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord3sv*: proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord4d*: proc (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord4dv*: proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}
  glMultiTexCoord4f*: proc (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord4fv*: proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}
  glMultiTexCoord4i*: proc (target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) {.cdecl, gcsafe.}
  glMultiTexCoord4iv*: proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}
  glMultiTexCoord4s*: proc (target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) {.cdecl, gcsafe.}
  glMultiTexCoord4sv*: proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}
  glLoadTransposeMatrixf*: proc (m: ptr GLfloat) {.cdecl, gcsafe.}
  glLoadTransposeMatrixd*: proc (m: ptr GLdouble) {.cdecl, gcsafe.}
  glMultTransposeMatrixf*: proc (m: ptr GLfloat) {.cdecl, gcsafe.}
  glMultTransposeMatrixd*: proc (m: ptr GLdouble) {.cdecl, gcsafe.}
  glBlendFuncSeparate*: proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.cdecl, gcsafe.}
  glMultiDrawArrays*: proc (mode: GLenum, first: ptr GLint, count: ptr GLsizei, drawcount: GLsizei) {.cdecl, gcsafe.}
  glMultiDrawElements*: proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei) {.cdecl, gcsafe.}
  glPointParameterf*: proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glPointParameterfv*: proc (pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glPointParameteri*: proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glPointParameteriv*: proc (pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glFogCoordf*: proc (coord: GLfloat) {.cdecl, gcsafe.}
  glFogCoordfv*: proc (coord: ptr GLfloat) {.cdecl, gcsafe.}
  glFogCoordd*: proc (coord: GLdouble) {.cdecl, gcsafe.}
  glFogCoorddv*: proc (coord: ptr GLdouble) {.cdecl, gcsafe.}
  glFogCoordPointer*: proc (`type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glSecondaryColor3b*: proc (red: GLbyte, green: GLbyte, blue: GLbyte) {.cdecl, gcsafe.}
  glSecondaryColor3bv*: proc (v: ptr GLbyte) {.cdecl, gcsafe.}
  glSecondaryColor3d*: proc (red: GLdouble, green: GLdouble, blue: GLdouble) {.cdecl, gcsafe.}
  glSecondaryColor3dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glSecondaryColor3f*: proc (red: GLfloat, green: GLfloat, blue: GLfloat) {.cdecl, gcsafe.}
  glSecondaryColor3fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glSecondaryColor3i*: proc (red: GLint, green: GLint, blue: GLint) {.cdecl, gcsafe.}
  glSecondaryColor3iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glSecondaryColor3s*: proc (red: GLshort, green: GLshort, blue: GLshort) {.cdecl, gcsafe.}
  glSecondaryColor3sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glSecondaryColor3ub*: proc (red: GLubyte, green: GLubyte, blue: GLubyte) {.cdecl, gcsafe.}
  glSecondaryColor3ubv*: proc (v: ptr GLubyte) {.cdecl, gcsafe.}
  glSecondaryColor3ui*: proc (red: GLuint, green: GLuint, blue: GLuint) {.cdecl, gcsafe.}
  glSecondaryColor3uiv*: proc (v: ptr GLuint) {.cdecl, gcsafe.}
  glSecondaryColor3us*: proc (red: GLushort, green: GLushort, blue: GLushort) {.cdecl, gcsafe.}
  glSecondaryColor3usv*: proc (v: ptr GLushort) {.cdecl, gcsafe.}
  glSecondaryColorPointer*: proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glWindowPos2d*: proc (x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}
  glWindowPos2dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glWindowPos2f*: proc (x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}
  glWindowPos2fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glWindowPos2i*: proc (x: GLint, y: GLint) {.cdecl, gcsafe.}
  glWindowPos2iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glWindowPos2s*: proc (x: GLshort, y: GLshort) {.cdecl, gcsafe.}
  glWindowPos2sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glWindowPos3d*: proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}
  glWindowPos3dv*: proc (v: ptr GLdouble) {.cdecl, gcsafe.}
  glWindowPos3f*: proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}
  glWindowPos3fv*: proc (v: ptr GLfloat) {.cdecl, gcsafe.}
  glWindowPos3i*: proc (x: GLint, y: GLint, z: GLint) {.cdecl, gcsafe.}
  glWindowPos3iv*: proc (v: ptr GLint) {.cdecl, gcsafe.}
  glWindowPos3s*: proc (x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}
  glWindowPos3sv*: proc (v: ptr GLshort) {.cdecl, gcsafe.}
  glBlendColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}
  glBlendEquation*: proc (mode: GLenum) {.cdecl, gcsafe.}
  glGenQueries*: proc (n: GLsizei, ids: ptr GLuint) {.cdecl, gcsafe.}
  glDeleteQueries*: proc (n: GLsizei, ids: ptr GLuint) {.cdecl, gcsafe.}
  glIsQuery*: proc (id: GLuint): GLboolean {.cdecl, gcsafe.}
  glBeginQuery*: proc (target: GLenum, id: GLuint) {.cdecl, gcsafe.}
  glEndQuery*: proc (target: GLenum) {.cdecl, gcsafe.}
  glGetQueryiv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetQueryObjectiv*: proc (id: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetQueryObjectuiv*: proc (id: GLuint, pname: GLenum, params: ptr GLuint) {.cdecl, gcsafe.}
  glBindBuffer*: proc (target: GLenum, buffer: GLuint) {.cdecl, gcsafe.}
  glDeleteBuffers*: proc (n: GLsizei, buffers: ptr GLuint) {.cdecl, gcsafe.}
  glGenBuffers*: proc (n: GLsizei, buffers: ptr GLuint) {.cdecl, gcsafe.}
  glIsBuffer*: proc (buffer: GLuint): GLboolean {.cdecl, gcsafe.}
  glBufferData*: proc (target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum) {.cdecl, gcsafe.}
  glBufferSubData*: proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl, gcsafe.}
  glGetBufferSubData*: proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl, gcsafe.}
  glMapBuffer*: proc (target: GLenum, access: GLenum): pointer {.cdecl, gcsafe.}
  glUnmapBuffer*: proc (target: GLenum): GLboolean {.cdecl, gcsafe.}
  glGetBufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetBufferPointerv*: proc (target: GLenum, pname: GLenum, params: ptr pointer) {.cdecl, gcsafe.}
  glBlendEquationSeparate*: proc (modeRGB: GLenum, modeAlpha: GLenum) {.cdecl, gcsafe.}
  glDrawBuffers*: proc (n: GLsizei, bufs: ptr GLenum) {.cdecl, gcsafe.}
  glStencilOpSeparate*: proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.cdecl, gcsafe.}
  glStencilFuncSeparate*: proc (face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl, gcsafe.}
  glStencilMaskSeparate*: proc (face: GLenum, mask: GLuint) {.cdecl, gcsafe.}
  glAttachShader*: proc (program: GLuint, shader: GLuint) {.cdecl, gcsafe.}
  glBindAttribLocation*: proc (program: GLuint, index: GLuint, name: cstring) {.cdecl, gcsafe.}
  glCompileShader*: proc (shader: GLuint) {.cdecl, gcsafe.}
  glCreateProgram*: proc (): GLuint {.cdecl, gcsafe.}
  glCreateShader*: proc (`type`: GLenum): GLuint {.cdecl, gcsafe.}
  glDeleteProgram*: proc (program: GLuint) {.cdecl, gcsafe.}
  glDeleteShader*: proc (shader: GLuint) {.cdecl, gcsafe.}
  glDetachShader*: proc (program: GLuint, shader: GLuint) {.cdecl, gcsafe.}
  glDisableVertexAttribArray*: proc (index: GLuint) {.cdecl, gcsafe.}
  glEnableVertexAttribArray*: proc (index: GLuint) {.cdecl, gcsafe.}
  glGetActiveAttrib*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl, gcsafe.}
  glGetActiveUniform*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl, gcsafe.}
  glGetAttachedShaders*: proc (program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint) {.cdecl, gcsafe.}
  glGetAttribLocation*: proc (program: GLuint, name: cstring): GLint {.cdecl, gcsafe.}
  glGetProgramiv*: proc (program: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetProgramInfoLog*: proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl, gcsafe.}
  glGetShaderiv*: proc (shader: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetShaderInfoLog*: proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl, gcsafe.}
  glGetShaderSource*: proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring) {.cdecl, gcsafe.}
  glGetUniformLocation*: proc (program: GLuint, name: cstring): GLint {.cdecl, gcsafe.}
  glGetUniformfv*: proc (program: GLuint, location: GLint, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetUniformiv*: proc (program: GLuint, location: GLint, params: ptr GLint) {.cdecl, gcsafe.}
  glGetVertexAttribdv*: proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.cdecl, gcsafe.}
  glGetVertexAttribfv*: proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetVertexAttribiv*: proc (index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetVertexAttribPointerv*: proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.cdecl, gcsafe.}
  glIsProgram*: proc (program: GLuint): GLboolean {.cdecl, gcsafe.}
  glIsShader*: proc (shader: GLuint): GLboolean {.cdecl, gcsafe.}
  glLinkProgram*: proc (program: GLuint) {.cdecl, gcsafe.}
  glShaderSource*: proc (shader: GLuint, count: GLsizei, string: cstringArray, length: ptr GLint) {.cdecl, gcsafe.}
  glUseProgram*: proc (program: GLuint) {.cdecl, gcsafe.}
  glUniform1f*: proc (location: GLint, v0: GLfloat) {.cdecl, gcsafe.}
  glUniform2f*: proc (location: GLint, v0: GLfloat, v1: GLfloat) {.cdecl, gcsafe.}
  glUniform3f*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.cdecl, gcsafe.}
  glUniform4f*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.cdecl, gcsafe.}
  glUniform1i*: proc (location: GLint, v0: GLint) {.cdecl, gcsafe.}
  glUniform2i*: proc (location: GLint, v0: GLint, v1: GLint) {.cdecl, gcsafe.}
  glUniform3i*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.cdecl, gcsafe.}
  glUniform4i*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.cdecl, gcsafe.}
  glUniform1fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniform2fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniform3fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniform4fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniform1iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}
  glUniform2iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}
  glUniform3iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}
  glUniform4iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}
  glUniformMatrix2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniformMatrix3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniformMatrix4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glValidateProgram*: proc (program: GLuint) {.cdecl, gcsafe.}
  glVertexAttrib1d*: proc (index: GLuint, x: GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib1dv*: proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib1f*: proc (index: GLuint, x: GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib1fv*: proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib1s*: proc (index: GLuint, x: GLshort) {.cdecl, gcsafe.}
  glVertexAttrib1sv*: proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}
  glVertexAttrib2d*: proc (index: GLuint, x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib2dv*: proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib2f*: proc (index: GLuint, x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib2fv*: proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib2s*: proc (index: GLuint, x: GLshort, y: GLshort) {.cdecl, gcsafe.}
  glVertexAttrib2sv*: proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}
  glVertexAttrib3d*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib3dv*: proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib3f*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib3fv*: proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib3s*: proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}
  glVertexAttrib3sv*: proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}
  glVertexAttrib4Nbv*: proc (index: GLuint, v: ptr GLbyte) {.cdecl, gcsafe.}
  glVertexAttrib4Niv*: proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}
  glVertexAttrib4Nsv*: proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}
  glVertexAttrib4Nub*: proc (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) {.cdecl, gcsafe.}
  glVertexAttrib4Nubv*: proc (index: GLuint, v: ptr GLubyte) {.cdecl, gcsafe.}
  glVertexAttrib4Nuiv*: proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}
  glVertexAttrib4Nusv*: proc (index: GLuint, v: ptr GLushort) {.cdecl, gcsafe.}
  glVertexAttrib4bv*: proc (index: GLuint, v: ptr GLbyte) {.cdecl, gcsafe.}
  glVertexAttrib4d*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib4dv*: proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertexAttrib4f*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib4fv*: proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}
  glVertexAttrib4iv*: proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}
  glVertexAttrib4s*: proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.cdecl, gcsafe.}
  glVertexAttrib4sv*: proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}
  glVertexAttrib4ubv*: proc (index: GLuint, v: ptr GLubyte) {.cdecl, gcsafe.}
  glVertexAttrib4uiv*: proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}
  glVertexAttrib4usv*: proc (index: GLuint, v: ptr GLushort) {.cdecl, gcsafe.}
  glVertexAttribPointer*: proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glUniformMatrix2x3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniformMatrix3x2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniformMatrix2x4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniformMatrix4x2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniformMatrix3x4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glUniformMatrix4x3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glColorMaski*: proc (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) {.cdecl, gcsafe.}
  glGetBooleani_v*: proc (target: GLenum, index: GLuint, data: ptr GLboolean) {.cdecl, gcsafe.}
  glGetIntegeri_v*: proc (target: GLenum, index: GLuint, data: ptr GLint) {.cdecl, gcsafe.}
  glEnablei*: proc (target: GLenum, index: GLuint) {.cdecl, gcsafe.}
  glDisablei*: proc (target: GLenum, index: GLuint) {.cdecl, gcsafe.}
  glIsEnabledi*: proc (target: GLenum, index: GLuint): GLboolean {.cdecl, gcsafe.}
  glBeginTransformFeedback*: proc (primitiveMode: GLenum) {.cdecl, gcsafe.}
  glEndTransformFeedback*: proc () {.cdecl, gcsafe.}
  glBindBufferRange*: proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.cdecl, gcsafe.}
  glBindBufferBase*: proc (target: GLenum, index: GLuint, buffer: GLuint) {.cdecl, gcsafe.}
  glTransformFeedbackVaryings*: proc (program: GLuint, count: GLsizei, varyings: cstringArray, bufferMode: GLenum) {.cdecl, gcsafe.}
  glGetTransformFeedbackVarying*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring) {.cdecl, gcsafe.}
  glClampColor*: proc (target: GLenum, clamp: GLenum) {.cdecl, gcsafe.}
  glBeginConditionalRender*: proc (id: GLuint, mode: GLenum) {.cdecl, gcsafe.}
  glEndConditionalRender*: proc () {.cdecl, gcsafe.}
  glVertexAttribIPointer*: proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glGetVertexAttribIiv*: proc (index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetVertexAttribIuiv*: proc (index: GLuint, pname: GLenum, params: ptr GLuint) {.cdecl, gcsafe.}
  glVertexAttribI1i*: proc (index: GLuint, x: GLint) {.cdecl, gcsafe.}
  glVertexAttribI2i*: proc (index: GLuint, x: GLint, y: GLint) {.cdecl, gcsafe.}
  glVertexAttribI3i*: proc (index: GLuint, x: GLint, y: GLint, z: GLint) {.cdecl, gcsafe.}
  glVertexAttribI4i*: proc (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.cdecl, gcsafe.}
  glVertexAttribI1ui*: proc (index: GLuint, x: GLuint) {.cdecl, gcsafe.}
  glVertexAttribI2ui*: proc (index: GLuint, x: GLuint, y: GLuint) {.cdecl, gcsafe.}
  glVertexAttribI3ui*: proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint) {.cdecl, gcsafe.}
  glVertexAttribI4ui*: proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.cdecl, gcsafe.}
  glVertexAttribI1iv*: proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}
  glVertexAttribI2iv*: proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}
  glVertexAttribI3iv*: proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}
  glVertexAttribI4iv*: proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}
  glVertexAttribI1uiv*: proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}
  glVertexAttribI2uiv*: proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}
  glVertexAttribI3uiv*: proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}
  glVertexAttribI4uiv*: proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}
  glVertexAttribI4bv*: proc (index: GLuint, v: ptr GLbyte) {.cdecl, gcsafe.}
  glVertexAttribI4sv*: proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}
  glVertexAttribI4ubv*: proc (index: GLuint, v: ptr GLubyte) {.cdecl, gcsafe.}
  glVertexAttribI4usv*: proc (index: GLuint, v: ptr GLushort) {.cdecl, gcsafe.}
  glGetUniformuiv*: proc (program: GLuint, location: GLint, params: ptr GLuint) {.cdecl, gcsafe.}
  glBindFragDataLocation*: proc (program: GLuint, color: GLuint, name: cstring) {.cdecl, gcsafe.}
  glGetFragDataLocation*: proc (program: GLuint, name: cstring): GLint {.cdecl, gcsafe.}
  glUniform1ui*: proc (location: GLint, v0: GLuint) {.cdecl, gcsafe.}
  glUniform2ui*: proc (location: GLint, v0: GLuint, v1: GLuint) {.cdecl, gcsafe.}
  glUniform3ui*: proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.cdecl, gcsafe.}
  glUniform4ui*: proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.cdecl, gcsafe.}
  glUniform1uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl, gcsafe.}
  glUniform2uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl, gcsafe.}
  glUniform3uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl, gcsafe.}
  glUniform4uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl, gcsafe.}
  glTexParameterIiv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glTexParameterIuiv*: proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.cdecl, gcsafe.}
  glGetTexParameterIiv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetTexParameterIuiv*: proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.cdecl, gcsafe.}
  glClearBufferiv*: proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLint) {.cdecl, gcsafe.}
  glClearBufferuiv*: proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLuint) {.cdecl, gcsafe.}
  glClearBufferfv*: proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat) {.cdecl, gcsafe.}
  glClearBufferfi*: proc (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) {.cdecl, gcsafe.}
  glGetStringi*: proc (name: GLenum, index: GLuint): ptr GLubyte {.cdecl, gcsafe.}
  glIsRenderbuffer*: proc (renderbuffer: GLuint): GLboolean {.cdecl, gcsafe.}
  glBindRenderbuffer*: proc (target: GLenum, renderbuffer: GLuint) {.cdecl, gcsafe.}
  glDeleteRenderbuffers*: proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl, gcsafe.}
  glGenRenderbuffers*: proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl, gcsafe.}
  glRenderbufferStorage*: proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glGetRenderbufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glIsFramebuffer*: proc (framebuffer: GLuint): GLboolean {.cdecl, gcsafe.}
  glBindFramebuffer*: proc (target: GLenum, framebuffer: GLuint) {.cdecl, gcsafe.}
  glDeleteFramebuffers*: proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl, gcsafe.}
  glGenFramebuffers*: proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl, gcsafe.}
  glCheckFramebufferStatus*: proc (target: GLenum): GLenum {.cdecl, gcsafe.}
  glFramebufferTexture1D*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.cdecl, gcsafe.}
  glFramebufferTexture2D*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.cdecl, gcsafe.}
  glFramebufferTexture3D*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) {.cdecl, gcsafe.}
  glFramebufferRenderbuffer*: proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.cdecl, gcsafe.}
  glGetFramebufferAttachmentParameteriv*: proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGenerateMipmap*: proc (target: GLenum) {.cdecl, gcsafe.}
  glBlitFramebuffer*: proc (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.cdecl, gcsafe.}
  glRenderbufferStorageMultisample*: proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glFramebufferTextureLayer*: proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.cdecl, gcsafe.}
  glMapBufferRange*: proc (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.cdecl, gcsafe.}
  glFlushMappedBufferRange*: proc (target: GLenum, offset: GLintptr, length: GLsizeiptr) {.cdecl, gcsafe.}
  glBindVertexArray*: proc (array: GLuint) {.cdecl, gcsafe.}
  glDeleteVertexArrays*: proc (n: GLsizei, arrays: ptr GLuint) {.cdecl, gcsafe.}
  glGenVertexArrays*: proc (n: GLsizei, arrays: ptr GLuint) {.cdecl, gcsafe.}
  glIsVertexArray*: proc (array: GLuint): GLboolean {.cdecl, gcsafe.}
  glDrawArraysInstanced*: proc (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) {.cdecl, gcsafe.}
  glDrawElementsInstanced*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei) {.cdecl, gcsafe.}
  glTexBuffer*: proc (target: GLenum, internalformat: GLenum, buffer: GLuint) {.cdecl, gcsafe.}
  glPrimitiveRestartIndex*: proc (index: GLuint) {.cdecl, gcsafe.}
  glCopyBufferSubData*: proc (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.cdecl, gcsafe.}
  glGetUniformIndices*: proc (program: GLuint, uniformCount: GLsizei, uniformNames: cstringArray, uniformIndices: ptr GLuint) {.cdecl, gcsafe.}
  glGetActiveUniformsiv*: proc (program: GLuint, uniformCount: GLsizei, uniformIndices: ptr GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetActiveUniformName*: proc (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformName: cstring) {.cdecl, gcsafe.}
  glGetUniformBlockIndex*: proc (program: GLuint, uniformBlockName: cstring): GLuint {.cdecl, gcsafe.}
  glGetActiveUniformBlockiv*: proc (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetActiveUniformBlockName*: proc (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformBlockName: cstring) {.cdecl, gcsafe.}
  glUniformBlockBinding*: proc (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) {.cdecl, gcsafe.}
  glDrawElementsBaseVertex*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.cdecl, gcsafe.}
  glDrawRangeElementsBaseVertex*: proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.cdecl, gcsafe.}
  glDrawElementsInstancedBaseVertex*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint) {.cdecl, gcsafe.}
  glMultiDrawElementsBaseVertex*: proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei, basevertex: ptr GLint) {.cdecl, gcsafe.}
  glProvokingVertex*: proc (mode: GLenum) {.cdecl, gcsafe.}
  glFenceSync*: proc (condition: GLenum, flags: GLbitfield): GLsync {.cdecl, gcsafe.}
  glIsSync*: proc (sync: GLsync): GLboolean {.cdecl, gcsafe.}
  glDeleteSync*: proc (sync: GLsync) {.cdecl, gcsafe.}
  glClientWaitSync*: proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64): GLenum {.cdecl, gcsafe.}
  glWaitSync*: proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64) {.cdecl, gcsafe.}
  glGetInteger64v*: proc (pname: GLenum, data: ptr GLint64) {.cdecl, gcsafe.}
  glGetSynciv*: proc (sync: GLsync, pname: GLenum, count: GLsizei, length: ptr GLsizei, values: ptr GLint) {.cdecl, gcsafe.}
  glGetInteger64i_v*: proc (target: GLenum, index: GLuint, data: ptr GLint64) {.cdecl, gcsafe.}
  glGetBufferParameteri64v*: proc (target: GLenum, pname: GLenum, params: ptr GLint64) {.cdecl, gcsafe.}
  glFramebufferTexture*: proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) {.cdecl, gcsafe.}
  glTexImage2DMultisample*: proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.cdecl, gcsafe.}
  glTexImage3DMultisample*: proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.cdecl, gcsafe.}
  glGetMultisamplefv*: proc (pname: GLenum, index: GLuint, val: ptr GLfloat) {.cdecl, gcsafe.}
  glSampleMaski*: proc (maskNumber: GLuint, mask: GLbitfield) {.cdecl, gcsafe.}
  glBindFragDataLocationIndexed*: proc (program: GLuint, colorNumber: GLuint, index: GLuint, name: cstring) {.cdecl, gcsafe.}
  glGetFragDataIndex*: proc (program: GLuint, name: cstring): GLint {.cdecl, gcsafe.}
  glGenSamplers*: proc (count: GLsizei, samplers: ptr GLuint) {.cdecl, gcsafe.}
  glDeleteSamplers*: proc (count: GLsizei, samplers: ptr GLuint) {.cdecl, gcsafe.}
  glIsSampler*: proc (sampler: GLuint): GLboolean {.cdecl, gcsafe.}
  glBindSampler*: proc (unit: GLuint, sampler: GLuint) {.cdecl, gcsafe.}
  glSamplerParameteri*: proc (sampler: GLuint, pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glSamplerParameteriv*: proc (sampler: GLuint, pname: GLenum, param: ptr GLint) {.cdecl, gcsafe.}
  glSamplerParameterf*: proc (sampler: GLuint, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glSamplerParameterfv*: proc (sampler: GLuint, pname: GLenum, param: ptr GLfloat) {.cdecl, gcsafe.}
  glSamplerParameterIiv*: proc (sampler: GLuint, pname: GLenum, param: ptr GLint) {.cdecl, gcsafe.}
  glSamplerParameterIuiv*: proc (sampler: GLuint, pname: GLenum, param: ptr GLuint) {.cdecl, gcsafe.}
  glGetSamplerParameteriv*: proc (sampler: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetSamplerParameterIiv*: proc (sampler: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetSamplerParameterfv*: proc (sampler: GLuint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetSamplerParameterIuiv*: proc (sampler: GLuint, pname: GLenum, params: ptr GLuint) {.cdecl, gcsafe.}
  glQueryCounter*: proc (id: GLuint, target: GLenum) {.cdecl, gcsafe.}
  glGetQueryObjecti64v*: proc (id: GLuint, pname: GLenum, params: ptr GLint64) {.cdecl, gcsafe.}
  glGetQueryObjectui64v*: proc (id: GLuint, pname: GLenum, params: ptr GLuint64) {.cdecl, gcsafe.}
  glVertexAttribDivisor*: proc (index: GLuint, divisor: GLuint) {.cdecl, gcsafe.}
  glVertexAttribP1ui*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.cdecl, gcsafe.}
  glVertexAttribP1uiv*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.cdecl, gcsafe.}
  glVertexAttribP2ui*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.cdecl, gcsafe.}
  glVertexAttribP2uiv*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.cdecl, gcsafe.}
  glVertexAttribP3ui*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.cdecl, gcsafe.}
  glVertexAttribP3uiv*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.cdecl, gcsafe.}
  glVertexAttribP4ui*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.cdecl, gcsafe.}
  glVertexAttribP4uiv*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.cdecl, gcsafe.}
  glVertexP2ui*: proc (`type`: GLenum, value: GLuint) {.cdecl, gcsafe.}
  glVertexP2uiv*: proc (`type`: GLenum, value: ptr GLuint) {.cdecl, gcsafe.}
  glVertexP3ui*: proc (`type`: GLenum, value: GLuint) {.cdecl, gcsafe.}
  glVertexP3uiv*: proc (`type`: GLenum, value: ptr GLuint) {.cdecl, gcsafe.}
  glVertexP4ui*: proc (`type`: GLenum, value: GLuint) {.cdecl, gcsafe.}
  glVertexP4uiv*: proc (`type`: GLenum, value: ptr GLuint) {.cdecl, gcsafe.}
  glTexCoordP1ui*: proc (`type`: GLenum, coords: GLuint) {.cdecl, gcsafe.}
  glTexCoordP1uiv*: proc (`type`: GLenum, coords: ptr GLuint) {.cdecl, gcsafe.}
  glTexCoordP2ui*: proc (`type`: GLenum, coords: GLuint) {.cdecl, gcsafe.}
  glTexCoordP2uiv*: proc (`type`: GLenum, coords: ptr GLuint) {.cdecl, gcsafe.}
  glTexCoordP3ui*: proc (`type`: GLenum, coords: GLuint) {.cdecl, gcsafe.}
  glTexCoordP3uiv*: proc (`type`: GLenum, coords: ptr GLuint) {.cdecl, gcsafe.}
  glTexCoordP4ui*: proc (`type`: GLenum, coords: GLuint) {.cdecl, gcsafe.}
  glTexCoordP4uiv*: proc (`type`: GLenum, coords: ptr GLuint) {.cdecl, gcsafe.}
  glMultiTexCoordP1ui*: proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.cdecl, gcsafe.}
  glMultiTexCoordP1uiv*: proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.cdecl, gcsafe.}
  glMultiTexCoordP2ui*: proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.cdecl, gcsafe.}
  glMultiTexCoordP2uiv*: proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.cdecl, gcsafe.}
  glMultiTexCoordP3ui*: proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.cdecl, gcsafe.}
  glMultiTexCoordP3uiv*: proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.cdecl, gcsafe.}
  glMultiTexCoordP4ui*: proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.cdecl, gcsafe.}
  glMultiTexCoordP4uiv*: proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.cdecl, gcsafe.}
  glNormalP3ui*: proc (`type`: GLenum, coords: GLuint) {.cdecl, gcsafe.}
  glNormalP3uiv*: proc (`type`: GLenum, coords: ptr GLuint) {.cdecl, gcsafe.}
  glColorP3ui*: proc (`type`: GLenum, color: GLuint) {.cdecl, gcsafe.}
  glColorP3uiv*: proc (`type`: GLenum, color: ptr GLuint) {.cdecl, gcsafe.}
  glColorP4ui*: proc (`type`: GLenum, color: GLuint) {.cdecl, gcsafe.}
  glColorP4uiv*: proc (`type`: GLenum, color: ptr GLuint) {.cdecl, gcsafe.}
  glSecondaryColorP3ui*: proc (`type`: GLenum, color: GLuint) {.cdecl, gcsafe.}
  glSecondaryColorP3uiv*: proc (`type`: GLenum, color: ptr GLuint) {.cdecl, gcsafe.}
  glMinSampleShading*: proc (value: GLfloat) {.cdecl, gcsafe.}
  glBlendEquationi*: proc (buf: GLuint, mode: GLenum) {.cdecl, gcsafe.}
  glBlendEquationSeparatei*: proc (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) {.cdecl, gcsafe.}
  glBlendFunci*: proc (buf: GLuint, src: GLenum, dst: GLenum) {.cdecl, gcsafe.}
  glBlendFuncSeparatei*: proc (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) {.cdecl, gcsafe.}
  glDrawArraysIndirect*: proc (mode: GLenum, indirect: pointer) {.cdecl, gcsafe.}
  glDrawElementsIndirect*: proc (mode: GLenum, `type`: GLenum, indirect: pointer) {.cdecl, gcsafe.}
  glUniform1d*: proc (location: GLint, x: GLdouble) {.cdecl, gcsafe.}
  glUniform2d*: proc (location: GLint, x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}
  glUniform3d*: proc (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}
  glUniform4d*: proc (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}
  glUniform1dv*: proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.cdecl, gcsafe.}
  glUniform2dv*: proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.cdecl, gcsafe.}
  glUniform3dv*: proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.cdecl, gcsafe.}
  glUniform4dv*: proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.cdecl, gcsafe.}
  glUniformMatrix2dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}
  glUniformMatrix3dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}
  glUniformMatrix4dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}
  glUniformMatrix2x3dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}
  glUniformMatrix2x4dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}
  glUniformMatrix3x2dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}
  glUniformMatrix3x4dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}
  glUniformMatrix4x2dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}
  glUniformMatrix4x3dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}
  glGetUniformdv*: proc (program: GLuint, location: GLint, params: ptr GLdouble) {.cdecl, gcsafe.}
  glGetSubroutineUniformLocation*: proc (program: GLuint, shadertype: GLenum, name: cstring): GLint {.cdecl, gcsafe.}
  glGetSubroutineIndex*: proc (program: GLuint, shadertype: GLenum, name: cstring): GLuint {.cdecl, gcsafe.}
  glGetActiveSubroutineUniformiv*: proc (program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: ptr GLint) {.cdecl, gcsafe.}
  glGetActiveSubroutineUniformName*: proc (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.cdecl, gcsafe.}
  glGetActiveSubroutineName*: proc (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.cdecl, gcsafe.}
  glUniformSubroutinesuiv*: proc (shadertype: GLenum, count: GLsizei, indices: ptr GLuint) {.cdecl, gcsafe.}
  glGetUniformSubroutineuiv*: proc (shadertype: GLenum, location: GLint, params: ptr GLuint) {.cdecl, gcsafe.}
  glGetProgramStageiv*: proc (program: GLuint, shadertype: GLenum, pname: GLenum, values: ptr GLint) {.cdecl, gcsafe.}
  glPatchParameteri*: proc (pname: GLenum, value: GLint) {.cdecl, gcsafe.}
  glPatchParameterfv*: proc (pname: GLenum, values: ptr GLfloat) {.cdecl, gcsafe.}
  glBindTransformFeedback*: proc (target: GLenum, id: GLuint) {.cdecl, gcsafe.}
  glDeleteTransformFeedbacks*: proc (n: GLsizei, ids: ptr GLuint) {.cdecl, gcsafe.}
  glGenTransformFeedbacks*: proc (n: GLsizei, ids: ptr GLuint) {.cdecl, gcsafe.}
  glIsTransformFeedback*: proc (id: GLuint): GLboolean {.cdecl, gcsafe.}
  glPauseTransformFeedback*: proc () {.cdecl, gcsafe.}
  glResumeTransformFeedback*: proc () {.cdecl, gcsafe.}
  glDrawTransformFeedback*: proc (mode: GLenum, id: GLuint) {.cdecl, gcsafe.}
  glDrawTransformFeedbackStream*: proc (mode: GLenum, id: GLuint, stream: GLuint) {.cdecl, gcsafe.}
  glBeginQueryIndexed*: proc (target: GLenum, index: GLuint, id: GLuint) {.cdecl, gcsafe.}
  glEndQueryIndexed*: proc (target: GLenum, index: GLuint) {.cdecl, gcsafe.}
  glGetQueryIndexediv*: proc (target: GLenum, index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glReleaseShaderCompiler*: proc () {.cdecl, gcsafe.}
  glShaderBinary*: proc (count: GLsizei, shaders: ptr GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) {.cdecl, gcsafe.}
  glGetShaderPrecisionFormat*: proc (shadertype: GLenum, precisiontype: GLenum, range: ptr GLint, precision: ptr GLint) {.cdecl, gcsafe.}
  glDepthRangef*: proc (n: GLfloat, f: GLfloat) {.cdecl, gcsafe.}
  glClearDepthf*: proc (d: GLfloat) {.cdecl, gcsafe.}
  glGetProgramBinary*: proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, binaryFormat: ptr GLenum, binary: pointer) {.cdecl, gcsafe.}
  glProgramBinary*: proc (program: GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) {.cdecl, gcsafe.}
  glProgramParameteri*: proc (program: GLuint, pname: GLenum, value: GLint) {.cdecl, gcsafe.}
  glUseProgramStages*: proc (pipeline: GLuint, stages: GLbitfield, program: GLuint) {.cdecl, gcsafe.}
  glActiveShaderProgram*: proc (pipeline: GLuint, program: GLuint) {.cdecl, gcsafe.}
  glCreateShaderProgramv*: proc (`type`: GLenum, count: GLsizei, strings: cstringArray): GLuint {.cdecl, gcsafe.}
  glBindProgramPipeline*: proc (pipeline: GLuint) {.cdecl, gcsafe.}
  glDeleteProgramPipelines*: proc (n: GLsizei, pipelines: ptr GLuint) {.cdecl, gcsafe.}
  glGenProgramPipelines*: proc (n: GLsizei, pipelines: ptr GLuint) {.cdecl, gcsafe.}
  glIsProgramPipeline*: proc (pipeline: GLuint): GLboolean {.cdecl, gcsafe.}
  glGetProgramPipelineiv*: proc (pipeline: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glProgramUniform1i*: proc (program: GLuint, location: GLint, v0: GLint) {.cdecl, gcsafe.}
  glProgramUniform1iv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}
  glProgramUniform1f*: proc (program: GLuint, location: GLint, v0: GLfloat) {.cdecl, gcsafe.}
  glProgramUniform1fv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}
  glProgramUniform1d*: proc (program: GLuint, location: GLint, v0: GLdouble) {.cdecl, gcsafe.}
  glProgramUniform1dv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.cdecl, gcsafe.}
  glProgramUniform1ui*: proc (program: GLuint, location: GLint, v0: GLuint) {.cdecl, gcsafe.}
  glProgramUniform1uiv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl, gcsafe.}
  glProgramUniform2i*: proc (program: GLuint, location: GLint, v0: GLint, v1: GLint) {.cdecl, gcsafe.}
  glProgramUniform2iv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}
  glProgramUniform2f*: proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) {.cdecl, gcsafe.}
  glProgramUniform2fv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}
  glProgramUniform2d*: proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) {.cdecl, gcsafe.}
  glProgramUniform2dv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.cdecl, gcsafe.}
  glProgramUniform2ui*: proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) {.cdecl, gcsafe.}
  glProgramUniform2uiv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl, gcsafe.}
  glProgramUniform3i*: proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) {.cdecl, gcsafe.}
  glProgramUniform3iv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}
  glProgramUniform3f*: proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.cdecl, gcsafe.}
  glProgramUniform3fv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}
  glProgramUniform3d*: proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) {.cdecl, gcsafe.}
  glProgramUniform3dv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.cdecl, gcsafe.}
  glProgramUniform3ui*: proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.cdecl, gcsafe.}
  glProgramUniform3uiv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl, gcsafe.}
  glProgramUniform4i*: proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.cdecl, gcsafe.}
  glProgramUniform4iv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}
  glProgramUniform4f*: proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.cdecl, gcsafe.}
  glProgramUniform4fv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}
  glProgramUniform4d*: proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) {.cdecl, gcsafe.}
  glProgramUniform4dv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.cdecl, gcsafe.}
  glProgramUniform4ui*: proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.cdecl, gcsafe.}
  glProgramUniform4uiv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl, gcsafe.}
  glProgramUniformMatrix2fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glProgramUniformMatrix3fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glProgramUniformMatrix4fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glProgramUniformMatrix2dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}
  glProgramUniformMatrix3dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}
  glProgramUniformMatrix4dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}
  glProgramUniformMatrix2x3fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glProgramUniformMatrix3x2fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glProgramUniformMatrix2x4fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glProgramUniformMatrix4x2fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glProgramUniformMatrix3x4fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glProgramUniformMatrix4x3fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}
  glProgramUniformMatrix2x3dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}
  glProgramUniformMatrix3x2dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}
  glProgramUniformMatrix2x4dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}
  glProgramUniformMatrix4x2dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}
  glProgramUniformMatrix3x4dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}
  glProgramUniformMatrix4x3dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}
  glValidateProgramPipeline*: proc (pipeline: GLuint) {.cdecl, gcsafe.}
  glGetProgramPipelineInfoLog*: proc (pipeline: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl, gcsafe.}
  glVertexAttribL1d*: proc (index: GLuint, x: GLdouble) {.cdecl, gcsafe.}
  glVertexAttribL2d*: proc (index: GLuint, x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}
  glVertexAttribL3d*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}
  glVertexAttribL4d*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}
  glVertexAttribL1dv*: proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertexAttribL2dv*: proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertexAttribL3dv*: proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertexAttribL4dv*: proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}
  glVertexAttribLPointer*: proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}
  glGetVertexAttribLdv*: proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.cdecl, gcsafe.}
  glViewportArrayv*: proc (first: GLuint, count: GLsizei, v: ptr GLfloat) {.cdecl, gcsafe.}
  glViewportIndexedf*: proc (index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) {.cdecl, gcsafe.}
  glViewportIndexedfv*: proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}
  glScissorArrayv*: proc (first: GLuint, count: GLsizei, v: ptr GLint) {.cdecl, gcsafe.}
  glScissorIndexed*: proc (index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glScissorIndexedv*: proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}
  glDepthRangeArrayv*: proc (first: GLuint, count: GLsizei, v: ptr GLdouble) {.cdecl, gcsafe.}
  glDepthRangeIndexed*: proc (index: GLuint, n: GLdouble, f: GLdouble) {.cdecl, gcsafe.}
  glGetFloati_v*: proc (target: GLenum, index: GLuint, data: ptr GLfloat) {.cdecl, gcsafe.}
  glGetDoublei_v*: proc (target: GLenum, index: GLuint, data: ptr GLdouble) {.cdecl, gcsafe.}
  glDrawArraysInstancedBaseInstance*: proc (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) {.cdecl, gcsafe.}
  glDrawElementsInstancedBaseInstance*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, baseinstance: GLuint) {.cdecl, gcsafe.}
  glDrawElementsInstancedBaseVertexBaseInstance*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) {.cdecl, gcsafe.}
  glGetInternalformativ*: proc (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: ptr GLint) {.cdecl, gcsafe.}
  glGetActiveAtomicCounterBufferiv*: proc (program: GLuint, bufferIndex: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glBindImageTexture*: proc (unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) {.cdecl, gcsafe.}
  glMemoryBarrier*: proc (barriers: GLbitfield) {.cdecl, gcsafe.}
  glTexStorage1D*: proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) {.cdecl, gcsafe.}
  glTexStorage2D*: proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glTexStorage3D*: proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) {.cdecl, gcsafe.}
  glDrawTransformFeedbackInstanced*: proc (mode: GLenum, id: GLuint, instancecount: GLsizei) {.cdecl, gcsafe.}
  glDrawTransformFeedbackStreamInstanced*: proc (mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) {.cdecl, gcsafe.}
  glClearBufferData*: proc (target: GLenum, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer) {.cdecl, gcsafe.}
  glClearBufferSubData*: proc (target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer) {.cdecl, gcsafe.}
  glDispatchCompute*: proc (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) {.cdecl, gcsafe.}
  glDispatchComputeIndirect*: proc (indirect: GLintptr) {.cdecl, gcsafe.}
  glCopyImageSubData*: proc (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) {.cdecl, gcsafe.}
  glFramebufferParameteri*: proc (target: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glGetFramebufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetInternalformati64v*: proc (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: ptr GLint64) {.cdecl, gcsafe.}
  glInvalidateTexSubImage*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) {.cdecl, gcsafe.}
  glInvalidateTexImage*: proc (texture: GLuint, level: GLint) {.cdecl, gcsafe.}
  glInvalidateBufferSubData*: proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) {.cdecl, gcsafe.}
  glInvalidateBufferData*: proc (buffer: GLuint) {.cdecl, gcsafe.}
  glInvalidateFramebuffer*: proc (target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum) {.cdecl, gcsafe.}
  glInvalidateSubFramebuffer*: proc (target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glMultiDrawArraysIndirect*: proc (mode: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei) {.cdecl, gcsafe.}
  glMultiDrawElementsIndirect*: proc (mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei) {.cdecl, gcsafe.}
  glGetProgramInterfaceiv*: proc (program: GLuint, programInterface: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetProgramResourceIndex*: proc (program: GLuint, programInterface: GLenum, name: cstring): GLuint {.cdecl, gcsafe.}
  glGetProgramResourceName*: proc (program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.cdecl, gcsafe.}
  glGetProgramResourceiv*: proc (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: ptr GLenum, count: GLsizei, length: ptr GLsizei, params: ptr GLint) {.cdecl, gcsafe.}
  glGetProgramResourceLocation*: proc (program: GLuint, programInterface: GLenum, name: cstring): GLint {.cdecl, gcsafe.}
  glGetProgramResourceLocationIndex*: proc (program: GLuint, programInterface: GLenum, name: cstring): GLint {.cdecl, gcsafe.}
  glShaderStorageBlockBinding*: proc (program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) {.cdecl, gcsafe.}
  glTexBufferRange*: proc (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.cdecl, gcsafe.}
  glTexStorage2DMultisample*: proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.cdecl, gcsafe.}
  glTexStorage3DMultisample*: proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.cdecl, gcsafe.}
  glTextureView*: proc (texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) {.cdecl, gcsafe.}
  glBindVertexBuffer*: proc (bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) {.cdecl, gcsafe.}
  glVertexAttribFormat*: proc (attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint) {.cdecl, gcsafe.}
  glVertexAttribIFormat*: proc (attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.cdecl, gcsafe.}
  glVertexAttribLFormat*: proc (attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.cdecl, gcsafe.}
  glVertexAttribBinding*: proc (attribindex: GLuint, bindingindex: GLuint) {.cdecl, gcsafe.}
  glVertexBindingDivisor*: proc (bindingindex: GLuint, divisor: GLuint) {.cdecl, gcsafe.}
  glDebugMessageControl*: proc (source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean) {.cdecl, gcsafe.}
  glDebugMessageInsert*: proc (source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring) {.cdecl, gcsafe.}
  glDebugMessageCallback*: proc (callback: GLDEBUGPROC, userParam: pointer) {.cdecl, gcsafe.}
  glGetDebugMessageLog*: proc (count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.cdecl, gcsafe.}
  glPushDebugGroup*: proc (source: GLenum, id: GLuint, length: GLsizei, message: cstring) {.cdecl, gcsafe.}
  glPopDebugGroup*: proc () {.cdecl, gcsafe.}
  glObjectLabel*: proc (identifier: GLenum, name: GLuint, length: GLsizei, label: cstring) {.cdecl, gcsafe.}
  glGetObjectLabel*: proc (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.cdecl, gcsafe.}
  glObjectPtrLabel*: proc (`ptr`: pointer, length: GLsizei, label: cstring) {.cdecl, gcsafe.}
  glGetObjectPtrLabel*: proc (`ptr`: pointer, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.cdecl, gcsafe.}
  glBufferStorage*: proc (target: GLenum, size: GLsizeiptr, data: pointer, flags: GLbitfield) {.cdecl, gcsafe.}
  glClearTexImage*: proc (texture: GLuint, level: GLint, format: GLenum, `type`: GLenum, data: pointer) {.cdecl, gcsafe.}
  glClearTexSubImage*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, data: pointer) {.cdecl, gcsafe.}
  glBindBuffersBase*: proc (target: GLenum, first: GLuint, count: GLsizei, buffers: ptr GLuint) {.cdecl, gcsafe.}
  glBindBuffersRange*: proc (target: GLenum, first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, sizes: ptr GLsizeiptr) {.cdecl, gcsafe.}
  glBindTextures*: proc (first: GLuint, count: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}
  glBindSamplers*: proc (first: GLuint, count: GLsizei, samplers: ptr GLuint) {.cdecl, gcsafe.}
  glBindImageTextures*: proc (first: GLuint, count: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}
  glBindVertexBuffers*: proc (first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, strides: ptr GLsizei) {.cdecl, gcsafe.}
  glClipControl*: proc (origin: GLenum, depth: GLenum) {.cdecl, gcsafe.}
  glCreateTransformFeedbacks*: proc (n: GLsizei, ids: ptr GLuint) {.cdecl, gcsafe.}
  glTransformFeedbackBufferBase*: proc (xfb: GLuint, index: GLuint, buffer: GLuint) {.cdecl, gcsafe.}
  glTransformFeedbackBufferRange*: proc (xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.cdecl, gcsafe.}
  glGetTransformFeedbackiv*: proc (xfb: GLuint, pname: GLenum, param: ptr GLint) {.cdecl, gcsafe.}
  glGetTransformFeedbacki_v2*: proc (xfb: GLuint, pname: GLenum, index: GLuint, param: ptr GLint) {.cdecl, gcsafe.}
  glGetTransformFeedbacki64_v*: proc (xfb: GLuint, pname: GLenum, index: GLuint, param: ptr GLint64) {.cdecl, gcsafe.}
  glCreateBuffers*: proc (n: GLsizei, buffers: ptr GLuint) {.cdecl, gcsafe.}
  glNamedBufferStorage*: proc (buffer: GLuint, size: GLsizeiptr, data: pointer, flags: GLbitfield) {.cdecl, gcsafe.}
  glNamedBufferData*: proc (buffer: GLuint, size: GLsizeiptr, data: pointer, usage: GLenum) {.cdecl, gcsafe.}
  glNamedBufferSubData*: proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl, gcsafe.}
  glCopyNamedBufferSubData*: proc (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.cdecl, gcsafe.}
  glClearNamedBufferData*: proc (buffer: GLuint, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer) {.cdecl, gcsafe.}
  glClearNamedBufferSubData*: proc (buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer) {.cdecl, gcsafe.}
  glMapNamedBuffer*: proc (buffer: GLuint, access: GLenum): pointer {.cdecl, gcsafe.}
  glMapNamedBufferRange*: proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.cdecl, gcsafe.}
  glUnmapNamedBuffer*: proc (buffer: GLuint): GLboolean {.cdecl, gcsafe.}
  glFlushMappedNamedBufferRange*: proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) {.cdecl, gcsafe.}
  glGetNamedBufferParameteriv*: proc (buffer: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetNamedBufferParameteri64v*: proc (buffer: GLuint, pname: GLenum, params: ptr GLint64) {.cdecl, gcsafe.}
  glGetNamedBufferPointerv*: proc (buffer: GLuint, pname: GLenum, params: ptr pointer) {.cdecl, gcsafe.}
  glGetNamedBufferSubData*: proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl, gcsafe.}
  glCreateFramebuffers*: proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl, gcsafe.}
  glNamedFramebufferRenderbuffer*: proc (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.cdecl, gcsafe.}
  glNamedFramebufferParameteri*: proc (framebuffer: GLuint, pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glNamedFramebufferTexture*: proc (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) {.cdecl, gcsafe.}
  glNamedFramebufferTextureLayer*: proc (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.cdecl, gcsafe.}
  glNamedFramebufferDrawBuffer*: proc (framebuffer: GLuint, buf: GLenum) {.cdecl, gcsafe.}
  glNamedFramebufferDrawBuffers*: proc (framebuffer: GLuint, n: GLsizei, bufs: ptr GLenum) {.cdecl, gcsafe.}
  glNamedFramebufferReadBuffer*: proc (framebuffer: GLuint, src: GLenum) {.cdecl, gcsafe.}
  glInvalidateNamedFramebufferData*: proc (framebuffer: GLuint, numAttachments: GLsizei, attachments: ptr GLenum) {.cdecl, gcsafe.}
  glInvalidateNamedFramebufferSubData*: proc (framebuffer: GLuint, numAttachments: GLsizei, attachments: ptr GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glClearNamedFramebufferiv*: proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLint) {.cdecl, gcsafe.}
  glClearNamedFramebufferuiv*: proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLuint) {.cdecl, gcsafe.}
  glClearNamedFramebufferfv*: proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat) {.cdecl, gcsafe.}
  glClearNamedFramebufferfi*: proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) {.cdecl, gcsafe.}
  glBlitNamedFramebuffer*: proc (readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.cdecl, gcsafe.}
  glCheckNamedFramebufferStatus*: proc (framebuffer: GLuint, target: GLenum): GLenum {.cdecl, gcsafe.}
  glGetNamedFramebufferParameteriv*: proc (framebuffer: GLuint, pname: GLenum, param: ptr GLint) {.cdecl, gcsafe.}
  glGetNamedFramebufferAttachmentParameteriv*: proc (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glCreateRenderbuffers*: proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl, gcsafe.}
  glNamedRenderbufferStorage*: proc (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glNamedRenderbufferStorageMultisample*: proc (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glGetNamedRenderbufferParameteriv*: proc (renderbuffer: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glCreateTextures*: proc (target: GLenum, n: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}
  glTextureBuffer*: proc (texture: GLuint, internalformat: GLenum, buffer: GLuint) {.cdecl, gcsafe.}
  glTextureBufferRange*: proc (texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.cdecl, gcsafe.}
  glTextureStorage1D*: proc (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei) {.cdecl, gcsafe.}
  glTextureStorage2D*: proc (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glTextureStorage3D*: proc (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) {.cdecl, gcsafe.}
  glTextureStorage2DMultisample*: proc (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.cdecl, gcsafe.}
  glTextureStorage3DMultisample*: proc (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.cdecl, gcsafe.}
  glTextureSubImage1D*: proc (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glTextureSubImage2D*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glTextureSubImage3D*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}
  glCompressedTextureSubImage1D*: proc (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}
  glCompressedTextureSubImage2D*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}
  glCompressedTextureSubImage3D*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}
  glCopyTextureSubImage1D*: proc (texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.cdecl, gcsafe.}
  glCopyTextureSubImage2D*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glCopyTextureSubImage3D*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}
  glTextureParameterf*: proc (texture: GLuint, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}
  glTextureParameterfv*: proc (texture: GLuint, pname: GLenum, param: ptr GLfloat) {.cdecl, gcsafe.}
  glTextureParameteri*: proc (texture: GLuint, pname: GLenum, param: GLint) {.cdecl, gcsafe.}
  glTextureParameterIiv*: proc (texture: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glTextureParameterIuiv*: proc (texture: GLuint, pname: GLenum, params: ptr GLuint) {.cdecl, gcsafe.}
  glTextureParameteriv*: proc (texture: GLuint, pname: GLenum, param: ptr GLint) {.cdecl, gcsafe.}
  glGenerateTextureMipmap*: proc (texture: GLuint) {.cdecl, gcsafe.}
  glBindTextureUnit*: proc (unit: GLuint, texture: GLuint) {.cdecl, gcsafe.}
  glGetTextureImage*: proc (texture: GLuint, level: GLint, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer) {.cdecl, gcsafe.}
  glGetCompressedTextureImage*: proc (texture: GLuint, level: GLint, bufSize: GLsizei, pixels: pointer) {.cdecl, gcsafe.}
  glGetTextureLevelParameterfv*: proc (texture: GLuint, level: GLint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetTextureLevelParameteriv*: proc (texture: GLuint, level: GLint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetTextureParameterfv*: proc (texture: GLuint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetTextureParameterIiv*: proc (texture: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glGetTextureParameterIuiv*: proc (texture: GLuint, pname: GLenum, params: ptr GLuint) {.cdecl, gcsafe.}
  glGetTextureParameteriv*: proc (texture: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}
  glCreateVertexArrays*: proc (n: GLsizei, arrays: ptr GLuint) {.cdecl, gcsafe.}
  glDisableVertexArrayAttrib*: proc (vaobj: GLuint, index: GLuint) {.cdecl, gcsafe.}
  glEnableVertexArrayAttrib*: proc (vaobj: GLuint, index: GLuint) {.cdecl, gcsafe.}
  glVertexArrayElementBuffer*: proc (vaobj: GLuint, buffer: GLuint) {.cdecl, gcsafe.}
  glVertexArrayVertexBuffer*: proc (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) {.cdecl, gcsafe.}
  glVertexArrayVertexBuffers*: proc (vaobj: GLuint, first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, strides: ptr GLsizei) {.cdecl, gcsafe.}
  glVertexArrayAttribBinding*: proc (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) {.cdecl, gcsafe.}
  glVertexArrayAttribFormat*: proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint) {.cdecl, gcsafe.}
  glVertexArrayAttribIFormat*: proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.cdecl, gcsafe.}
  glVertexArrayAttribLFormat*: proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.cdecl, gcsafe.}
  glVertexArrayBindingDivisor*: proc (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) {.cdecl, gcsafe.}
  glGetVertexArrayiv*: proc (vaobj: GLuint, pname: GLenum, param: ptr GLint) {.cdecl, gcsafe.}
  glGetVertexArrayIndexediv*: proc (vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint) {.cdecl, gcsafe.}
  glGetVertexArrayIndexed64iv*: proc (vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint64) {.cdecl, gcsafe.}
  glCreateSamplers*: proc (n: GLsizei, samplers: ptr GLuint) {.cdecl, gcsafe.}
  glCreateProgramPipelines*: proc (n: GLsizei, pipelines: ptr GLuint) {.cdecl, gcsafe.}
  glCreateQueries*: proc (target: GLenum, n: GLsizei, ids: ptr GLuint) {.cdecl, gcsafe.}
  glGetQueryBufferObjecti64v*: proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.cdecl, gcsafe.}
  glGetQueryBufferObjectiv*: proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.cdecl, gcsafe.}
  glGetQueryBufferObjectui64v*: proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.cdecl, gcsafe.}
  glGetQueryBufferObjectuiv*: proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.cdecl, gcsafe.}
  glMemoryBarrierByRegion*: proc (barriers: GLbitfield) {.cdecl, gcsafe.}
  glGetTextureSubImage*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer) {.cdecl, gcsafe.}
  glGetCompressedTextureSubImage*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: pointer) {.cdecl, gcsafe.}
  glGetGraphicsResetStatus*: proc (): GLenum {.cdecl, gcsafe.}
  glGetnCompressedTexImage*: proc (target: GLenum, lod: GLint, bufSize: GLsizei, pixels: pointer) {.cdecl, gcsafe.}
  glGetnTexImage*: proc (target: GLenum, level: GLint, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer) {.cdecl, gcsafe.}
  glGetnUniformdv*: proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLdouble) {.cdecl, gcsafe.}
  glGetnUniformfv*: proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLfloat) {.cdecl, gcsafe.}
  glGetnUniformiv*: proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint) {.cdecl, gcsafe.}
  glGetnUniformuiv*: proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint) {.cdecl, gcsafe.}
  glReadnPixels*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, data: pointer) {.cdecl, gcsafe.}
  glGetnMapdv*: proc (target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLdouble) {.cdecl, gcsafe.}
  glGetnMapfv*: proc (target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLfloat) {.cdecl, gcsafe.}
  glGetnMapiv*: proc (target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLint) {.cdecl, gcsafe.}
  glGetnPixelMapfv*: proc (map: GLenum, bufSize: GLsizei, values: ptr GLfloat) {.cdecl, gcsafe.}
  glGetnPixelMapuiv*: proc (map: GLenum, bufSize: GLsizei, values: ptr GLuint) {.cdecl, gcsafe.}
  glGetnPixelMapusv*: proc (map: GLenum, bufSize: GLsizei, values: ptr GLushort) {.cdecl, gcsafe.}
  glGetnPolygonStipple*: proc (bufSize: GLsizei, pattern: ptr GLubyte) {.cdecl, gcsafe.}
  glGetnColorTable*: proc (target: GLenum, format: GLenum, `type`: GLenum, bufSize: GLsizei, table: pointer) {.cdecl, gcsafe.}
  glGetnConvolutionFilter*: proc (target: GLenum, format: GLenum, `type`: GLenum, bufSize: GLsizei, image: pointer) {.cdecl, gcsafe.}
  glGetnSeparableFilter*: proc (target: GLenum, format: GLenum, `type`: GLenum, rowBufSize: GLsizei, row: pointer, columnBufSize: GLsizei, column: pointer, span: pointer) {.cdecl, gcsafe.}
  glGetnHistogram*: proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, bufSize: GLsizei, values: pointer) {.cdecl, gcsafe.}
  glGetnMinmax*: proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, bufSize: GLsizei, values: pointer) {.cdecl, gcsafe.}
  glTextureBarrier*: proc () {.cdecl, gcsafe.}
  glSpecializeShader*: proc (shader: GLuint, pEntryPoint: cstring, numSpecializationConstants: GLuint, pConstantIndex: ptr GLuint, pConstantValue: ptr GLuint) {.cdecl, gcsafe.}
  glMultiDrawArraysIndirectCount*: proc (mode: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) {.cdecl, gcsafe.}
  glMultiDrawElementsIndirectCount*: proc (mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) {.cdecl, gcsafe.}
  glPolygonOffsetClamp*: proc (factor: GLfloat, units: GLfloat, clamp: GLfloat) {.cdecl, gcsafe.}


# Extensions


proc hasExt(extname: string): bool =
  if extname.len == 0:
    return false

  if glVersionMajor < 3:
    var extensions = $cast[cstring](glGetString(GL_EXTENSIONS))
    if extensions.len == 0:
      return false

    var
      loc, terminatorLoc: int
      terminator: char

    while true:
      loc = extensions.find(extname)
      if loc < 0:
        return false

      terminatorLoc = loc + extname.len
      terminator = extensions[terminatorLoc]

      if (loc == 0 or extensions[loc - 1] == ' ') and
         (terminator == ' ' or terminator == '\0'):
        return true

      extensions = extensions[terminatorLoc..^1]

  else:
    var
      num: GLint
      s: cstring

    glGetIntegerv(GL_NUM_EXTENSIONS, num.addr)

    for i in 0..num-1:
      s = cast[cstring](glGetStringi(GL_EXTENSIONS, GLuint(i)))
      if s == extname:
        return true


proc load_GL_VERSION_1_0(load: proc) =
  if not GLAD_GL_VERSION_1_0: return

  glCullFace = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glCullFace"))
  glFrontFace = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glFrontFace"))
  glHint = cast[proc (target: GLenum, mode: GLenum) {.cdecl, gcsafe.}](load("glHint"))
  glLineWidth = cast[proc (width: GLfloat) {.cdecl, gcsafe.}](load("glLineWidth"))
  glPointSize = cast[proc (size: GLfloat) {.cdecl, gcsafe.}](load("glPointSize"))
  glPolygonMode = cast[proc (face: GLenum, mode: GLenum) {.cdecl, gcsafe.}](load("glPolygonMode"))
  glScissor = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glScissor"))
  glTexParameterf = cast[proc (target: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glTexParameterf"))
  glTexParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glTexParameterfv"))
  glTexParameteri = cast[proc (target: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glTexParameteri"))
  glTexParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glTexParameteriv"))
  glTexImage1D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTexImage1D"))
  glTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTexImage2D"))
  glDrawBuffer = cast[proc (buf: GLenum) {.cdecl, gcsafe.}](load("glDrawBuffer"))
  glClear = cast[proc (mask: GLbitfield) {.cdecl, gcsafe.}](load("glClear"))
  glClearColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}](load("glClearColor"))
  glClearStencil = cast[proc (s: GLint) {.cdecl, gcsafe.}](load("glClearStencil"))
  glClearDepth = cast[proc (depth: GLdouble) {.cdecl, gcsafe.}](load("glClearDepth"))
  glStencilMask = cast[proc (mask: GLuint) {.cdecl, gcsafe.}](load("glStencilMask"))
  glColorMask = cast[proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.cdecl, gcsafe.}](load("glColorMask"))
  glDepthMask = cast[proc (flag: GLboolean) {.cdecl, gcsafe.}](load("glDepthMask"))
  glDisable = cast[proc (cap: GLenum) {.cdecl, gcsafe.}](load("glDisable"))
  glEnable = cast[proc (cap: GLenum) {.cdecl, gcsafe.}](load("glEnable"))
  glFinish = cast[proc () {.cdecl, gcsafe.}](load("glFinish"))
  glFlush = cast[proc () {.cdecl, gcsafe.}](load("glFlush"))
  glBlendFunc = cast[proc (sfactor: GLenum, dfactor: GLenum) {.cdecl, gcsafe.}](load("glBlendFunc"))
  glLogicOp = cast[proc (opcode: GLenum) {.cdecl, gcsafe.}](load("glLogicOp"))
  glStencilFunc = cast[proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl, gcsafe.}](load("glStencilFunc"))
  glStencilOp = cast[proc (fail: GLenum, zfail: GLenum, zpass: GLenum) {.cdecl, gcsafe.}](load("glStencilOp"))
  glDepthFunc = cast[proc (`func`: GLenum) {.cdecl, gcsafe.}](load("glDepthFunc"))
  glPixelStoref = cast[proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glPixelStoref"))
  glPixelStorei = cast[proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glPixelStorei"))
  glReadBuffer = cast[proc (src: GLenum) {.cdecl, gcsafe.}](load("glReadBuffer"))
  glReadPixels = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glReadPixels"))
  glGetBooleanv = cast[proc (pname: GLenum, data: ptr GLboolean) {.cdecl, gcsafe.}](load("glGetBooleanv"))
  glGetDoublev = cast[proc (pname: GLenum, data: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetDoublev"))
  glGetError = cast[proc (): GLenum {.cdecl, gcsafe.}](load("glGetError"))
  glGetFloatv = cast[proc (pname: GLenum, data: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetFloatv"))
  glGetIntegerv = cast[proc (pname: GLenum, data: ptr GLint) {.cdecl, gcsafe.}](load("glGetIntegerv"))
  glGetString = cast[proc (name: GLenum): ptr GLubyte {.cdecl, gcsafe.}](load("glGetString"))
  glGetTexImage = cast[proc (target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glGetTexImage"))
  glGetTexParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetTexParameterfv"))
  glGetTexParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetTexParameteriv"))
  glGetTexLevelParameterfv = cast[proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetTexLevelParameterfv"))
  glGetTexLevelParameteriv = cast[proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetTexLevelParameteriv"))
  glIsEnabled = cast[proc (cap: GLenum): GLboolean {.cdecl, gcsafe.}](load("glIsEnabled"))
  glDepthRange = cast[proc (n: GLdouble, f: GLdouble) {.cdecl, gcsafe.}](load("glDepthRange"))
  glViewport = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glViewport"))
  glNewList = cast[proc (list: GLuint, mode: GLenum) {.cdecl, gcsafe.}](load("glNewList"))
  glEndList = cast[proc () {.cdecl, gcsafe.}](load("glEndList"))
  glCallList = cast[proc (list: GLuint) {.cdecl, gcsafe.}](load("glCallList"))
  glCallLists = cast[proc (n: GLsizei, `type`: GLenum, lists: pointer) {.cdecl, gcsafe.}](load("glCallLists"))
  glDeleteLists = cast[proc (list: GLuint, range: GLsizei) {.cdecl, gcsafe.}](load("glDeleteLists"))
  glGenLists = cast[proc (range: GLsizei): GLuint {.cdecl, gcsafe.}](load("glGenLists"))
  glListBase = cast[proc (base: GLuint) {.cdecl, gcsafe.}](load("glListBase"))
  glBegin = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glBegin"))
  glBitmap = cast[proc (width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: ptr GLubyte) {.cdecl, gcsafe.}](load("glBitmap"))
  glColor3b = cast[proc (red: GLbyte, green: GLbyte, blue: GLbyte) {.cdecl, gcsafe.}](load("glColor3b"))
  glColor3bv = cast[proc (v: ptr GLbyte) {.cdecl, gcsafe.}](load("glColor3bv"))
  glColor3d = cast[proc (red: GLdouble, green: GLdouble, blue: GLdouble) {.cdecl, gcsafe.}](load("glColor3d"))
  glColor3dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glColor3dv"))
  glColor3f = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat) {.cdecl, gcsafe.}](load("glColor3f"))
  glColor3fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glColor3fv"))
  glColor3i = cast[proc (red: GLint, green: GLint, blue: GLint) {.cdecl, gcsafe.}](load("glColor3i"))
  glColor3iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glColor3iv"))
  glColor3s = cast[proc (red: GLshort, green: GLshort, blue: GLshort) {.cdecl, gcsafe.}](load("glColor3s"))
  glColor3sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glColor3sv"))
  glColor3ub = cast[proc (red: GLubyte, green: GLubyte, blue: GLubyte) {.cdecl, gcsafe.}](load("glColor3ub"))
  glColor3ubv = cast[proc (v: ptr GLubyte) {.cdecl, gcsafe.}](load("glColor3ubv"))
  glColor3ui = cast[proc (red: GLuint, green: GLuint, blue: GLuint) {.cdecl, gcsafe.}](load("glColor3ui"))
  glColor3uiv = cast[proc (v: ptr GLuint) {.cdecl, gcsafe.}](load("glColor3uiv"))
  glColor3us = cast[proc (red: GLushort, green: GLushort, blue: GLushort) {.cdecl, gcsafe.}](load("glColor3us"))
  glColor3usv = cast[proc (v: ptr GLushort) {.cdecl, gcsafe.}](load("glColor3usv"))
  glColor4b = cast[proc (red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) {.cdecl, gcsafe.}](load("glColor4b"))
  glColor4bv = cast[proc (v: ptr GLbyte) {.cdecl, gcsafe.}](load("glColor4bv"))
  glColor4d = cast[proc (red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) {.cdecl, gcsafe.}](load("glColor4d"))
  glColor4dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glColor4dv"))
  glColor4f = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}](load("glColor4f"))
  glColor4fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glColor4fv"))
  glColor4i = cast[proc (red: GLint, green: GLint, blue: GLint, alpha: GLint) {.cdecl, gcsafe.}](load("glColor4i"))
  glColor4iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glColor4iv"))
  glColor4s = cast[proc (red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) {.cdecl, gcsafe.}](load("glColor4s"))
  glColor4sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glColor4sv"))
  glColor4ub = cast[proc (red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) {.cdecl, gcsafe.}](load("glColor4ub"))
  glColor4ubv = cast[proc (v: ptr GLubyte) {.cdecl, gcsafe.}](load("glColor4ubv"))
  glColor4ui = cast[proc (red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) {.cdecl, gcsafe.}](load("glColor4ui"))
  glColor4uiv = cast[proc (v: ptr GLuint) {.cdecl, gcsafe.}](load("glColor4uiv"))
  glColor4us = cast[proc (red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) {.cdecl, gcsafe.}](load("glColor4us"))
  glColor4usv = cast[proc (v: ptr GLushort) {.cdecl, gcsafe.}](load("glColor4usv"))
  glEdgeFlag = cast[proc (flag: GLboolean) {.cdecl, gcsafe.}](load("glEdgeFlag"))
  glEdgeFlagv = cast[proc (flag: ptr GLboolean) {.cdecl, gcsafe.}](load("glEdgeFlagv"))
  glEnd = cast[proc () {.cdecl, gcsafe.}](load("glEnd"))
  glIndexd = cast[proc (c: GLdouble) {.cdecl, gcsafe.}](load("glIndexd"))
  glIndexdv = cast[proc (c: ptr GLdouble) {.cdecl, gcsafe.}](load("glIndexdv"))
  glIndexf = cast[proc (c: GLfloat) {.cdecl, gcsafe.}](load("glIndexf"))
  glIndexfv = cast[proc (c: ptr GLfloat) {.cdecl, gcsafe.}](load("glIndexfv"))
  glIndexi = cast[proc (c: GLint) {.cdecl, gcsafe.}](load("glIndexi"))
  glIndexiv = cast[proc (c: ptr GLint) {.cdecl, gcsafe.}](load("glIndexiv"))
  glIndexs = cast[proc (c: GLshort) {.cdecl, gcsafe.}](load("glIndexs"))
  glIndexsv = cast[proc (c: ptr GLshort) {.cdecl, gcsafe.}](load("glIndexsv"))
  glNormal3b = cast[proc (nx: GLbyte, ny: GLbyte, nz: GLbyte) {.cdecl, gcsafe.}](load("glNormal3b"))
  glNormal3bv = cast[proc (v: ptr GLbyte) {.cdecl, gcsafe.}](load("glNormal3bv"))
  glNormal3d = cast[proc (nx: GLdouble, ny: GLdouble, nz: GLdouble) {.cdecl, gcsafe.}](load("glNormal3d"))
  glNormal3dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glNormal3dv"))
  glNormal3f = cast[proc (nx: GLfloat, ny: GLfloat, nz: GLfloat) {.cdecl, gcsafe.}](load("glNormal3f"))
  glNormal3fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glNormal3fv"))
  glNormal3i = cast[proc (nx: GLint, ny: GLint, nz: GLint) {.cdecl, gcsafe.}](load("glNormal3i"))
  glNormal3iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glNormal3iv"))
  glNormal3s = cast[proc (nx: GLshort, ny: GLshort, nz: GLshort) {.cdecl, gcsafe.}](load("glNormal3s"))
  glNormal3sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glNormal3sv"))
  glRasterPos2d = cast[proc (x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}](load("glRasterPos2d"))
  glRasterPos2dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glRasterPos2dv"))
  glRasterPos2f = cast[proc (x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}](load("glRasterPos2f"))
  glRasterPos2fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glRasterPos2fv"))
  glRasterPos2i = cast[proc (x: GLint, y: GLint) {.cdecl, gcsafe.}](load("glRasterPos2i"))
  glRasterPos2iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glRasterPos2iv"))
  glRasterPos2s = cast[proc (x: GLshort, y: GLshort) {.cdecl, gcsafe.}](load("glRasterPos2s"))
  glRasterPos2sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glRasterPos2sv"))
  glRasterPos3d = cast[proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}](load("glRasterPos3d"))
  glRasterPos3dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glRasterPos3dv"))
  glRasterPos3f = cast[proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}](load("glRasterPos3f"))
  glRasterPos3fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glRasterPos3fv"))
  glRasterPos3i = cast[proc (x: GLint, y: GLint, z: GLint) {.cdecl, gcsafe.}](load("glRasterPos3i"))
  glRasterPos3iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glRasterPos3iv"))
  glRasterPos3s = cast[proc (x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}](load("glRasterPos3s"))
  glRasterPos3sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glRasterPos3sv"))
  glRasterPos4d = cast[proc (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}](load("glRasterPos4d"))
  glRasterPos4dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glRasterPos4dv"))
  glRasterPos4f = cast[proc (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}](load("glRasterPos4f"))
  glRasterPos4fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glRasterPos4fv"))
  glRasterPos4i = cast[proc (x: GLint, y: GLint, z: GLint, w: GLint) {.cdecl, gcsafe.}](load("glRasterPos4i"))
  glRasterPos4iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glRasterPos4iv"))
  glRasterPos4s = cast[proc (x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.cdecl, gcsafe.}](load("glRasterPos4s"))
  glRasterPos4sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glRasterPos4sv"))
  glRectd = cast[proc (x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) {.cdecl, gcsafe.}](load("glRectd"))
  glRectdv = cast[proc (v1: ptr GLdouble, v2: ptr GLdouble) {.cdecl, gcsafe.}](load("glRectdv"))
  glRectf = cast[proc (x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) {.cdecl, gcsafe.}](load("glRectf"))
  glRectfv = cast[proc (v1: ptr GLfloat, v2: ptr GLfloat) {.cdecl, gcsafe.}](load("glRectfv"))
  glRecti = cast[proc (x1: GLint, y1: GLint, x2: GLint, y2: GLint) {.cdecl, gcsafe.}](load("glRecti"))
  glRectiv = cast[proc (v1: ptr GLint, v2: ptr GLint) {.cdecl, gcsafe.}](load("glRectiv"))
  glRects = cast[proc (x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) {.cdecl, gcsafe.}](load("glRects"))
  glRectsv = cast[proc (v1: ptr GLshort, v2: ptr GLshort) {.cdecl, gcsafe.}](load("glRectsv"))
  glTexCoord1d = cast[proc (s: GLdouble) {.cdecl, gcsafe.}](load("glTexCoord1d"))
  glTexCoord1dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glTexCoord1dv"))
  glTexCoord1f = cast[proc (s: GLfloat) {.cdecl, gcsafe.}](load("glTexCoord1f"))
  glTexCoord1fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glTexCoord1fv"))
  glTexCoord1i = cast[proc (s: GLint) {.cdecl, gcsafe.}](load("glTexCoord1i"))
  glTexCoord1iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glTexCoord1iv"))
  glTexCoord1s = cast[proc (s: GLshort) {.cdecl, gcsafe.}](load("glTexCoord1s"))
  glTexCoord1sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glTexCoord1sv"))
  glTexCoord2d = cast[proc (s: GLdouble, t: GLdouble) {.cdecl, gcsafe.}](load("glTexCoord2d"))
  glTexCoord2dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glTexCoord2dv"))
  glTexCoord2f = cast[proc (s: GLfloat, t: GLfloat) {.cdecl, gcsafe.}](load("glTexCoord2f"))
  glTexCoord2fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glTexCoord2fv"))
  glTexCoord2i = cast[proc (s: GLint, t: GLint) {.cdecl, gcsafe.}](load("glTexCoord2i"))
  glTexCoord2iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glTexCoord2iv"))
  glTexCoord2s = cast[proc (s: GLshort, t: GLshort) {.cdecl, gcsafe.}](load("glTexCoord2s"))
  glTexCoord2sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glTexCoord2sv"))
  glTexCoord3d = cast[proc (s: GLdouble, t: GLdouble, r: GLdouble) {.cdecl, gcsafe.}](load("glTexCoord3d"))
  glTexCoord3dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glTexCoord3dv"))
  glTexCoord3f = cast[proc (s: GLfloat, t: GLfloat, r: GLfloat) {.cdecl, gcsafe.}](load("glTexCoord3f"))
  glTexCoord3fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glTexCoord3fv"))
  glTexCoord3i = cast[proc (s: GLint, t: GLint, r: GLint) {.cdecl, gcsafe.}](load("glTexCoord3i"))
  glTexCoord3iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glTexCoord3iv"))
  glTexCoord3s = cast[proc (s: GLshort, t: GLshort, r: GLshort) {.cdecl, gcsafe.}](load("glTexCoord3s"))
  glTexCoord3sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glTexCoord3sv"))
  glTexCoord4d = cast[proc (s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) {.cdecl, gcsafe.}](load("glTexCoord4d"))
  glTexCoord4dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glTexCoord4dv"))
  glTexCoord4f = cast[proc (s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) {.cdecl, gcsafe.}](load("glTexCoord4f"))
  glTexCoord4fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glTexCoord4fv"))
  glTexCoord4i = cast[proc (s: GLint, t: GLint, r: GLint, q: GLint) {.cdecl, gcsafe.}](load("glTexCoord4i"))
  glTexCoord4iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glTexCoord4iv"))
  glTexCoord4s = cast[proc (s: GLshort, t: GLshort, r: GLshort, q: GLshort) {.cdecl, gcsafe.}](load("glTexCoord4s"))
  glTexCoord4sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glTexCoord4sv"))
  glVertex2d = cast[proc (x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}](load("glVertex2d"))
  glVertex2dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertex2dv"))
  glVertex2f = cast[proc (x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}](load("glVertex2f"))
  glVertex2fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertex2fv"))
  glVertex2i = cast[proc (x: GLint, y: GLint) {.cdecl, gcsafe.}](load("glVertex2i"))
  glVertex2iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glVertex2iv"))
  glVertex2s = cast[proc (x: GLshort, y: GLshort) {.cdecl, gcsafe.}](load("glVertex2s"))
  glVertex2sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertex2sv"))
  glVertex3d = cast[proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}](load("glVertex3d"))
  glVertex3dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertex3dv"))
  glVertex3f = cast[proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}](load("glVertex3f"))
  glVertex3fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertex3fv"))
  glVertex3i = cast[proc (x: GLint, y: GLint, z: GLint) {.cdecl, gcsafe.}](load("glVertex3i"))
  glVertex3iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glVertex3iv"))
  glVertex3s = cast[proc (x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}](load("glVertex3s"))
  glVertex3sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertex3sv"))
  glVertex4d = cast[proc (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}](load("glVertex4d"))
  glVertex4dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertex4dv"))
  glVertex4f = cast[proc (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}](load("glVertex4f"))
  glVertex4fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertex4fv"))
  glVertex4i = cast[proc (x: GLint, y: GLint, z: GLint, w: GLint) {.cdecl, gcsafe.}](load("glVertex4i"))
  glVertex4iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glVertex4iv"))
  glVertex4s = cast[proc (x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.cdecl, gcsafe.}](load("glVertex4s"))
  glVertex4sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertex4sv"))
  glClipPlane = cast[proc (plane: GLenum, equation: ptr GLdouble) {.cdecl, gcsafe.}](load("glClipPlane"))
  glColorMaterial = cast[proc (face: GLenum, mode: GLenum) {.cdecl, gcsafe.}](load("glColorMaterial"))
  glFogf = cast[proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glFogf"))
  glFogfv = cast[proc (pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glFogfv"))
  glFogi = cast[proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glFogi"))
  glFogiv = cast[proc (pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glFogiv"))
  glLightf = cast[proc (light: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glLightf"))
  glLightfv = cast[proc (light: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glLightfv"))
  glLighti = cast[proc (light: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glLighti"))
  glLightiv = cast[proc (light: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glLightiv"))
  glLightModelf = cast[proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glLightModelf"))
  glLightModelfv = cast[proc (pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glLightModelfv"))
  glLightModeli = cast[proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glLightModeli"))
  glLightModeliv = cast[proc (pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glLightModeliv"))
  glLineStipple = cast[proc (factor: GLint, pattern: GLushort) {.cdecl, gcsafe.}](load("glLineStipple"))
  glMaterialf = cast[proc (face: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glMaterialf"))
  glMaterialfv = cast[proc (face: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glMaterialfv"))
  glMateriali = cast[proc (face: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glMateriali"))
  glMaterialiv = cast[proc (face: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glMaterialiv"))
  glPolygonStipple = cast[proc (mask: ptr GLubyte) {.cdecl, gcsafe.}](load("glPolygonStipple"))
  glShadeModel = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glShadeModel"))
  glTexEnvf = cast[proc (target: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glTexEnvf"))
  glTexEnvfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glTexEnvfv"))
  glTexEnvi = cast[proc (target: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glTexEnvi"))
  glTexEnviv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glTexEnviv"))
  glTexGend = cast[proc (coord: GLenum, pname: GLenum, param: GLdouble) {.cdecl, gcsafe.}](load("glTexGend"))
  glTexGendv = cast[proc (coord: GLenum, pname: GLenum, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glTexGendv"))
  glTexGenf = cast[proc (coord: GLenum, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glTexGenf"))
  glTexGenfv = cast[proc (coord: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glTexGenfv"))
  glTexGeni = cast[proc (coord: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glTexGeni"))
  glTexGeniv = cast[proc (coord: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glTexGeniv"))
  glFeedbackBuffer = cast[proc (size: GLsizei, `type`: GLenum, buffer: ptr GLfloat) {.cdecl, gcsafe.}](load("glFeedbackBuffer"))
  glSelectBuffer = cast[proc (size: GLsizei, buffer: ptr GLuint) {.cdecl, gcsafe.}](load("glSelectBuffer"))
  glRenderMode = cast[proc (mode: GLenum): GLint {.cdecl, gcsafe.}](load("glRenderMode"))
  glInitNames = cast[proc () {.cdecl, gcsafe.}](load("glInitNames"))
  glLoadName = cast[proc (name: GLuint) {.cdecl, gcsafe.}](load("glLoadName"))
  glPassThrough = cast[proc (token: GLfloat) {.cdecl, gcsafe.}](load("glPassThrough"))
  glPopName = cast[proc () {.cdecl, gcsafe.}](load("glPopName"))
  glPushName = cast[proc (name: GLuint) {.cdecl, gcsafe.}](load("glPushName"))
  glClearAccum = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}](load("glClearAccum"))
  glClearIndex = cast[proc (c: GLfloat) {.cdecl, gcsafe.}](load("glClearIndex"))
  glIndexMask = cast[proc (mask: GLuint) {.cdecl, gcsafe.}](load("glIndexMask"))
  glAccum = cast[proc (op: GLenum, value: GLfloat) {.cdecl, gcsafe.}](load("glAccum"))
  glPopAttrib = cast[proc () {.cdecl, gcsafe.}](load("glPopAttrib"))
  glPushAttrib = cast[proc (mask: GLbitfield) {.cdecl, gcsafe.}](load("glPushAttrib"))
  glMap1d = cast[proc (target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: ptr GLdouble) {.cdecl, gcsafe.}](load("glMap1d"))
  glMap1f = cast[proc (target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: ptr GLfloat) {.cdecl, gcsafe.}](load("glMap1f"))
  glMap2d = cast[proc (target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: ptr GLdouble) {.cdecl, gcsafe.}](load("glMap2d"))
  glMap2f = cast[proc (target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: ptr GLfloat) {.cdecl, gcsafe.}](load("glMap2f"))
  glMapGrid1d = cast[proc (un: GLint, u1: GLdouble, u2: GLdouble) {.cdecl, gcsafe.}](load("glMapGrid1d"))
  glMapGrid1f = cast[proc (un: GLint, u1: GLfloat, u2: GLfloat) {.cdecl, gcsafe.}](load("glMapGrid1f"))
  glMapGrid2d = cast[proc (un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) {.cdecl, gcsafe.}](load("glMapGrid2d"))
  glMapGrid2f = cast[proc (un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) {.cdecl, gcsafe.}](load("glMapGrid2f"))
  glEvalCoord1d = cast[proc (u: GLdouble) {.cdecl, gcsafe.}](load("glEvalCoord1d"))
  glEvalCoord1dv = cast[proc (u: ptr GLdouble) {.cdecl, gcsafe.}](load("glEvalCoord1dv"))
  glEvalCoord1f = cast[proc (u: GLfloat) {.cdecl, gcsafe.}](load("glEvalCoord1f"))
  glEvalCoord1fv = cast[proc (u: ptr GLfloat) {.cdecl, gcsafe.}](load("glEvalCoord1fv"))
  glEvalCoord2d = cast[proc (u: GLdouble, v: GLdouble) {.cdecl, gcsafe.}](load("glEvalCoord2d"))
  glEvalCoord2dv = cast[proc (u: ptr GLdouble) {.cdecl, gcsafe.}](load("glEvalCoord2dv"))
  glEvalCoord2f = cast[proc (u: GLfloat, v: GLfloat) {.cdecl, gcsafe.}](load("glEvalCoord2f"))
  glEvalCoord2fv = cast[proc (u: ptr GLfloat) {.cdecl, gcsafe.}](load("glEvalCoord2fv"))
  glEvalMesh1 = cast[proc (mode: GLenum, i1: GLint, i2: GLint) {.cdecl, gcsafe.}](load("glEvalMesh1"))
  glEvalPoint1 = cast[proc (i: GLint) {.cdecl, gcsafe.}](load("glEvalPoint1"))
  glEvalMesh2 = cast[proc (mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) {.cdecl, gcsafe.}](load("glEvalMesh2"))
  glEvalPoint2 = cast[proc (i: GLint, j: GLint) {.cdecl, gcsafe.}](load("glEvalPoint2"))
  glAlphaFunc = cast[proc (`func`: GLenum, `ref`: GLfloat) {.cdecl, gcsafe.}](load("glAlphaFunc"))
  glPixelZoom = cast[proc (xfactor: GLfloat, yfactor: GLfloat) {.cdecl, gcsafe.}](load("glPixelZoom"))
  glPixelTransferf = cast[proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glPixelTransferf"))
  glPixelTransferi = cast[proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glPixelTransferi"))
  glPixelMapfv = cast[proc (map: GLenum, mapsize: GLsizei, values: ptr GLfloat) {.cdecl, gcsafe.}](load("glPixelMapfv"))
  glPixelMapuiv = cast[proc (map: GLenum, mapsize: GLsizei, values: ptr GLuint) {.cdecl, gcsafe.}](load("glPixelMapuiv"))
  glPixelMapusv = cast[proc (map: GLenum, mapsize: GLsizei, values: ptr GLushort) {.cdecl, gcsafe.}](load("glPixelMapusv"))
  glCopyPixels = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, `type`: GLenum) {.cdecl, gcsafe.}](load("glCopyPixels"))
  glDrawPixels = cast[proc (width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glDrawPixels"))
  glGetClipPlane = cast[proc (plane: GLenum, equation: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetClipPlane"))
  glGetLightfv = cast[proc (light: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetLightfv"))
  glGetLightiv = cast[proc (light: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetLightiv"))
  glGetMapdv = cast[proc (target: GLenum, query: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetMapdv"))
  glGetMapfv = cast[proc (target: GLenum, query: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetMapfv"))
  glGetMapiv = cast[proc (target: GLenum, query: GLenum, v: ptr GLint) {.cdecl, gcsafe.}](load("glGetMapiv"))
  glGetMaterialfv = cast[proc (face: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetMaterialfv"))
  glGetMaterialiv = cast[proc (face: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetMaterialiv"))
  glGetPixelMapfv = cast[proc (map: GLenum, values: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetPixelMapfv"))
  glGetPixelMapuiv = cast[proc (map: GLenum, values: ptr GLuint) {.cdecl, gcsafe.}](load("glGetPixelMapuiv"))
  glGetPixelMapusv = cast[proc (map: GLenum, values: ptr GLushort) {.cdecl, gcsafe.}](load("glGetPixelMapusv"))
  glGetPolygonStipple = cast[proc (mask: ptr GLubyte) {.cdecl, gcsafe.}](load("glGetPolygonStipple"))
  glGetTexEnvfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetTexEnvfv"))
  glGetTexEnviv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetTexEnviv"))
  glGetTexGendv = cast[proc (coord: GLenum, pname: GLenum, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetTexGendv"))
  glGetTexGenfv = cast[proc (coord: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetTexGenfv"))
  glGetTexGeniv = cast[proc (coord: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetTexGeniv"))
  glIsList = cast[proc (list: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsList"))
  glFrustum = cast[proc (left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) {.cdecl, gcsafe.}](load("glFrustum"))
  glLoadIdentity = cast[proc () {.cdecl, gcsafe.}](load("glLoadIdentity"))
  glLoadMatrixf = cast[proc (m: ptr GLfloat) {.cdecl, gcsafe.}](load("glLoadMatrixf"))
  glLoadMatrixd = cast[proc (m: ptr GLdouble) {.cdecl, gcsafe.}](load("glLoadMatrixd"))
  glMatrixMode = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glMatrixMode"))
  glMultMatrixf = cast[proc (m: ptr GLfloat) {.cdecl, gcsafe.}](load("glMultMatrixf"))
  glMultMatrixd = cast[proc (m: ptr GLdouble) {.cdecl, gcsafe.}](load("glMultMatrixd"))
  glOrtho = cast[proc (left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) {.cdecl, gcsafe.}](load("glOrtho"))
  glPopMatrix = cast[proc () {.cdecl, gcsafe.}](load("glPopMatrix"))
  glPushMatrix = cast[proc () {.cdecl, gcsafe.}](load("glPushMatrix"))
  glRotated = cast[proc (angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}](load("glRotated"))
  glRotatef = cast[proc (angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}](load("glRotatef"))
  glScaled = cast[proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}](load("glScaled"))
  glScalef = cast[proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}](load("glScalef"))
  glTranslated = cast[proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}](load("glTranslated"))
  glTranslatef = cast[proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}](load("glTranslatef"))


proc load_GL_VERSION_1_1(load: proc) =
  if not GLAD_GL_VERSION_1_1: return

  glDrawArrays = cast[proc (mode: GLenum, first: GLint, count: GLsizei) {.cdecl, gcsafe.}](load("glDrawArrays"))
  glDrawElements = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer) {.cdecl, gcsafe.}](load("glDrawElements"))
  glGetPointerv = cast[proc (pname: GLenum, params: ptr pointer) {.cdecl, gcsafe.}](load("glGetPointerv"))
  glPolygonOffset = cast[proc (factor: GLfloat, units: GLfloat) {.cdecl, gcsafe.}](load("glPolygonOffset"))
  glCopyTexImage1D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) {.cdecl, gcsafe.}](load("glCopyTexImage1D"))
  glCopyTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.cdecl, gcsafe.}](load("glCopyTexImage2D"))
  glCopyTexSubImage1D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.cdecl, gcsafe.}](load("glCopyTexSubImage1D"))
  glCopyTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glCopyTexSubImage2D"))
  glTexSubImage1D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTexSubImage1D"))
  glTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTexSubImage2D"))
  glBindTexture = cast[proc (target: GLenum, texture: GLuint) {.cdecl, gcsafe.}](load("glBindTexture"))
  glDeleteTextures = cast[proc (n: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteTextures"))
  glGenTextures = cast[proc (n: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}](load("glGenTextures"))
  glIsTexture = cast[proc (texture: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsTexture"))
  glArrayElement = cast[proc (i: GLint) {.cdecl, gcsafe.}](load("glArrayElement"))
  glColorPointer = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glColorPointer"))
  glDisableClientState = cast[proc (array: GLenum) {.cdecl, gcsafe.}](load("glDisableClientState"))
  glEdgeFlagPointer = cast[proc (stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glEdgeFlagPointer"))
  glEnableClientState = cast[proc (array: GLenum) {.cdecl, gcsafe.}](load("glEnableClientState"))
  glIndexPointer = cast[proc (`type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glIndexPointer"))
  glInterleavedArrays = cast[proc (format: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glInterleavedArrays"))
  glNormalPointer = cast[proc (`type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glNormalPointer"))
  glTexCoordPointer = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glTexCoordPointer"))
  glVertexPointer = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glVertexPointer"))
  glAreTexturesResident = cast[proc (n: GLsizei, textures: ptr GLuint, residences: ptr GLboolean): GLboolean {.cdecl, gcsafe.}](load("glAreTexturesResident"))
  glPrioritizeTextures = cast[proc (n: GLsizei, textures: ptr GLuint, priorities: ptr GLfloat) {.cdecl, gcsafe.}](load("glPrioritizeTextures"))
  glIndexub = cast[proc (c: GLubyte) {.cdecl, gcsafe.}](load("glIndexub"))
  glIndexubv = cast[proc (c: ptr GLubyte) {.cdecl, gcsafe.}](load("glIndexubv"))
  glPopClientAttrib = cast[proc () {.cdecl, gcsafe.}](load("glPopClientAttrib"))
  glPushClientAttrib = cast[proc (mask: GLbitfield) {.cdecl, gcsafe.}](load("glPushClientAttrib"))


proc load_GL_VERSION_1_2(load: proc) =
  if not GLAD_GL_VERSION_1_2: return

  glDrawRangeElements = cast[proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer) {.cdecl, gcsafe.}](load("glDrawRangeElements"))
  glTexImage3D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTexImage3D"))
  glTexSubImage3D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTexSubImage3D"))
  glCopyTexSubImage3D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glCopyTexSubImage3D"))


proc load_GL_VERSION_1_3(load: proc) =
  if not GLAD_GL_VERSION_1_3: return

  glActiveTexture = cast[proc (texture: GLenum) {.cdecl, gcsafe.}](load("glActiveTexture"))
  glSampleCoverage = cast[proc (value: GLfloat, invert: GLboolean) {.cdecl, gcsafe.}](load("glSampleCoverage"))
  glCompressedTexImage3D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTexImage3D"))
  glCompressedTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTexImage2D"))
  glCompressedTexImage1D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTexImage1D"))
  glCompressedTexSubImage3D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTexSubImage3D"))
  glCompressedTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTexSubImage2D"))
  glCompressedTexSubImage1D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTexSubImage1D"))
  glGetCompressedTexImage = cast[proc (target: GLenum, level: GLint, img: pointer) {.cdecl, gcsafe.}](load("glGetCompressedTexImage"))
  glClientActiveTexture = cast[proc (texture: GLenum) {.cdecl, gcsafe.}](load("glClientActiveTexture"))
  glMultiTexCoord1d = cast[proc (target: GLenum, s: GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord1d"))
  glMultiTexCoord1dv = cast[proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord1dv"))
  glMultiTexCoord1f = cast[proc (target: GLenum, s: GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord1f"))
  glMultiTexCoord1fv = cast[proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord1fv"))
  glMultiTexCoord1i = cast[proc (target: GLenum, s: GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord1i"))
  glMultiTexCoord1iv = cast[proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord1iv"))
  glMultiTexCoord1s = cast[proc (target: GLenum, s: GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord1s"))
  glMultiTexCoord1sv = cast[proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord1sv"))
  glMultiTexCoord2d = cast[proc (target: GLenum, s: GLdouble, t: GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord2d"))
  glMultiTexCoord2dv = cast[proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord2dv"))
  glMultiTexCoord2f = cast[proc (target: GLenum, s: GLfloat, t: GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord2f"))
  glMultiTexCoord2fv = cast[proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord2fv"))
  glMultiTexCoord2i = cast[proc (target: GLenum, s: GLint, t: GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord2i"))
  glMultiTexCoord2iv = cast[proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord2iv"))
  glMultiTexCoord2s = cast[proc (target: GLenum, s: GLshort, t: GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord2s"))
  glMultiTexCoord2sv = cast[proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord2sv"))
  glMultiTexCoord3d = cast[proc (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord3d"))
  glMultiTexCoord3dv = cast[proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord3dv"))
  glMultiTexCoord3f = cast[proc (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord3f"))
  glMultiTexCoord3fv = cast[proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord3fv"))
  glMultiTexCoord3i = cast[proc (target: GLenum, s: GLint, t: GLint, r: GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord3i"))
  glMultiTexCoord3iv = cast[proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord3iv"))
  glMultiTexCoord3s = cast[proc (target: GLenum, s: GLshort, t: GLshort, r: GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord3s"))
  glMultiTexCoord3sv = cast[proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord3sv"))
  glMultiTexCoord4d = cast[proc (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord4d"))
  glMultiTexCoord4dv = cast[proc (target: GLenum, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glMultiTexCoord4dv"))
  glMultiTexCoord4f = cast[proc (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord4f"))
  glMultiTexCoord4fv = cast[proc (target: GLenum, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glMultiTexCoord4fv"))
  glMultiTexCoord4i = cast[proc (target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord4i"))
  glMultiTexCoord4iv = cast[proc (target: GLenum, v: ptr GLint) {.cdecl, gcsafe.}](load("glMultiTexCoord4iv"))
  glMultiTexCoord4s = cast[proc (target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord4s"))
  glMultiTexCoord4sv = cast[proc (target: GLenum, v: ptr GLshort) {.cdecl, gcsafe.}](load("glMultiTexCoord4sv"))
  glLoadTransposeMatrixf = cast[proc (m: ptr GLfloat) {.cdecl, gcsafe.}](load("glLoadTransposeMatrixf"))
  glLoadTransposeMatrixd = cast[proc (m: ptr GLdouble) {.cdecl, gcsafe.}](load("glLoadTransposeMatrixd"))
  glMultTransposeMatrixf = cast[proc (m: ptr GLfloat) {.cdecl, gcsafe.}](load("glMultTransposeMatrixf"))
  glMultTransposeMatrixd = cast[proc (m: ptr GLdouble) {.cdecl, gcsafe.}](load("glMultTransposeMatrixd"))


proc load_GL_VERSION_1_4(load: proc) =
  if not GLAD_GL_VERSION_1_4: return

  glBlendFuncSeparate = cast[proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.cdecl, gcsafe.}](load("glBlendFuncSeparate"))
  glMultiDrawArrays = cast[proc (mode: GLenum, first: ptr GLint, count: ptr GLsizei, drawcount: GLsizei) {.cdecl, gcsafe.}](load("glMultiDrawArrays"))
  glMultiDrawElements = cast[proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei) {.cdecl, gcsafe.}](load("glMultiDrawElements"))
  glPointParameterf = cast[proc (pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glPointParameterf"))
  glPointParameterfv = cast[proc (pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glPointParameterfv"))
  glPointParameteri = cast[proc (pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glPointParameteri"))
  glPointParameteriv = cast[proc (pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glPointParameteriv"))
  glFogCoordf = cast[proc (coord: GLfloat) {.cdecl, gcsafe.}](load("glFogCoordf"))
  glFogCoordfv = cast[proc (coord: ptr GLfloat) {.cdecl, gcsafe.}](load("glFogCoordfv"))
  glFogCoordd = cast[proc (coord: GLdouble) {.cdecl, gcsafe.}](load("glFogCoordd"))
  glFogCoorddv = cast[proc (coord: ptr GLdouble) {.cdecl, gcsafe.}](load("glFogCoorddv"))
  glFogCoordPointer = cast[proc (`type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glFogCoordPointer"))
  glSecondaryColor3b = cast[proc (red: GLbyte, green: GLbyte, blue: GLbyte) {.cdecl, gcsafe.}](load("glSecondaryColor3b"))
  glSecondaryColor3bv = cast[proc (v: ptr GLbyte) {.cdecl, gcsafe.}](load("glSecondaryColor3bv"))
  glSecondaryColor3d = cast[proc (red: GLdouble, green: GLdouble, blue: GLdouble) {.cdecl, gcsafe.}](load("glSecondaryColor3d"))
  glSecondaryColor3dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glSecondaryColor3dv"))
  glSecondaryColor3f = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat) {.cdecl, gcsafe.}](load("glSecondaryColor3f"))
  glSecondaryColor3fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glSecondaryColor3fv"))
  glSecondaryColor3i = cast[proc (red: GLint, green: GLint, blue: GLint) {.cdecl, gcsafe.}](load("glSecondaryColor3i"))
  glSecondaryColor3iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glSecondaryColor3iv"))
  glSecondaryColor3s = cast[proc (red: GLshort, green: GLshort, blue: GLshort) {.cdecl, gcsafe.}](load("glSecondaryColor3s"))
  glSecondaryColor3sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glSecondaryColor3sv"))
  glSecondaryColor3ub = cast[proc (red: GLubyte, green: GLubyte, blue: GLubyte) {.cdecl, gcsafe.}](load("glSecondaryColor3ub"))
  glSecondaryColor3ubv = cast[proc (v: ptr GLubyte) {.cdecl, gcsafe.}](load("glSecondaryColor3ubv"))
  glSecondaryColor3ui = cast[proc (red: GLuint, green: GLuint, blue: GLuint) {.cdecl, gcsafe.}](load("glSecondaryColor3ui"))
  glSecondaryColor3uiv = cast[proc (v: ptr GLuint) {.cdecl, gcsafe.}](load("glSecondaryColor3uiv"))
  glSecondaryColor3us = cast[proc (red: GLushort, green: GLushort, blue: GLushort) {.cdecl, gcsafe.}](load("glSecondaryColor3us"))
  glSecondaryColor3usv = cast[proc (v: ptr GLushort) {.cdecl, gcsafe.}](load("glSecondaryColor3usv"))
  glSecondaryColorPointer = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glSecondaryColorPointer"))
  glWindowPos2d = cast[proc (x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}](load("glWindowPos2d"))
  glWindowPos2dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glWindowPos2dv"))
  glWindowPos2f = cast[proc (x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}](load("glWindowPos2f"))
  glWindowPos2fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glWindowPos2fv"))
  glWindowPos2i = cast[proc (x: GLint, y: GLint) {.cdecl, gcsafe.}](load("glWindowPos2i"))
  glWindowPos2iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glWindowPos2iv"))
  glWindowPos2s = cast[proc (x: GLshort, y: GLshort) {.cdecl, gcsafe.}](load("glWindowPos2s"))
  glWindowPos2sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glWindowPos2sv"))
  glWindowPos3d = cast[proc (x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}](load("glWindowPos3d"))
  glWindowPos3dv = cast[proc (v: ptr GLdouble) {.cdecl, gcsafe.}](load("glWindowPos3dv"))
  glWindowPos3f = cast[proc (x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}](load("glWindowPos3f"))
  glWindowPos3fv = cast[proc (v: ptr GLfloat) {.cdecl, gcsafe.}](load("glWindowPos3fv"))
  glWindowPos3i = cast[proc (x: GLint, y: GLint, z: GLint) {.cdecl, gcsafe.}](load("glWindowPos3i"))
  glWindowPos3iv = cast[proc (v: ptr GLint) {.cdecl, gcsafe.}](load("glWindowPos3iv"))
  glWindowPos3s = cast[proc (x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}](load("glWindowPos3s"))
  glWindowPos3sv = cast[proc (v: ptr GLshort) {.cdecl, gcsafe.}](load("glWindowPos3sv"))
  glBlendColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl, gcsafe.}](load("glBlendColor"))
  glBlendEquation = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glBlendEquation"))


proc load_GL_VERSION_1_5(load: proc) =
  if not GLAD_GL_VERSION_1_5: return

  glGenQueries = cast[proc (n: GLsizei, ids: ptr GLuint) {.cdecl, gcsafe.}](load("glGenQueries"))
  glDeleteQueries = cast[proc (n: GLsizei, ids: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteQueries"))
  glIsQuery = cast[proc (id: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsQuery"))
  glBeginQuery = cast[proc (target: GLenum, id: GLuint) {.cdecl, gcsafe.}](load("glBeginQuery"))
  glEndQuery = cast[proc (target: GLenum) {.cdecl, gcsafe.}](load("glEndQuery"))
  glGetQueryiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetQueryiv"))
  glGetQueryObjectiv = cast[proc (id: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetQueryObjectiv"))
  glGetQueryObjectuiv = cast[proc (id: GLuint, pname: GLenum, params: ptr GLuint) {.cdecl, gcsafe.}](load("glGetQueryObjectuiv"))
  glBindBuffer = cast[proc (target: GLenum, buffer: GLuint) {.cdecl, gcsafe.}](load("glBindBuffer"))
  glDeleteBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteBuffers"))
  glGenBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.cdecl, gcsafe.}](load("glGenBuffers"))
  glIsBuffer = cast[proc (buffer: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsBuffer"))
  glBufferData = cast[proc (target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum) {.cdecl, gcsafe.}](load("glBufferData"))
  glBufferSubData = cast[proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl, gcsafe.}](load("glBufferSubData"))
  glGetBufferSubData = cast[proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl, gcsafe.}](load("glGetBufferSubData"))
  glMapBuffer = cast[proc (target: GLenum, access: GLenum): pointer {.cdecl, gcsafe.}](load("glMapBuffer"))
  glUnmapBuffer = cast[proc (target: GLenum): GLboolean {.cdecl, gcsafe.}](load("glUnmapBuffer"))
  glGetBufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetBufferParameteriv"))
  glGetBufferPointerv = cast[proc (target: GLenum, pname: GLenum, params: ptr pointer) {.cdecl, gcsafe.}](load("glGetBufferPointerv"))


proc load_GL_VERSION_2_0(load: proc) =
  if not GLAD_GL_VERSION_2_0: return

  glBlendEquationSeparate = cast[proc (modeRGB: GLenum, modeAlpha: GLenum) {.cdecl, gcsafe.}](load("glBlendEquationSeparate"))
  glDrawBuffers = cast[proc (n: GLsizei, bufs: ptr GLenum) {.cdecl, gcsafe.}](load("glDrawBuffers"))
  glStencilOpSeparate = cast[proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.cdecl, gcsafe.}](load("glStencilOpSeparate"))
  glStencilFuncSeparate = cast[proc (face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl, gcsafe.}](load("glStencilFuncSeparate"))
  glStencilMaskSeparate = cast[proc (face: GLenum, mask: GLuint) {.cdecl, gcsafe.}](load("glStencilMaskSeparate"))
  glAttachShader = cast[proc (program: GLuint, shader: GLuint) {.cdecl, gcsafe.}](load("glAttachShader"))
  glBindAttribLocation = cast[proc (program: GLuint, index: GLuint, name: cstring) {.cdecl, gcsafe.}](load("glBindAttribLocation"))
  glCompileShader = cast[proc (shader: GLuint) {.cdecl, gcsafe.}](load("glCompileShader"))
  glCreateProgram = cast[proc (): GLuint {.cdecl, gcsafe.}](load("glCreateProgram"))
  glCreateShader = cast[proc (`type`: GLenum): GLuint {.cdecl, gcsafe.}](load("glCreateShader"))
  glDeleteProgram = cast[proc (program: GLuint) {.cdecl, gcsafe.}](load("glDeleteProgram"))
  glDeleteShader = cast[proc (shader: GLuint) {.cdecl, gcsafe.}](load("glDeleteShader"))
  glDetachShader = cast[proc (program: GLuint, shader: GLuint) {.cdecl, gcsafe.}](load("glDetachShader"))
  glDisableVertexAttribArray = cast[proc (index: GLuint) {.cdecl, gcsafe.}](load("glDisableVertexAttribArray"))
  glEnableVertexAttribArray = cast[proc (index: GLuint) {.cdecl, gcsafe.}](load("glEnableVertexAttribArray"))
  glGetActiveAttrib = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl, gcsafe.}](load("glGetActiveAttrib"))
  glGetActiveUniform = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl, gcsafe.}](load("glGetActiveUniform"))
  glGetAttachedShaders = cast[proc (program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint) {.cdecl, gcsafe.}](load("glGetAttachedShaders"))
  glGetAttribLocation = cast[proc (program: GLuint, name: cstring): GLint {.cdecl, gcsafe.}](load("glGetAttribLocation"))
  glGetProgramiv = cast[proc (program: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetProgramiv"))
  glGetProgramInfoLog = cast[proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl, gcsafe.}](load("glGetProgramInfoLog"))
  glGetShaderiv = cast[proc (shader: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetShaderiv"))
  glGetShaderInfoLog = cast[proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl, gcsafe.}](load("glGetShaderInfoLog"))
  glGetShaderSource = cast[proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring) {.cdecl, gcsafe.}](load("glGetShaderSource"))
  glGetUniformLocation = cast[proc (program: GLuint, name: cstring): GLint {.cdecl, gcsafe.}](load("glGetUniformLocation"))
  glGetUniformfv = cast[proc (program: GLuint, location: GLint, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetUniformfv"))
  glGetUniformiv = cast[proc (program: GLuint, location: GLint, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetUniformiv"))
  glGetVertexAttribdv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetVertexAttribdv"))
  glGetVertexAttribfv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetVertexAttribfv"))
  glGetVertexAttribiv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetVertexAttribiv"))
  glGetVertexAttribPointerv = cast[proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.cdecl, gcsafe.}](load("glGetVertexAttribPointerv"))
  glIsProgram = cast[proc (program: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsProgram"))
  glIsShader = cast[proc (shader: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsShader"))
  glLinkProgram = cast[proc (program: GLuint) {.cdecl, gcsafe.}](load("glLinkProgram"))
  glShaderSource = cast[proc (shader: GLuint, count: GLsizei, string: cstringArray, length: ptr GLint) {.cdecl, gcsafe.}](load("glShaderSource"))
  glUseProgram = cast[proc (program: GLuint) {.cdecl, gcsafe.}](load("glUseProgram"))
  glUniform1f = cast[proc (location: GLint, v0: GLfloat) {.cdecl, gcsafe.}](load("glUniform1f"))
  glUniform2f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat) {.cdecl, gcsafe.}](load("glUniform2f"))
  glUniform3f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.cdecl, gcsafe.}](load("glUniform3f"))
  glUniform4f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.cdecl, gcsafe.}](load("glUniform4f"))
  glUniform1i = cast[proc (location: GLint, v0: GLint) {.cdecl, gcsafe.}](load("glUniform1i"))
  glUniform2i = cast[proc (location: GLint, v0: GLint, v1: GLint) {.cdecl, gcsafe.}](load("glUniform2i"))
  glUniform3i = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.cdecl, gcsafe.}](load("glUniform3i"))
  glUniform4i = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.cdecl, gcsafe.}](load("glUniform4i"))
  glUniform1fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniform1fv"))
  glUniform2fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniform2fv"))
  glUniform3fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniform3fv"))
  glUniform4fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniform4fv"))
  glUniform1iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glUniform1iv"))
  glUniform2iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glUniform2iv"))
  glUniform3iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glUniform3iv"))
  glUniform4iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glUniform4iv"))
  glUniformMatrix2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix2fv"))
  glUniformMatrix3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix3fv"))
  glUniformMatrix4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix4fv"))
  glValidateProgram = cast[proc (program: GLuint) {.cdecl, gcsafe.}](load("glValidateProgram"))
  glVertexAttrib1d = cast[proc (index: GLuint, x: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib1d"))
  glVertexAttrib1dv = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib1dv"))
  glVertexAttrib1f = cast[proc (index: GLuint, x: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib1f"))
  glVertexAttrib1fv = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib1fv"))
  glVertexAttrib1s = cast[proc (index: GLuint, x: GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib1s"))
  glVertexAttrib1sv = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib1sv"))
  glVertexAttrib2d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib2d"))
  glVertexAttrib2dv = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib2dv"))
  glVertexAttrib2f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib2f"))
  glVertexAttrib2fv = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib2fv"))
  glVertexAttrib2s = cast[proc (index: GLuint, x: GLshort, y: GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib2s"))
  glVertexAttrib2sv = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib2sv"))
  glVertexAttrib3d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib3d"))
  glVertexAttrib3dv = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib3dv"))
  glVertexAttrib3f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib3f"))
  glVertexAttrib3fv = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib3fv"))
  glVertexAttrib3s = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib3s"))
  glVertexAttrib3sv = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib3sv"))
  glVertexAttrib4Nbv = cast[proc (index: GLuint, v: ptr GLbyte) {.cdecl, gcsafe.}](load("glVertexAttrib4Nbv"))
  glVertexAttrib4Niv = cast[proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}](load("glVertexAttrib4Niv"))
  glVertexAttrib4Nsv = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib4Nsv"))
  glVertexAttrib4Nub = cast[proc (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) {.cdecl, gcsafe.}](load("glVertexAttrib4Nub"))
  glVertexAttrib4Nubv = cast[proc (index: GLuint, v: ptr GLubyte) {.cdecl, gcsafe.}](load("glVertexAttrib4Nubv"))
  glVertexAttrib4Nuiv = cast[proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexAttrib4Nuiv"))
  glVertexAttrib4Nusv = cast[proc (index: GLuint, v: ptr GLushort) {.cdecl, gcsafe.}](load("glVertexAttrib4Nusv"))
  glVertexAttrib4bv = cast[proc (index: GLuint, v: ptr GLbyte) {.cdecl, gcsafe.}](load("glVertexAttrib4bv"))
  glVertexAttrib4d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib4d"))
  glVertexAttrib4dv = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttrib4dv"))
  glVertexAttrib4f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib4f"))
  glVertexAttrib4fv = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glVertexAttrib4fv"))
  glVertexAttrib4iv = cast[proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}](load("glVertexAttrib4iv"))
  glVertexAttrib4s = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib4s"))
  glVertexAttrib4sv = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttrib4sv"))
  glVertexAttrib4ubv = cast[proc (index: GLuint, v: ptr GLubyte) {.cdecl, gcsafe.}](load("glVertexAttrib4ubv"))
  glVertexAttrib4uiv = cast[proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexAttrib4uiv"))
  glVertexAttrib4usv = cast[proc (index: GLuint, v: ptr GLushort) {.cdecl, gcsafe.}](load("glVertexAttrib4usv"))
  glVertexAttribPointer = cast[proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glVertexAttribPointer"))


proc load_GL_VERSION_2_1(load: proc) =
  if not GLAD_GL_VERSION_2_1: return

  glUniformMatrix2x3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix2x3fv"))
  glUniformMatrix3x2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix3x2fv"))
  glUniformMatrix2x4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix2x4fv"))
  glUniformMatrix4x2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix4x2fv"))
  glUniformMatrix3x4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix3x4fv"))
  glUniformMatrix4x3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glUniformMatrix4x3fv"))


proc load_GL_VERSION_3_0(load: proc) =
  if not GLAD_GL_VERSION_3_0: return

  glColorMaski = cast[proc (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) {.cdecl, gcsafe.}](load("glColorMaski"))
  glGetBooleani_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLboolean) {.cdecl, gcsafe.}](load("glGetBooleani_v"))
  glGetIntegeri_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLint) {.cdecl, gcsafe.}](load("glGetIntegeri_v"))
  glEnablei = cast[proc (target: GLenum, index: GLuint) {.cdecl, gcsafe.}](load("glEnablei"))
  glDisablei = cast[proc (target: GLenum, index: GLuint) {.cdecl, gcsafe.}](load("glDisablei"))
  glIsEnabledi = cast[proc (target: GLenum, index: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsEnabledi"))
  glBeginTransformFeedback = cast[proc (primitiveMode: GLenum) {.cdecl, gcsafe.}](load("glBeginTransformFeedback"))
  glEndTransformFeedback = cast[proc () {.cdecl, gcsafe.}](load("glEndTransformFeedback"))
  glBindBufferRange = cast[proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.cdecl, gcsafe.}](load("glBindBufferRange"))
  glBindBufferBase = cast[proc (target: GLenum, index: GLuint, buffer: GLuint) {.cdecl, gcsafe.}](load("glBindBufferBase"))
  glTransformFeedbackVaryings = cast[proc (program: GLuint, count: GLsizei, varyings: cstringArray, bufferMode: GLenum) {.cdecl, gcsafe.}](load("glTransformFeedbackVaryings"))
  glGetTransformFeedbackVarying = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring) {.cdecl, gcsafe.}](load("glGetTransformFeedbackVarying"))
  glClampColor = cast[proc (target: GLenum, clamp: GLenum) {.cdecl, gcsafe.}](load("glClampColor"))
  glBeginConditionalRender = cast[proc (id: GLuint, mode: GLenum) {.cdecl, gcsafe.}](load("glBeginConditionalRender"))
  glEndConditionalRender = cast[proc () {.cdecl, gcsafe.}](load("glEndConditionalRender"))
  glVertexAttribIPointer = cast[proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glVertexAttribIPointer"))
  glGetVertexAttribIiv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetVertexAttribIiv"))
  glGetVertexAttribIuiv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLuint) {.cdecl, gcsafe.}](load("glGetVertexAttribIuiv"))
  glVertexAttribI1i = cast[proc (index: GLuint, x: GLint) {.cdecl, gcsafe.}](load("glVertexAttribI1i"))
  glVertexAttribI2i = cast[proc (index: GLuint, x: GLint, y: GLint) {.cdecl, gcsafe.}](load("glVertexAttribI2i"))
  glVertexAttribI3i = cast[proc (index: GLuint, x: GLint, y: GLint, z: GLint) {.cdecl, gcsafe.}](load("glVertexAttribI3i"))
  glVertexAttribI4i = cast[proc (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.cdecl, gcsafe.}](load("glVertexAttribI4i"))
  glVertexAttribI1ui = cast[proc (index: GLuint, x: GLuint) {.cdecl, gcsafe.}](load("glVertexAttribI1ui"))
  glVertexAttribI2ui = cast[proc (index: GLuint, x: GLuint, y: GLuint) {.cdecl, gcsafe.}](load("glVertexAttribI2ui"))
  glVertexAttribI3ui = cast[proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint) {.cdecl, gcsafe.}](load("glVertexAttribI3ui"))
  glVertexAttribI4ui = cast[proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.cdecl, gcsafe.}](load("glVertexAttribI4ui"))
  glVertexAttribI1iv = cast[proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}](load("glVertexAttribI1iv"))
  glVertexAttribI2iv = cast[proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}](load("glVertexAttribI2iv"))
  glVertexAttribI3iv = cast[proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}](load("glVertexAttribI3iv"))
  glVertexAttribI4iv = cast[proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}](load("glVertexAttribI4iv"))
  glVertexAttribI1uiv = cast[proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexAttribI1uiv"))
  glVertexAttribI2uiv = cast[proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexAttribI2uiv"))
  glVertexAttribI3uiv = cast[proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexAttribI3uiv"))
  glVertexAttribI4uiv = cast[proc (index: GLuint, v: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexAttribI4uiv"))
  glVertexAttribI4bv = cast[proc (index: GLuint, v: ptr GLbyte) {.cdecl, gcsafe.}](load("glVertexAttribI4bv"))
  glVertexAttribI4sv = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl, gcsafe.}](load("glVertexAttribI4sv"))
  glVertexAttribI4ubv = cast[proc (index: GLuint, v: ptr GLubyte) {.cdecl, gcsafe.}](load("glVertexAttribI4ubv"))
  glVertexAttribI4usv = cast[proc (index: GLuint, v: ptr GLushort) {.cdecl, gcsafe.}](load("glVertexAttribI4usv"))
  glGetUniformuiv = cast[proc (program: GLuint, location: GLint, params: ptr GLuint) {.cdecl, gcsafe.}](load("glGetUniformuiv"))
  glBindFragDataLocation = cast[proc (program: GLuint, color: GLuint, name: cstring) {.cdecl, gcsafe.}](load("glBindFragDataLocation"))
  glGetFragDataLocation = cast[proc (program: GLuint, name: cstring): GLint {.cdecl, gcsafe.}](load("glGetFragDataLocation"))
  glUniform1ui = cast[proc (location: GLint, v0: GLuint) {.cdecl, gcsafe.}](load("glUniform1ui"))
  glUniform2ui = cast[proc (location: GLint, v0: GLuint, v1: GLuint) {.cdecl, gcsafe.}](load("glUniform2ui"))
  glUniform3ui = cast[proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.cdecl, gcsafe.}](load("glUniform3ui"))
  glUniform4ui = cast[proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.cdecl, gcsafe.}](load("glUniform4ui"))
  glUniform1uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl, gcsafe.}](load("glUniform1uiv"))
  glUniform2uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl, gcsafe.}](load("glUniform2uiv"))
  glUniform3uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl, gcsafe.}](load("glUniform3uiv"))
  glUniform4uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl, gcsafe.}](load("glUniform4uiv"))
  glTexParameterIiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glTexParameterIiv"))
  glTexParameterIuiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.cdecl, gcsafe.}](load("glTexParameterIuiv"))
  glGetTexParameterIiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetTexParameterIiv"))
  glGetTexParameterIuiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.cdecl, gcsafe.}](load("glGetTexParameterIuiv"))
  glClearBufferiv = cast[proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLint) {.cdecl, gcsafe.}](load("glClearBufferiv"))
  glClearBufferuiv = cast[proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLuint) {.cdecl, gcsafe.}](load("glClearBufferuiv"))
  glClearBufferfv = cast[proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glClearBufferfv"))
  glClearBufferfi = cast[proc (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) {.cdecl, gcsafe.}](load("glClearBufferfi"))
  glGetStringi = cast[proc (name: GLenum, index: GLuint): ptr GLubyte {.cdecl, gcsafe.}](load("glGetStringi"))
  glIsRenderbuffer = cast[proc (renderbuffer: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsRenderbuffer"))
  glBindRenderbuffer = cast[proc (target: GLenum, renderbuffer: GLuint) {.cdecl, gcsafe.}](load("glBindRenderbuffer"))
  glDeleteRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteRenderbuffers"))
  glGenRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl, gcsafe.}](load("glGenRenderbuffers"))
  glRenderbufferStorage = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glRenderbufferStorage"))
  glGetRenderbufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetRenderbufferParameteriv"))
  glIsFramebuffer = cast[proc (framebuffer: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsFramebuffer"))
  glBindFramebuffer = cast[proc (target: GLenum, framebuffer: GLuint) {.cdecl, gcsafe.}](load("glBindFramebuffer"))
  glDeleteFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteFramebuffers"))
  glGenFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl, gcsafe.}](load("glGenFramebuffers"))
  glCheckFramebufferStatus = cast[proc (target: GLenum): GLenum {.cdecl, gcsafe.}](load("glCheckFramebufferStatus"))
  glFramebufferTexture1D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.cdecl, gcsafe.}](load("glFramebufferTexture1D"))
  glFramebufferTexture2D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.cdecl, gcsafe.}](load("glFramebufferTexture2D"))
  glFramebufferTexture3D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) {.cdecl, gcsafe.}](load("glFramebufferTexture3D"))
  glFramebufferRenderbuffer = cast[proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.cdecl, gcsafe.}](load("glFramebufferRenderbuffer"))
  glGetFramebufferAttachmentParameteriv = cast[proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetFramebufferAttachmentParameteriv"))
  glGenerateMipmap = cast[proc (target: GLenum) {.cdecl, gcsafe.}](load("glGenerateMipmap"))
  glBlitFramebuffer = cast[proc (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.cdecl, gcsafe.}](load("glBlitFramebuffer"))
  glRenderbufferStorageMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glRenderbufferStorageMultisample"))
  glFramebufferTextureLayer = cast[proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.cdecl, gcsafe.}](load("glFramebufferTextureLayer"))
  glMapBufferRange = cast[proc (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.cdecl, gcsafe.}](load("glMapBufferRange"))
  glFlushMappedBufferRange = cast[proc (target: GLenum, offset: GLintptr, length: GLsizeiptr) {.cdecl, gcsafe.}](load("glFlushMappedBufferRange"))
  glBindVertexArray = cast[proc (array: GLuint) {.cdecl, gcsafe.}](load("glBindVertexArray"))
  glDeleteVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteVertexArrays"))
  glGenVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.cdecl, gcsafe.}](load("glGenVertexArrays"))
  glIsVertexArray = cast[proc (array: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsVertexArray"))


proc load_GL_VERSION_3_1(load: proc) =
  if not GLAD_GL_VERSION_3_1: return

  glDrawArraysInstanced = cast[proc (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) {.cdecl, gcsafe.}](load("glDrawArraysInstanced"))
  glDrawElementsInstanced = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei) {.cdecl, gcsafe.}](load("glDrawElementsInstanced"))
  glTexBuffer = cast[proc (target: GLenum, internalformat: GLenum, buffer: GLuint) {.cdecl, gcsafe.}](load("glTexBuffer"))
  glPrimitiveRestartIndex = cast[proc (index: GLuint) {.cdecl, gcsafe.}](load("glPrimitiveRestartIndex"))
  glCopyBufferSubData = cast[proc (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.cdecl, gcsafe.}](load("glCopyBufferSubData"))
  glGetUniformIndices = cast[proc (program: GLuint, uniformCount: GLsizei, uniformNames: cstringArray, uniformIndices: ptr GLuint) {.cdecl, gcsafe.}](load("glGetUniformIndices"))
  glGetActiveUniformsiv = cast[proc (program: GLuint, uniformCount: GLsizei, uniformIndices: ptr GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetActiveUniformsiv"))
  glGetActiveUniformName = cast[proc (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformName: cstring) {.cdecl, gcsafe.}](load("glGetActiveUniformName"))
  glGetUniformBlockIndex = cast[proc (program: GLuint, uniformBlockName: cstring): GLuint {.cdecl, gcsafe.}](load("glGetUniformBlockIndex"))
  glGetActiveUniformBlockiv = cast[proc (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetActiveUniformBlockiv"))
  glGetActiveUniformBlockName = cast[proc (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformBlockName: cstring) {.cdecl, gcsafe.}](load("glGetActiveUniformBlockName"))
  glUniformBlockBinding = cast[proc (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) {.cdecl, gcsafe.}](load("glUniformBlockBinding"))
  glBindBufferRange = cast[proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.cdecl, gcsafe.}](load("glBindBufferRange"))
  glBindBufferBase = cast[proc (target: GLenum, index: GLuint, buffer: GLuint) {.cdecl, gcsafe.}](load("glBindBufferBase"))
  glGetIntegeri_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLint) {.cdecl, gcsafe.}](load("glGetIntegeri_v"))


proc load_GL_VERSION_3_2(load: proc) =
  if not GLAD_GL_VERSION_3_2: return

  glDrawElementsBaseVertex = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.cdecl, gcsafe.}](load("glDrawElementsBaseVertex"))
  glDrawRangeElementsBaseVertex = cast[proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.cdecl, gcsafe.}](load("glDrawRangeElementsBaseVertex"))
  glDrawElementsInstancedBaseVertex = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint) {.cdecl, gcsafe.}](load("glDrawElementsInstancedBaseVertex"))
  glMultiDrawElementsBaseVertex = cast[proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei, basevertex: ptr GLint) {.cdecl, gcsafe.}](load("glMultiDrawElementsBaseVertex"))
  glProvokingVertex = cast[proc (mode: GLenum) {.cdecl, gcsafe.}](load("glProvokingVertex"))
  glFenceSync = cast[proc (condition: GLenum, flags: GLbitfield): GLsync {.cdecl, gcsafe.}](load("glFenceSync"))
  glIsSync = cast[proc (sync: GLsync): GLboolean {.cdecl, gcsafe.}](load("glIsSync"))
  glDeleteSync = cast[proc (sync: GLsync) {.cdecl, gcsafe.}](load("glDeleteSync"))
  glClientWaitSync = cast[proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64): GLenum {.cdecl, gcsafe.}](load("glClientWaitSync"))
  glWaitSync = cast[proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64) {.cdecl, gcsafe.}](load("glWaitSync"))
  glGetInteger64v = cast[proc (pname: GLenum, data: ptr GLint64) {.cdecl, gcsafe.}](load("glGetInteger64v"))
  glGetSynciv = cast[proc (sync: GLsync, pname: GLenum, count: GLsizei, length: ptr GLsizei, values: ptr GLint) {.cdecl, gcsafe.}](load("glGetSynciv"))
  glGetInteger64i_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLint64) {.cdecl, gcsafe.}](load("glGetInteger64i_v"))
  glGetBufferParameteri64v = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint64) {.cdecl, gcsafe.}](load("glGetBufferParameteri64v"))
  glFramebufferTexture = cast[proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) {.cdecl, gcsafe.}](load("glFramebufferTexture"))
  glTexImage2DMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.cdecl, gcsafe.}](load("glTexImage2DMultisample"))
  glTexImage3DMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.cdecl, gcsafe.}](load("glTexImage3DMultisample"))
  glGetMultisamplefv = cast[proc (pname: GLenum, index: GLuint, val: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetMultisamplefv"))
  glSampleMaski = cast[proc (maskNumber: GLuint, mask: GLbitfield) {.cdecl, gcsafe.}](load("glSampleMaski"))


proc load_GL_VERSION_3_3(load: proc) =
  if not GLAD_GL_VERSION_3_3: return

  glBindFragDataLocationIndexed = cast[proc (program: GLuint, colorNumber: GLuint, index: GLuint, name: cstring) {.cdecl, gcsafe.}](load("glBindFragDataLocationIndexed"))
  glGetFragDataIndex = cast[proc (program: GLuint, name: cstring): GLint {.cdecl, gcsafe.}](load("glGetFragDataIndex"))
  glGenSamplers = cast[proc (count: GLsizei, samplers: ptr GLuint) {.cdecl, gcsafe.}](load("glGenSamplers"))
  glDeleteSamplers = cast[proc (count: GLsizei, samplers: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteSamplers"))
  glIsSampler = cast[proc (sampler: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsSampler"))
  glBindSampler = cast[proc (unit: GLuint, sampler: GLuint) {.cdecl, gcsafe.}](load("glBindSampler"))
  glSamplerParameteri = cast[proc (sampler: GLuint, pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glSamplerParameteri"))
  glSamplerParameteriv = cast[proc (sampler: GLuint, pname: GLenum, param: ptr GLint) {.cdecl, gcsafe.}](load("glSamplerParameteriv"))
  glSamplerParameterf = cast[proc (sampler: GLuint, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glSamplerParameterf"))
  glSamplerParameterfv = cast[proc (sampler: GLuint, pname: GLenum, param: ptr GLfloat) {.cdecl, gcsafe.}](load("glSamplerParameterfv"))
  glSamplerParameterIiv = cast[proc (sampler: GLuint, pname: GLenum, param: ptr GLint) {.cdecl, gcsafe.}](load("glSamplerParameterIiv"))
  glSamplerParameterIuiv = cast[proc (sampler: GLuint, pname: GLenum, param: ptr GLuint) {.cdecl, gcsafe.}](load("glSamplerParameterIuiv"))
  glGetSamplerParameteriv = cast[proc (sampler: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetSamplerParameteriv"))
  glGetSamplerParameterIiv = cast[proc (sampler: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetSamplerParameterIiv"))
  glGetSamplerParameterfv = cast[proc (sampler: GLuint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetSamplerParameterfv"))
  glGetSamplerParameterIuiv = cast[proc (sampler: GLuint, pname: GLenum, params: ptr GLuint) {.cdecl, gcsafe.}](load("glGetSamplerParameterIuiv"))
  glQueryCounter = cast[proc (id: GLuint, target: GLenum) {.cdecl, gcsafe.}](load("glQueryCounter"))
  glGetQueryObjecti64v = cast[proc (id: GLuint, pname: GLenum, params: ptr GLint64) {.cdecl, gcsafe.}](load("glGetQueryObjecti64v"))
  glGetQueryObjectui64v = cast[proc (id: GLuint, pname: GLenum, params: ptr GLuint64) {.cdecl, gcsafe.}](load("glGetQueryObjectui64v"))
  glVertexAttribDivisor = cast[proc (index: GLuint, divisor: GLuint) {.cdecl, gcsafe.}](load("glVertexAttribDivisor"))
  glVertexAttribP1ui = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.cdecl, gcsafe.}](load("glVertexAttribP1ui"))
  glVertexAttribP1uiv = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexAttribP1uiv"))
  glVertexAttribP2ui = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.cdecl, gcsafe.}](load("glVertexAttribP2ui"))
  glVertexAttribP2uiv = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexAttribP2uiv"))
  glVertexAttribP3ui = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.cdecl, gcsafe.}](load("glVertexAttribP3ui"))
  glVertexAttribP3uiv = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexAttribP3uiv"))
  glVertexAttribP4ui = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.cdecl, gcsafe.}](load("glVertexAttribP4ui"))
  glVertexAttribP4uiv = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexAttribP4uiv"))
  glVertexP2ui = cast[proc (`type`: GLenum, value: GLuint) {.cdecl, gcsafe.}](load("glVertexP2ui"))
  glVertexP2uiv = cast[proc (`type`: GLenum, value: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexP2uiv"))
  glVertexP3ui = cast[proc (`type`: GLenum, value: GLuint) {.cdecl, gcsafe.}](load("glVertexP3ui"))
  glVertexP3uiv = cast[proc (`type`: GLenum, value: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexP3uiv"))
  glVertexP4ui = cast[proc (`type`: GLenum, value: GLuint) {.cdecl, gcsafe.}](load("glVertexP4ui"))
  glVertexP4uiv = cast[proc (`type`: GLenum, value: ptr GLuint) {.cdecl, gcsafe.}](load("glVertexP4uiv"))
  glTexCoordP1ui = cast[proc (`type`: GLenum, coords: GLuint) {.cdecl, gcsafe.}](load("glTexCoordP1ui"))
  glTexCoordP1uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.cdecl, gcsafe.}](load("glTexCoordP1uiv"))
  glTexCoordP2ui = cast[proc (`type`: GLenum, coords: GLuint) {.cdecl, gcsafe.}](load("glTexCoordP2ui"))
  glTexCoordP2uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.cdecl, gcsafe.}](load("glTexCoordP2uiv"))
  glTexCoordP3ui = cast[proc (`type`: GLenum, coords: GLuint) {.cdecl, gcsafe.}](load("glTexCoordP3ui"))
  glTexCoordP3uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.cdecl, gcsafe.}](load("glTexCoordP3uiv"))
  glTexCoordP4ui = cast[proc (`type`: GLenum, coords: GLuint) {.cdecl, gcsafe.}](load("glTexCoordP4ui"))
  glTexCoordP4uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.cdecl, gcsafe.}](load("glTexCoordP4uiv"))
  glMultiTexCoordP1ui = cast[proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.cdecl, gcsafe.}](load("glMultiTexCoordP1ui"))
  glMultiTexCoordP1uiv = cast[proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.cdecl, gcsafe.}](load("glMultiTexCoordP1uiv"))
  glMultiTexCoordP2ui = cast[proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.cdecl, gcsafe.}](load("glMultiTexCoordP2ui"))
  glMultiTexCoordP2uiv = cast[proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.cdecl, gcsafe.}](load("glMultiTexCoordP2uiv"))
  glMultiTexCoordP3ui = cast[proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.cdecl, gcsafe.}](load("glMultiTexCoordP3ui"))
  glMultiTexCoordP3uiv = cast[proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.cdecl, gcsafe.}](load("glMultiTexCoordP3uiv"))
  glMultiTexCoordP4ui = cast[proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.cdecl, gcsafe.}](load("glMultiTexCoordP4ui"))
  glMultiTexCoordP4uiv = cast[proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.cdecl, gcsafe.}](load("glMultiTexCoordP4uiv"))
  glNormalP3ui = cast[proc (`type`: GLenum, coords: GLuint) {.cdecl, gcsafe.}](load("glNormalP3ui"))
  glNormalP3uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.cdecl, gcsafe.}](load("glNormalP3uiv"))
  glColorP3ui = cast[proc (`type`: GLenum, color: GLuint) {.cdecl, gcsafe.}](load("glColorP3ui"))
  glColorP3uiv = cast[proc (`type`: GLenum, color: ptr GLuint) {.cdecl, gcsafe.}](load("glColorP3uiv"))
  glColorP4ui = cast[proc (`type`: GLenum, color: GLuint) {.cdecl, gcsafe.}](load("glColorP4ui"))
  glColorP4uiv = cast[proc (`type`: GLenum, color: ptr GLuint) {.cdecl, gcsafe.}](load("glColorP4uiv"))
  glSecondaryColorP3ui = cast[proc (`type`: GLenum, color: GLuint) {.cdecl, gcsafe.}](load("glSecondaryColorP3ui"))
  glSecondaryColorP3uiv = cast[proc (`type`: GLenum, color: ptr GLuint) {.cdecl, gcsafe.}](load("glSecondaryColorP3uiv"))


proc load_GL_VERSION_4_0(load: proc) =
  if not GLAD_GL_VERSION_4_0: return

  glMinSampleShading = cast[proc (value: GLfloat) {.cdecl, gcsafe.}](load("glMinSampleShading"))
  glBlendEquationi = cast[proc (buf: GLuint, mode: GLenum) {.cdecl, gcsafe.}](load("glBlendEquationi"))
  glBlendEquationSeparatei = cast[proc (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) {.cdecl, gcsafe.}](load("glBlendEquationSeparatei"))
  glBlendFunci = cast[proc (buf: GLuint, src: GLenum, dst: GLenum) {.cdecl, gcsafe.}](load("glBlendFunci"))
  glBlendFuncSeparatei = cast[proc (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) {.cdecl, gcsafe.}](load("glBlendFuncSeparatei"))
  glDrawArraysIndirect = cast[proc (mode: GLenum, indirect: pointer) {.cdecl, gcsafe.}](load("glDrawArraysIndirect"))
  glDrawElementsIndirect = cast[proc (mode: GLenum, `type`: GLenum, indirect: pointer) {.cdecl, gcsafe.}](load("glDrawElementsIndirect"))
  glUniform1d = cast[proc (location: GLint, x: GLdouble) {.cdecl, gcsafe.}](load("glUniform1d"))
  glUniform2d = cast[proc (location: GLint, x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}](load("glUniform2d"))
  glUniform3d = cast[proc (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}](load("glUniform3d"))
  glUniform4d = cast[proc (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}](load("glUniform4d"))
  glUniform1dv = cast[proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glUniform1dv"))
  glUniform2dv = cast[proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glUniform2dv"))
  glUniform3dv = cast[proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glUniform3dv"))
  glUniform4dv = cast[proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glUniform4dv"))
  glUniformMatrix2dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glUniformMatrix2dv"))
  glUniformMatrix3dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glUniformMatrix3dv"))
  glUniformMatrix4dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glUniformMatrix4dv"))
  glUniformMatrix2x3dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glUniformMatrix2x3dv"))
  glUniformMatrix2x4dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glUniformMatrix2x4dv"))
  glUniformMatrix3x2dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glUniformMatrix3x2dv"))
  glUniformMatrix3x4dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glUniformMatrix3x4dv"))
  glUniformMatrix4x2dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glUniformMatrix4x2dv"))
  glUniformMatrix4x3dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glUniformMatrix4x3dv"))
  glGetUniformdv = cast[proc (program: GLuint, location: GLint, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetUniformdv"))
  glGetSubroutineUniformLocation = cast[proc (program: GLuint, shadertype: GLenum, name: cstring): GLint {.cdecl, gcsafe.}](load("glGetSubroutineUniformLocation"))
  glGetSubroutineIndex = cast[proc (program: GLuint, shadertype: GLenum, name: cstring): GLuint {.cdecl, gcsafe.}](load("glGetSubroutineIndex"))
  glGetActiveSubroutineUniformiv = cast[proc (program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: ptr GLint) {.cdecl, gcsafe.}](load("glGetActiveSubroutineUniformiv"))
  glGetActiveSubroutineUniformName = cast[proc (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.cdecl, gcsafe.}](load("glGetActiveSubroutineUniformName"))
  glGetActiveSubroutineName = cast[proc (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.cdecl, gcsafe.}](load("glGetActiveSubroutineName"))
  glUniformSubroutinesuiv = cast[proc (shadertype: GLenum, count: GLsizei, indices: ptr GLuint) {.cdecl, gcsafe.}](load("glUniformSubroutinesuiv"))
  glGetUniformSubroutineuiv = cast[proc (shadertype: GLenum, location: GLint, params: ptr GLuint) {.cdecl, gcsafe.}](load("glGetUniformSubroutineuiv"))
  glGetProgramStageiv = cast[proc (program: GLuint, shadertype: GLenum, pname: GLenum, values: ptr GLint) {.cdecl, gcsafe.}](load("glGetProgramStageiv"))
  glPatchParameteri = cast[proc (pname: GLenum, value: GLint) {.cdecl, gcsafe.}](load("glPatchParameteri"))
  glPatchParameterfv = cast[proc (pname: GLenum, values: ptr GLfloat) {.cdecl, gcsafe.}](load("glPatchParameterfv"))
  glBindTransformFeedback = cast[proc (target: GLenum, id: GLuint) {.cdecl, gcsafe.}](load("glBindTransformFeedback"))
  glDeleteTransformFeedbacks = cast[proc (n: GLsizei, ids: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteTransformFeedbacks"))
  glGenTransformFeedbacks = cast[proc (n: GLsizei, ids: ptr GLuint) {.cdecl, gcsafe.}](load("glGenTransformFeedbacks"))
  glIsTransformFeedback = cast[proc (id: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsTransformFeedback"))
  glPauseTransformFeedback = cast[proc () {.cdecl, gcsafe.}](load("glPauseTransformFeedback"))
  glResumeTransformFeedback = cast[proc () {.cdecl, gcsafe.}](load("glResumeTransformFeedback"))
  glDrawTransformFeedback = cast[proc (mode: GLenum, id: GLuint) {.cdecl, gcsafe.}](load("glDrawTransformFeedback"))
  glDrawTransformFeedbackStream = cast[proc (mode: GLenum, id: GLuint, stream: GLuint) {.cdecl, gcsafe.}](load("glDrawTransformFeedbackStream"))
  glBeginQueryIndexed = cast[proc (target: GLenum, index: GLuint, id: GLuint) {.cdecl, gcsafe.}](load("glBeginQueryIndexed"))
  glEndQueryIndexed = cast[proc (target: GLenum, index: GLuint) {.cdecl, gcsafe.}](load("glEndQueryIndexed"))
  glGetQueryIndexediv = cast[proc (target: GLenum, index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetQueryIndexediv"))


proc load_GL_VERSION_4_1(load: proc) =
  if not GLAD_GL_VERSION_4_1: return

  glReleaseShaderCompiler = cast[proc () {.cdecl, gcsafe.}](load("glReleaseShaderCompiler"))
  glShaderBinary = cast[proc (count: GLsizei, shaders: ptr GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) {.cdecl, gcsafe.}](load("glShaderBinary"))
  glGetShaderPrecisionFormat = cast[proc (shadertype: GLenum, precisiontype: GLenum, range: ptr GLint, precision: ptr GLint) {.cdecl, gcsafe.}](load("glGetShaderPrecisionFormat"))
  glDepthRangef = cast[proc (n: GLfloat, f: GLfloat) {.cdecl, gcsafe.}](load("glDepthRangef"))
  glClearDepthf = cast[proc (d: GLfloat) {.cdecl, gcsafe.}](load("glClearDepthf"))
  glGetProgramBinary = cast[proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, binaryFormat: ptr GLenum, binary: pointer) {.cdecl, gcsafe.}](load("glGetProgramBinary"))
  glProgramBinary = cast[proc (program: GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) {.cdecl, gcsafe.}](load("glProgramBinary"))
  glProgramParameteri = cast[proc (program: GLuint, pname: GLenum, value: GLint) {.cdecl, gcsafe.}](load("glProgramParameteri"))
  glUseProgramStages = cast[proc (pipeline: GLuint, stages: GLbitfield, program: GLuint) {.cdecl, gcsafe.}](load("glUseProgramStages"))
  glActiveShaderProgram = cast[proc (pipeline: GLuint, program: GLuint) {.cdecl, gcsafe.}](load("glActiveShaderProgram"))
  glCreateShaderProgramv = cast[proc (`type`: GLenum, count: GLsizei, strings: cstringArray): GLuint {.cdecl, gcsafe.}](load("glCreateShaderProgramv"))
  glBindProgramPipeline = cast[proc (pipeline: GLuint) {.cdecl, gcsafe.}](load("glBindProgramPipeline"))
  glDeleteProgramPipelines = cast[proc (n: GLsizei, pipelines: ptr GLuint) {.cdecl, gcsafe.}](load("glDeleteProgramPipelines"))
  glGenProgramPipelines = cast[proc (n: GLsizei, pipelines: ptr GLuint) {.cdecl, gcsafe.}](load("glGenProgramPipelines"))
  glIsProgramPipeline = cast[proc (pipeline: GLuint): GLboolean {.cdecl, gcsafe.}](load("glIsProgramPipeline"))
  glGetProgramPipelineiv = cast[proc (pipeline: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetProgramPipelineiv"))
  glProgramParameteri = cast[proc (program: GLuint, pname: GLenum, value: GLint) {.cdecl, gcsafe.}](load("glProgramParameteri"))
  glProgramUniform1i = cast[proc (program: GLuint, location: GLint, v0: GLint) {.cdecl, gcsafe.}](load("glProgramUniform1i"))
  glProgramUniform1iv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glProgramUniform1iv"))
  glProgramUniform1f = cast[proc (program: GLuint, location: GLint, v0: GLfloat) {.cdecl, gcsafe.}](load("glProgramUniform1f"))
  glProgramUniform1fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glProgramUniform1fv"))
  glProgramUniform1d = cast[proc (program: GLuint, location: GLint, v0: GLdouble) {.cdecl, gcsafe.}](load("glProgramUniform1d"))
  glProgramUniform1dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glProgramUniform1dv"))
  glProgramUniform1ui = cast[proc (program: GLuint, location: GLint, v0: GLuint) {.cdecl, gcsafe.}](load("glProgramUniform1ui"))
  glProgramUniform1uiv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl, gcsafe.}](load("glProgramUniform1uiv"))
  glProgramUniform2i = cast[proc (program: GLuint, location: GLint, v0: GLint, v1: GLint) {.cdecl, gcsafe.}](load("glProgramUniform2i"))
  glProgramUniform2iv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glProgramUniform2iv"))
  glProgramUniform2f = cast[proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) {.cdecl, gcsafe.}](load("glProgramUniform2f"))
  glProgramUniform2fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glProgramUniform2fv"))
  glProgramUniform2d = cast[proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) {.cdecl, gcsafe.}](load("glProgramUniform2d"))
  glProgramUniform2dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glProgramUniform2dv"))
  glProgramUniform2ui = cast[proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) {.cdecl, gcsafe.}](load("glProgramUniform2ui"))
  glProgramUniform2uiv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl, gcsafe.}](load("glProgramUniform2uiv"))
  glProgramUniform3i = cast[proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) {.cdecl, gcsafe.}](load("glProgramUniform3i"))
  glProgramUniform3iv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glProgramUniform3iv"))
  glProgramUniform3f = cast[proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.cdecl, gcsafe.}](load("glProgramUniform3f"))
  glProgramUniform3fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glProgramUniform3fv"))
  glProgramUniform3d = cast[proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) {.cdecl, gcsafe.}](load("glProgramUniform3d"))
  glProgramUniform3dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glProgramUniform3dv"))
  glProgramUniform3ui = cast[proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.cdecl, gcsafe.}](load("glProgramUniform3ui"))
  glProgramUniform3uiv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl, gcsafe.}](load("glProgramUniform3uiv"))
  glProgramUniform4i = cast[proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.cdecl, gcsafe.}](load("glProgramUniform4i"))
  glProgramUniform4iv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.cdecl, gcsafe.}](load("glProgramUniform4iv"))
  glProgramUniform4f = cast[proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.cdecl, gcsafe.}](load("glProgramUniform4f"))
  glProgramUniform4fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glProgramUniform4fv"))
  glProgramUniform4d = cast[proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) {.cdecl, gcsafe.}](load("glProgramUniform4d"))
  glProgramUniform4dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glProgramUniform4dv"))
  glProgramUniform4ui = cast[proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.cdecl, gcsafe.}](load("glProgramUniform4ui"))
  glProgramUniform4uiv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl, gcsafe.}](load("glProgramUniform4uiv"))
  glProgramUniformMatrix2fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glProgramUniformMatrix2fv"))
  glProgramUniformMatrix3fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glProgramUniformMatrix3fv"))
  glProgramUniformMatrix4fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glProgramUniformMatrix4fv"))
  glProgramUniformMatrix2dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glProgramUniformMatrix2dv"))
  glProgramUniformMatrix3dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glProgramUniformMatrix3dv"))
  glProgramUniformMatrix4dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glProgramUniformMatrix4dv"))
  glProgramUniformMatrix2x3fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glProgramUniformMatrix2x3fv"))
  glProgramUniformMatrix3x2fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glProgramUniformMatrix3x2fv"))
  glProgramUniformMatrix2x4fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glProgramUniformMatrix2x4fv"))
  glProgramUniformMatrix4x2fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glProgramUniformMatrix4x2fv"))
  glProgramUniformMatrix3x4fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glProgramUniformMatrix3x4fv"))
  glProgramUniformMatrix4x3fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glProgramUniformMatrix4x3fv"))
  glProgramUniformMatrix2x3dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glProgramUniformMatrix2x3dv"))
  glProgramUniformMatrix3x2dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glProgramUniformMatrix3x2dv"))
  glProgramUniformMatrix2x4dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glProgramUniformMatrix2x4dv"))
  glProgramUniformMatrix4x2dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glProgramUniformMatrix4x2dv"))
  glProgramUniformMatrix3x4dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glProgramUniformMatrix3x4dv"))
  glProgramUniformMatrix4x3dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.cdecl, gcsafe.}](load("glProgramUniformMatrix4x3dv"))
  glValidateProgramPipeline = cast[proc (pipeline: GLuint) {.cdecl, gcsafe.}](load("glValidateProgramPipeline"))
  glGetProgramPipelineInfoLog = cast[proc (pipeline: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl, gcsafe.}](load("glGetProgramPipelineInfoLog"))
  glVertexAttribL1d = cast[proc (index: GLuint, x: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttribL1d"))
  glVertexAttribL2d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttribL2d"))
  glVertexAttribL3d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttribL3d"))
  glVertexAttribL4d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl, gcsafe.}](load("glVertexAttribL4d"))
  glVertexAttribL1dv = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttribL1dv"))
  glVertexAttribL2dv = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttribL2dv"))
  glVertexAttribL3dv = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttribL3dv"))
  glVertexAttribL4dv = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glVertexAttribL4dv"))
  glVertexAttribLPointer = cast[proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl, gcsafe.}](load("glVertexAttribLPointer"))
  glGetVertexAttribLdv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetVertexAttribLdv"))
  glViewportArrayv = cast[proc (first: GLuint, count: GLsizei, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glViewportArrayv"))
  glViewportIndexedf = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) {.cdecl, gcsafe.}](load("glViewportIndexedf"))
  glViewportIndexedfv = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glViewportIndexedfv"))
  glScissorArrayv = cast[proc (first: GLuint, count: GLsizei, v: ptr GLint) {.cdecl, gcsafe.}](load("glScissorArrayv"))
  glScissorIndexed = cast[proc (index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glScissorIndexed"))
  glScissorIndexedv = cast[proc (index: GLuint, v: ptr GLint) {.cdecl, gcsafe.}](load("glScissorIndexedv"))
  glDepthRangeArrayv = cast[proc (first: GLuint, count: GLsizei, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glDepthRangeArrayv"))
  glDepthRangeIndexed = cast[proc (index: GLuint, n: GLdouble, f: GLdouble) {.cdecl, gcsafe.}](load("glDepthRangeIndexed"))
  glGetFloati_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetFloati_v"))
  glGetDoublei_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetDoublei_v"))


proc load_GL_VERSION_4_2(load: proc) =
  if not GLAD_GL_VERSION_4_2: return

  glDrawArraysInstancedBaseInstance = cast[proc (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) {.cdecl, gcsafe.}](load("glDrawArraysInstancedBaseInstance"))
  glDrawElementsInstancedBaseInstance = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, baseinstance: GLuint) {.cdecl, gcsafe.}](load("glDrawElementsInstancedBaseInstance"))
  glDrawElementsInstancedBaseVertexBaseInstance = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) {.cdecl, gcsafe.}](load("glDrawElementsInstancedBaseVertexBaseInstance"))
  glGetInternalformativ = cast[proc (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetInternalformativ"))
  glGetActiveAtomicCounterBufferiv = cast[proc (program: GLuint, bufferIndex: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetActiveAtomicCounterBufferiv"))
  glBindImageTexture = cast[proc (unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) {.cdecl, gcsafe.}](load("glBindImageTexture"))
  glMemoryBarrier = cast[proc (barriers: GLbitfield) {.cdecl, gcsafe.}](load("glMemoryBarrier"))
  glTexStorage1D = cast[proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) {.cdecl, gcsafe.}](load("glTexStorage1D"))
  glTexStorage2D = cast[proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glTexStorage2D"))
  glTexStorage3D = cast[proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) {.cdecl, gcsafe.}](load("glTexStorage3D"))
  glDrawTransformFeedbackInstanced = cast[proc (mode: GLenum, id: GLuint, instancecount: GLsizei) {.cdecl, gcsafe.}](load("glDrawTransformFeedbackInstanced"))
  glDrawTransformFeedbackStreamInstanced = cast[proc (mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) {.cdecl, gcsafe.}](load("glDrawTransformFeedbackStreamInstanced"))


proc load_GL_VERSION_4_3(load: proc) =
  if not GLAD_GL_VERSION_4_3: return

  glClearBufferData = cast[proc (target: GLenum, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer) {.cdecl, gcsafe.}](load("glClearBufferData"))
  glClearBufferSubData = cast[proc (target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer) {.cdecl, gcsafe.}](load("glClearBufferSubData"))
  glDispatchCompute = cast[proc (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) {.cdecl, gcsafe.}](load("glDispatchCompute"))
  glDispatchComputeIndirect = cast[proc (indirect: GLintptr) {.cdecl, gcsafe.}](load("glDispatchComputeIndirect"))
  glCopyImageSubData = cast[proc (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) {.cdecl, gcsafe.}](load("glCopyImageSubData"))
  glFramebufferParameteri = cast[proc (target: GLenum, pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glFramebufferParameteri"))
  glGetFramebufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetFramebufferParameteriv"))
  glGetInternalformati64v = cast[proc (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: ptr GLint64) {.cdecl, gcsafe.}](load("glGetInternalformati64v"))
  glInvalidateTexSubImage = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) {.cdecl, gcsafe.}](load("glInvalidateTexSubImage"))
  glInvalidateTexImage = cast[proc (texture: GLuint, level: GLint) {.cdecl, gcsafe.}](load("glInvalidateTexImage"))
  glInvalidateBufferSubData = cast[proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) {.cdecl, gcsafe.}](load("glInvalidateBufferSubData"))
  glInvalidateBufferData = cast[proc (buffer: GLuint) {.cdecl, gcsafe.}](load("glInvalidateBufferData"))
  glInvalidateFramebuffer = cast[proc (target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum) {.cdecl, gcsafe.}](load("glInvalidateFramebuffer"))
  glInvalidateSubFramebuffer = cast[proc (target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glInvalidateSubFramebuffer"))
  glMultiDrawArraysIndirect = cast[proc (mode: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei) {.cdecl, gcsafe.}](load("glMultiDrawArraysIndirect"))
  glMultiDrawElementsIndirect = cast[proc (mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei) {.cdecl, gcsafe.}](load("glMultiDrawElementsIndirect"))
  glGetProgramInterfaceiv = cast[proc (program: GLuint, programInterface: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetProgramInterfaceiv"))
  glGetProgramResourceIndex = cast[proc (program: GLuint, programInterface: GLenum, name: cstring): GLuint {.cdecl, gcsafe.}](load("glGetProgramResourceIndex"))
  glGetProgramResourceName = cast[proc (program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.cdecl, gcsafe.}](load("glGetProgramResourceName"))
  glGetProgramResourceiv = cast[proc (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: ptr GLenum, count: GLsizei, length: ptr GLsizei, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetProgramResourceiv"))
  glGetProgramResourceLocation = cast[proc (program: GLuint, programInterface: GLenum, name: cstring): GLint {.cdecl, gcsafe.}](load("glGetProgramResourceLocation"))
  glGetProgramResourceLocationIndex = cast[proc (program: GLuint, programInterface: GLenum, name: cstring): GLint {.cdecl, gcsafe.}](load("glGetProgramResourceLocationIndex"))
  glShaderStorageBlockBinding = cast[proc (program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) {.cdecl, gcsafe.}](load("glShaderStorageBlockBinding"))
  glTexBufferRange = cast[proc (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.cdecl, gcsafe.}](load("glTexBufferRange"))
  glTexStorage2DMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.cdecl, gcsafe.}](load("glTexStorage2DMultisample"))
  glTexStorage3DMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.cdecl, gcsafe.}](load("glTexStorage3DMultisample"))
  glTextureView = cast[proc (texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) {.cdecl, gcsafe.}](load("glTextureView"))
  glBindVertexBuffer = cast[proc (bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) {.cdecl, gcsafe.}](load("glBindVertexBuffer"))
  glVertexAttribFormat = cast[proc (attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint) {.cdecl, gcsafe.}](load("glVertexAttribFormat"))
  glVertexAttribIFormat = cast[proc (attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.cdecl, gcsafe.}](load("glVertexAttribIFormat"))
  glVertexAttribLFormat = cast[proc (attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.cdecl, gcsafe.}](load("glVertexAttribLFormat"))
  glVertexAttribBinding = cast[proc (attribindex: GLuint, bindingindex: GLuint) {.cdecl, gcsafe.}](load("glVertexAttribBinding"))
  glVertexBindingDivisor = cast[proc (bindingindex: GLuint, divisor: GLuint) {.cdecl, gcsafe.}](load("glVertexBindingDivisor"))
  glDebugMessageControl = cast[proc (source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean) {.cdecl, gcsafe.}](load("glDebugMessageControl"))
  glDebugMessageInsert = cast[proc (source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring) {.cdecl, gcsafe.}](load("glDebugMessageInsert"))
  glDebugMessageCallback = cast[proc (callback: GLDEBUGPROC, userParam: pointer) {.cdecl, gcsafe.}](load("glDebugMessageCallback"))
  glGetDebugMessageLog = cast[proc (count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.cdecl, gcsafe.}](load("glGetDebugMessageLog"))
  glPushDebugGroup = cast[proc (source: GLenum, id: GLuint, length: GLsizei, message: cstring) {.cdecl, gcsafe.}](load("glPushDebugGroup"))
  glPopDebugGroup = cast[proc () {.cdecl, gcsafe.}](load("glPopDebugGroup"))
  glObjectLabel = cast[proc (identifier: GLenum, name: GLuint, length: GLsizei, label: cstring) {.cdecl, gcsafe.}](load("glObjectLabel"))
  glGetObjectLabel = cast[proc (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.cdecl, gcsafe.}](load("glGetObjectLabel"))
  glObjectPtrLabel = cast[proc (`ptr`: pointer, length: GLsizei, label: cstring) {.cdecl, gcsafe.}](load("glObjectPtrLabel"))
  glGetObjectPtrLabel = cast[proc (`ptr`: pointer, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.cdecl, gcsafe.}](load("glGetObjectPtrLabel"))
  glGetPointerv = cast[proc (pname: GLenum, params: ptr pointer) {.cdecl, gcsafe.}](load("glGetPointerv"))


proc load_GL_VERSION_4_4(load: proc) =
  if not GLAD_GL_VERSION_4_4: return

  glBufferStorage = cast[proc (target: GLenum, size: GLsizeiptr, data: pointer, flags: GLbitfield) {.cdecl, gcsafe.}](load("glBufferStorage"))
  glClearTexImage = cast[proc (texture: GLuint, level: GLint, format: GLenum, `type`: GLenum, data: pointer) {.cdecl, gcsafe.}](load("glClearTexImage"))
  glClearTexSubImage = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, data: pointer) {.cdecl, gcsafe.}](load("glClearTexSubImage"))
  glBindBuffersBase = cast[proc (target: GLenum, first: GLuint, count: GLsizei, buffers: ptr GLuint) {.cdecl, gcsafe.}](load("glBindBuffersBase"))
  glBindBuffersRange = cast[proc (target: GLenum, first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, sizes: ptr GLsizeiptr) {.cdecl, gcsafe.}](load("glBindBuffersRange"))
  glBindTextures = cast[proc (first: GLuint, count: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}](load("glBindTextures"))
  glBindSamplers = cast[proc (first: GLuint, count: GLsizei, samplers: ptr GLuint) {.cdecl, gcsafe.}](load("glBindSamplers"))
  glBindImageTextures = cast[proc (first: GLuint, count: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}](load("glBindImageTextures"))
  glBindVertexBuffers = cast[proc (first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, strides: ptr GLsizei) {.cdecl, gcsafe.}](load("glBindVertexBuffers"))


proc load_GL_VERSION_4_5(load: proc) =
  if not GLAD_GL_VERSION_4_5: return

  glClipControl = cast[proc (origin: GLenum, depth: GLenum) {.cdecl, gcsafe.}](load("glClipControl"))
  glCreateTransformFeedbacks = cast[proc (n: GLsizei, ids: ptr GLuint) {.cdecl, gcsafe.}](load("glCreateTransformFeedbacks"))
  glTransformFeedbackBufferBase = cast[proc (xfb: GLuint, index: GLuint, buffer: GLuint) {.cdecl, gcsafe.}](load("glTransformFeedbackBufferBase"))
  glTransformFeedbackBufferRange = cast[proc (xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.cdecl, gcsafe.}](load("glTransformFeedbackBufferRange"))
  glGetTransformFeedbackiv = cast[proc (xfb: GLuint, pname: GLenum, param: ptr GLint) {.cdecl, gcsafe.}](load("glGetTransformFeedbackiv"))
  glGetTransformFeedbacki_v2 = cast[proc (xfb: GLuint, pname: GLenum, index: GLuint, param: ptr GLint) {.cdecl, gcsafe.}](load("glGetTransformFeedbacki_v2"))
  glGetTransformFeedbacki64_v = cast[proc (xfb: GLuint, pname: GLenum, index: GLuint, param: ptr GLint64) {.cdecl, gcsafe.}](load("glGetTransformFeedbacki64_v"))
  glCreateBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.cdecl, gcsafe.}](load("glCreateBuffers"))
  glNamedBufferStorage = cast[proc (buffer: GLuint, size: GLsizeiptr, data: pointer, flags: GLbitfield) {.cdecl, gcsafe.}](load("glNamedBufferStorage"))
  glNamedBufferData = cast[proc (buffer: GLuint, size: GLsizeiptr, data: pointer, usage: GLenum) {.cdecl, gcsafe.}](load("glNamedBufferData"))
  glNamedBufferSubData = cast[proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl, gcsafe.}](load("glNamedBufferSubData"))
  glCopyNamedBufferSubData = cast[proc (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.cdecl, gcsafe.}](load("glCopyNamedBufferSubData"))
  glClearNamedBufferData = cast[proc (buffer: GLuint, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer) {.cdecl, gcsafe.}](load("glClearNamedBufferData"))
  glClearNamedBufferSubData = cast[proc (buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer) {.cdecl, gcsafe.}](load("glClearNamedBufferSubData"))
  glMapNamedBuffer = cast[proc (buffer: GLuint, access: GLenum): pointer {.cdecl, gcsafe.}](load("glMapNamedBuffer"))
  glMapNamedBufferRange = cast[proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.cdecl, gcsafe.}](load("glMapNamedBufferRange"))
  glUnmapNamedBuffer = cast[proc (buffer: GLuint): GLboolean {.cdecl, gcsafe.}](load("glUnmapNamedBuffer"))
  glFlushMappedNamedBufferRange = cast[proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) {.cdecl, gcsafe.}](load("glFlushMappedNamedBufferRange"))
  glGetNamedBufferParameteriv = cast[proc (buffer: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetNamedBufferParameteriv"))
  glGetNamedBufferParameteri64v = cast[proc (buffer: GLuint, pname: GLenum, params: ptr GLint64) {.cdecl, gcsafe.}](load("glGetNamedBufferParameteri64v"))
  glGetNamedBufferPointerv = cast[proc (buffer: GLuint, pname: GLenum, params: ptr pointer) {.cdecl, gcsafe.}](load("glGetNamedBufferPointerv"))
  glGetNamedBufferSubData = cast[proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl, gcsafe.}](load("glGetNamedBufferSubData"))
  glCreateFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl, gcsafe.}](load("glCreateFramebuffers"))
  glNamedFramebufferRenderbuffer = cast[proc (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.cdecl, gcsafe.}](load("glNamedFramebufferRenderbuffer"))
  glNamedFramebufferParameteri = cast[proc (framebuffer: GLuint, pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glNamedFramebufferParameteri"))
  glNamedFramebufferTexture = cast[proc (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) {.cdecl, gcsafe.}](load("glNamedFramebufferTexture"))
  glNamedFramebufferTextureLayer = cast[proc (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.cdecl, gcsafe.}](load("glNamedFramebufferTextureLayer"))
  glNamedFramebufferDrawBuffer = cast[proc (framebuffer: GLuint, buf: GLenum) {.cdecl, gcsafe.}](load("glNamedFramebufferDrawBuffer"))
  glNamedFramebufferDrawBuffers = cast[proc (framebuffer: GLuint, n: GLsizei, bufs: ptr GLenum) {.cdecl, gcsafe.}](load("glNamedFramebufferDrawBuffers"))
  glNamedFramebufferReadBuffer = cast[proc (framebuffer: GLuint, src: GLenum) {.cdecl, gcsafe.}](load("glNamedFramebufferReadBuffer"))
  glInvalidateNamedFramebufferData = cast[proc (framebuffer: GLuint, numAttachments: GLsizei, attachments: ptr GLenum) {.cdecl, gcsafe.}](load("glInvalidateNamedFramebufferData"))
  glInvalidateNamedFramebufferSubData = cast[proc (framebuffer: GLuint, numAttachments: GLsizei, attachments: ptr GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glInvalidateNamedFramebufferSubData"))
  glClearNamedFramebufferiv = cast[proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLint) {.cdecl, gcsafe.}](load("glClearNamedFramebufferiv"))
  glClearNamedFramebufferuiv = cast[proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLuint) {.cdecl, gcsafe.}](load("glClearNamedFramebufferuiv"))
  glClearNamedFramebufferfv = cast[proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat) {.cdecl, gcsafe.}](load("glClearNamedFramebufferfv"))
  glClearNamedFramebufferfi = cast[proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) {.cdecl, gcsafe.}](load("glClearNamedFramebufferfi"))
  glBlitNamedFramebuffer = cast[proc (readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.cdecl, gcsafe.}](load("glBlitNamedFramebuffer"))
  glCheckNamedFramebufferStatus = cast[proc (framebuffer: GLuint, target: GLenum): GLenum {.cdecl, gcsafe.}](load("glCheckNamedFramebufferStatus"))
  glGetNamedFramebufferParameteriv = cast[proc (framebuffer: GLuint, pname: GLenum, param: ptr GLint) {.cdecl, gcsafe.}](load("glGetNamedFramebufferParameteriv"))
  glGetNamedFramebufferAttachmentParameteriv = cast[proc (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetNamedFramebufferAttachmentParameteriv"))
  glCreateRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl, gcsafe.}](load("glCreateRenderbuffers"))
  glNamedRenderbufferStorage = cast[proc (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glNamedRenderbufferStorage"))
  glNamedRenderbufferStorageMultisample = cast[proc (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glNamedRenderbufferStorageMultisample"))
  glGetNamedRenderbufferParameteriv = cast[proc (renderbuffer: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetNamedRenderbufferParameteriv"))
  glCreateTextures = cast[proc (target: GLenum, n: GLsizei, textures: ptr GLuint) {.cdecl, gcsafe.}](load("glCreateTextures"))
  glTextureBuffer = cast[proc (texture: GLuint, internalformat: GLenum, buffer: GLuint) {.cdecl, gcsafe.}](load("glTextureBuffer"))
  glTextureBufferRange = cast[proc (texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.cdecl, gcsafe.}](load("glTextureBufferRange"))
  glTextureStorage1D = cast[proc (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei) {.cdecl, gcsafe.}](load("glTextureStorage1D"))
  glTextureStorage2D = cast[proc (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glTextureStorage2D"))
  glTextureStorage3D = cast[proc (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) {.cdecl, gcsafe.}](load("glTextureStorage3D"))
  glTextureStorage2DMultisample = cast[proc (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.cdecl, gcsafe.}](load("glTextureStorage2DMultisample"))
  glTextureStorage3DMultisample = cast[proc (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.cdecl, gcsafe.}](load("glTextureStorage3DMultisample"))
  glTextureSubImage1D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTextureSubImage1D"))
  glTextureSubImage2D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTextureSubImage2D"))
  glTextureSubImage3D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl, gcsafe.}](load("glTextureSubImage3D"))
  glCompressedTextureSubImage1D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTextureSubImage1D"))
  glCompressedTextureSubImage2D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTextureSubImage2D"))
  glCompressedTextureSubImage3D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glCompressedTextureSubImage3D"))
  glCopyTextureSubImage1D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.cdecl, gcsafe.}](load("glCopyTextureSubImage1D"))
  glCopyTextureSubImage2D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glCopyTextureSubImage2D"))
  glCopyTextureSubImage3D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl, gcsafe.}](load("glCopyTextureSubImage3D"))
  glTextureParameterf = cast[proc (texture: GLuint, pname: GLenum, param: GLfloat) {.cdecl, gcsafe.}](load("glTextureParameterf"))
  glTextureParameterfv = cast[proc (texture: GLuint, pname: GLenum, param: ptr GLfloat) {.cdecl, gcsafe.}](load("glTextureParameterfv"))
  glTextureParameteri = cast[proc (texture: GLuint, pname: GLenum, param: GLint) {.cdecl, gcsafe.}](load("glTextureParameteri"))
  glTextureParameterIiv = cast[proc (texture: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glTextureParameterIiv"))
  glTextureParameterIuiv = cast[proc (texture: GLuint, pname: GLenum, params: ptr GLuint) {.cdecl, gcsafe.}](load("glTextureParameterIuiv"))
  glTextureParameteriv = cast[proc (texture: GLuint, pname: GLenum, param: ptr GLint) {.cdecl, gcsafe.}](load("glTextureParameteriv"))
  glGenerateTextureMipmap = cast[proc (texture: GLuint) {.cdecl, gcsafe.}](load("glGenerateTextureMipmap"))
  glBindTextureUnit = cast[proc (unit: GLuint, texture: GLuint) {.cdecl, gcsafe.}](load("glBindTextureUnit"))
  glGetTextureImage = cast[proc (texture: GLuint, level: GLint, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer) {.cdecl, gcsafe.}](load("glGetTextureImage"))
  glGetCompressedTextureImage = cast[proc (texture: GLuint, level: GLint, bufSize: GLsizei, pixels: pointer) {.cdecl, gcsafe.}](load("glGetCompressedTextureImage"))
  glGetTextureLevelParameterfv = cast[proc (texture: GLuint, level: GLint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetTextureLevelParameterfv"))
  glGetTextureLevelParameteriv = cast[proc (texture: GLuint, level: GLint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetTextureLevelParameteriv"))
  glGetTextureParameterfv = cast[proc (texture: GLuint, pname: GLenum, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetTextureParameterfv"))
  glGetTextureParameterIiv = cast[proc (texture: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetTextureParameterIiv"))
  glGetTextureParameterIuiv = cast[proc (texture: GLuint, pname: GLenum, params: ptr GLuint) {.cdecl, gcsafe.}](load("glGetTextureParameterIuiv"))
  glGetTextureParameteriv = cast[proc (texture: GLuint, pname: GLenum, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetTextureParameteriv"))
  glCreateVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.cdecl, gcsafe.}](load("glCreateVertexArrays"))
  glDisableVertexArrayAttrib = cast[proc (vaobj: GLuint, index: GLuint) {.cdecl, gcsafe.}](load("glDisableVertexArrayAttrib"))
  glEnableVertexArrayAttrib = cast[proc (vaobj: GLuint, index: GLuint) {.cdecl, gcsafe.}](load("glEnableVertexArrayAttrib"))
  glVertexArrayElementBuffer = cast[proc (vaobj: GLuint, buffer: GLuint) {.cdecl, gcsafe.}](load("glVertexArrayElementBuffer"))
  glVertexArrayVertexBuffer = cast[proc (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) {.cdecl, gcsafe.}](load("glVertexArrayVertexBuffer"))
  glVertexArrayVertexBuffers = cast[proc (vaobj: GLuint, first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, strides: ptr GLsizei) {.cdecl, gcsafe.}](load("glVertexArrayVertexBuffers"))
  glVertexArrayAttribBinding = cast[proc (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) {.cdecl, gcsafe.}](load("glVertexArrayAttribBinding"))
  glVertexArrayAttribFormat = cast[proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint) {.cdecl, gcsafe.}](load("glVertexArrayAttribFormat"))
  glVertexArrayAttribIFormat = cast[proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.cdecl, gcsafe.}](load("glVertexArrayAttribIFormat"))
  glVertexArrayAttribLFormat = cast[proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.cdecl, gcsafe.}](load("glVertexArrayAttribLFormat"))
  glVertexArrayBindingDivisor = cast[proc (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) {.cdecl, gcsafe.}](load("glVertexArrayBindingDivisor"))
  glGetVertexArrayiv = cast[proc (vaobj: GLuint, pname: GLenum, param: ptr GLint) {.cdecl, gcsafe.}](load("glGetVertexArrayiv"))
  glGetVertexArrayIndexediv = cast[proc (vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint) {.cdecl, gcsafe.}](load("glGetVertexArrayIndexediv"))
  glGetVertexArrayIndexed64iv = cast[proc (vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint64) {.cdecl, gcsafe.}](load("glGetVertexArrayIndexed64iv"))
  glCreateSamplers = cast[proc (n: GLsizei, samplers: ptr GLuint) {.cdecl, gcsafe.}](load("glCreateSamplers"))
  glCreateProgramPipelines = cast[proc (n: GLsizei, pipelines: ptr GLuint) {.cdecl, gcsafe.}](load("glCreateProgramPipelines"))
  glCreateQueries = cast[proc (target: GLenum, n: GLsizei, ids: ptr GLuint) {.cdecl, gcsafe.}](load("glCreateQueries"))
  glGetQueryBufferObjecti64v = cast[proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.cdecl, gcsafe.}](load("glGetQueryBufferObjecti64v"))
  glGetQueryBufferObjectiv = cast[proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.cdecl, gcsafe.}](load("glGetQueryBufferObjectiv"))
  glGetQueryBufferObjectui64v = cast[proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.cdecl, gcsafe.}](load("glGetQueryBufferObjectui64v"))
  glGetQueryBufferObjectuiv = cast[proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.cdecl, gcsafe.}](load("glGetQueryBufferObjectuiv"))
  glMemoryBarrierByRegion = cast[proc (barriers: GLbitfield) {.cdecl, gcsafe.}](load("glMemoryBarrierByRegion"))
  glGetTextureSubImage = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer) {.cdecl, gcsafe.}](load("glGetTextureSubImage"))
  glGetCompressedTextureSubImage = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: pointer) {.cdecl, gcsafe.}](load("glGetCompressedTextureSubImage"))
  glGetGraphicsResetStatus = cast[proc (): GLenum {.cdecl, gcsafe.}](load("glGetGraphicsResetStatus"))
  glGetnCompressedTexImage = cast[proc (target: GLenum, lod: GLint, bufSize: GLsizei, pixels: pointer) {.cdecl, gcsafe.}](load("glGetnCompressedTexImage"))
  glGetnTexImage = cast[proc (target: GLenum, level: GLint, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer) {.cdecl, gcsafe.}](load("glGetnTexImage"))
  glGetnUniformdv = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetnUniformdv"))
  glGetnUniformfv = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetnUniformfv"))
  glGetnUniformiv = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint) {.cdecl, gcsafe.}](load("glGetnUniformiv"))
  glGetnUniformuiv = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint) {.cdecl, gcsafe.}](load("glGetnUniformuiv"))
  glReadnPixels = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, data: pointer) {.cdecl, gcsafe.}](load("glReadnPixels"))
  glGetnMapdv = cast[proc (target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLdouble) {.cdecl, gcsafe.}](load("glGetnMapdv"))
  glGetnMapfv = cast[proc (target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetnMapfv"))
  glGetnMapiv = cast[proc (target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLint) {.cdecl, gcsafe.}](load("glGetnMapiv"))
  glGetnPixelMapfv = cast[proc (map: GLenum, bufSize: GLsizei, values: ptr GLfloat) {.cdecl, gcsafe.}](load("glGetnPixelMapfv"))
  glGetnPixelMapuiv = cast[proc (map: GLenum, bufSize: GLsizei, values: ptr GLuint) {.cdecl, gcsafe.}](load("glGetnPixelMapuiv"))
  glGetnPixelMapusv = cast[proc (map: GLenum, bufSize: GLsizei, values: ptr GLushort) {.cdecl, gcsafe.}](load("glGetnPixelMapusv"))
  glGetnPolygonStipple = cast[proc (bufSize: GLsizei, pattern: ptr GLubyte) {.cdecl, gcsafe.}](load("glGetnPolygonStipple"))
  glGetnColorTable = cast[proc (target: GLenum, format: GLenum, `type`: GLenum, bufSize: GLsizei, table: pointer) {.cdecl, gcsafe.}](load("glGetnColorTable"))
  glGetnConvolutionFilter = cast[proc (target: GLenum, format: GLenum, `type`: GLenum, bufSize: GLsizei, image: pointer) {.cdecl, gcsafe.}](load("glGetnConvolutionFilter"))
  glGetnSeparableFilter = cast[proc (target: GLenum, format: GLenum, `type`: GLenum, rowBufSize: GLsizei, row: pointer, columnBufSize: GLsizei, column: pointer, span: pointer) {.cdecl, gcsafe.}](load("glGetnSeparableFilter"))
  glGetnHistogram = cast[proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, bufSize: GLsizei, values: pointer) {.cdecl, gcsafe.}](load("glGetnHistogram"))
  glGetnMinmax = cast[proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, bufSize: GLsizei, values: pointer) {.cdecl, gcsafe.}](load("glGetnMinmax"))
  glTextureBarrier = cast[proc () {.cdecl, gcsafe.}](load("glTextureBarrier"))


proc load_GL_VERSION_4_6(load: proc) =
  if not GLAD_GL_VERSION_4_6: return

  glSpecializeShader = cast[proc (shader: GLuint, pEntryPoint: cstring, numSpecializationConstants: GLuint, pConstantIndex: ptr GLuint, pConstantValue: ptr GLuint) {.cdecl, gcsafe.}](load("glSpecializeShader"))
  glMultiDrawArraysIndirectCount = cast[proc (mode: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) {.cdecl, gcsafe.}](load("glMultiDrawArraysIndirectCount"))
  glMultiDrawElementsIndirectCount = cast[proc (mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) {.cdecl, gcsafe.}](load("glMultiDrawElementsIndirectCount"))
  glPolygonOffsetClamp = cast[proc (factor: GLfloat, units: GLfloat, clamp: GLfloat) {.cdecl, gcsafe.}](load("glPolygonOffsetClamp"))


proc findExtensionsGL() =
  discard


proc findCoreGL(glVersion: string) =
  # Thank you @elmindreda
  # https://github.com/elmindreda/greg/blob/master/templates/greg.c.in#L176
  # https://github.com/glfw/glfw/blob/master/src/context.c#L36
  var prefixes = ["OpenGL ES-CM ", "OpenGL ES-CL ", "OpenGL ES "]

  var version = glVersion
  for p in prefixes:
    if version.startsWith(p):
      version = version.replace(p)
      break

  var major = ord(glVersion[0]) - ord('0')
  var minor = ord(glVersion[2]) - ord('0')

  glVersionMajor = major
  glVersionMinor = minor

  GLAD_GL_VERSION_1_0 = (major == 1 and minor >= 0) or major > 1
  GLAD_GL_VERSION_1_1 = (major == 1 and minor >= 1) or major > 1
  GLAD_GL_VERSION_1_2 = (major == 1 and minor >= 2) or major > 1
  GLAD_GL_VERSION_1_3 = (major == 1 and minor >= 3) or major > 1
  GLAD_GL_VERSION_1_4 = (major == 1 and minor >= 4) or major > 1
  GLAD_GL_VERSION_1_5 = (major == 1 and minor >= 5) or major > 1
  GLAD_GL_VERSION_2_0 = (major == 2 and minor >= 0) or major > 2
  GLAD_GL_VERSION_2_1 = (major == 2 and minor >= 1) or major > 2
  GLAD_GL_VERSION_3_0 = (major == 3 and minor >= 0) or major > 3
  GLAD_GL_VERSION_3_1 = (major == 3 and minor >= 1) or major > 3
  GLAD_GL_VERSION_3_2 = (major == 3 and minor >= 2) or major > 3
  GLAD_GL_VERSION_3_3 = (major == 3 and minor >= 3) or major > 3
  GLAD_GL_VERSION_4_0 = (major == 4 and minor >= 0) or major > 4
  GLAD_GL_VERSION_4_1 = (major == 4 and minor >= 1) or major > 4
  GLAD_GL_VERSION_4_2 = (major == 4 and minor >= 2) or major > 4
  GLAD_GL_VERSION_4_3 = (major == 4 and minor >= 3) or major > 4
  GLAD_GL_VERSION_4_4 = (major == 4 and minor >= 4) or major > 4
  GLAD_GL_VERSION_4_5 = (major == 4 and minor >= 5) or major > 4
  GLAD_GL_VERSION_4_6 = (major == 4 and minor >= 6) or major > 4


proc gladLoadGL*(load: proc): bool =
  glGetString = cast[proc (name: GLenum): ptr GLubyte {.cdecl, gcsafe.}](load("glGetString"))
  if glGetString == nil: return false

  var glVersion = cast[cstring](glGetString(GL_VERSION))
  if glVersion == nil: return false

  findCoreGL($glVersion)

  load_GL_VERSION_1_0(load)
  load_GL_VERSION_1_1(load)
  load_GL_VERSION_1_2(load)
  load_GL_VERSION_1_3(load)
  load_GL_VERSION_1_4(load)
  load_GL_VERSION_1_5(load)
  load_GL_VERSION_2_0(load)
  load_GL_VERSION_2_1(load)
  load_GL_VERSION_3_0(load)
  load_GL_VERSION_3_1(load)
  load_GL_VERSION_3_2(load)
  load_GL_VERSION_3_3(load)
  load_GL_VERSION_4_0(load)
  load_GL_VERSION_4_1(load)
  load_GL_VERSION_4_2(load)
  load_GL_VERSION_4_3(load)
  load_GL_VERSION_4_4(load)
  load_GL_VERSION_4_5(load)
  load_GL_VERSION_4_6(load)

  findExtensionsGL()


  return glVersionMajor != 0 or glVersionMinor != 0